cmd [1] | fd -e py -x pyupgrade --keep-runtime-typing --py310-plus
cmd [2] | ruff format .
32 files left unchanged
cmd [3] | ruff check --fix --unsafe-fixes .
src/midjargon/cli/main.py:39:33: FBT001 Boolean-typed positional argument in function definition
   |
37 |     """CLI interface for midjargon."""
38 |
39 |     def json(self, prompt: str, no_color: bool = False) -> None:
   |                                 ^^^^^^^^ FBT001
40 |         """Parse a prompt to MidjargonDict format.
   |

src/midjargon/cli/main.py:39:33: FBT002 Boolean default positional argument in function definition
   |
37 |     """CLI interface for midjargon."""
38 |
39 |     def json(self, prompt: str, no_color: bool = False) -> None:
   |                                 ^^^^^^^^ FBT002
40 |         """Parse a prompt to MidjargonDict format.
   |

src/midjargon/cli/main.py:54:28: FBT001 Boolean-typed positional argument in function definition
   |
53 |     def mj(
54 |         self, prompt: str, json_output: bool = False, no_color: bool = False
   |                            ^^^^^^^^^^^ FBT001
55 |     ) -> None:
56 |         """Convert a prompt to Midjourney format.
   |

src/midjargon/cli/main.py:54:28: FBT002 Boolean default positional argument in function definition
   |
53 |     def mj(
54 |         self, prompt: str, json_output: bool = False, no_color: bool = False
   |                            ^^^^^^^^^^^ FBT002
55 |     ) -> None:
56 |         """Convert a prompt to Midjourney format.
   |

src/midjargon/cli/main.py:54:55: FBT001 Boolean-typed positional argument in function definition
   |
53 |     def mj(
54 |         self, prompt: str, json_output: bool = False, no_color: bool = False
   |                                                       ^^^^^^^^ FBT001
55 |     ) -> None:
56 |         """Convert a prompt to Midjourney format.
   |

src/midjargon/cli/main.py:54:55: FBT002 Boolean default positional argument in function definition
   |
53 |     def mj(
54 |         self, prompt: str, json_output: bool = False, no_color: bool = False
   |                                                       ^^^^^^^^ FBT002
55 |     ) -> None:
56 |         """Convert a prompt to Midjourney format.
   |

src/midjargon/cli/main.py:92:28: FBT001 Boolean-typed positional argument in function definition
   |
91 |     def fal(
92 |         self, prompt: str, json_output: bool = False, no_color: bool = False
   |                            ^^^^^^^^^^^ FBT001
93 |     ) -> None:
94 |         """Convert a prompt to Fal.ai format.
   |

src/midjargon/cli/main.py:92:28: FBT002 Boolean default positional argument in function definition
   |
91 |     def fal(
92 |         self, prompt: str, json_output: bool = False, no_color: bool = False
   |                            ^^^^^^^^^^^ FBT002
93 |     ) -> None:
94 |         """Convert a prompt to Fal.ai format.
   |

src/midjargon/cli/main.py:92:55: FBT001 Boolean-typed positional argument in function definition
   |
91 |     def fal(
92 |         self, prompt: str, json_output: bool = False, no_color: bool = False
   |                                                       ^^^^^^^^ FBT001
93 |     ) -> None:
94 |         """Convert a prompt to Fal.ai format.
   |

src/midjargon/cli/main.py:92:55: FBT002 Boolean default positional argument in function definition
   |
91 |     def fal(
92 |         self, prompt: str, json_output: bool = False, no_color: bool = False
   |                                                       ^^^^^^^^ FBT002
93 |     ) -> None:
94 |         """Convert a prompt to Fal.ai format.
   |

src/midjargon/cli/main.py:124:28: FBT001 Boolean-typed positional argument in function definition
    |
123 |     def perm(
124 |         self, prompt: str, json_output: bool = False, no_color: bool = False
    |                            ^^^^^^^^^^^ FBT001
125 |     ) -> None:
126 |         """Expand permutations in a prompt.
    |

src/midjargon/cli/main.py:124:28: FBT002 Boolean default positional argument in function definition
    |
123 |     def perm(
124 |         self, prompt: str, json_output: bool = False, no_color: bool = False
    |                            ^^^^^^^^^^^ FBT002
125 |     ) -> None:
126 |         """Expand permutations in a prompt.
    |

src/midjargon/cli/main.py:124:55: FBT001 Boolean-typed positional argument in function definition
    |
123 |     def perm(
124 |         self, prompt: str, json_output: bool = False, no_color: bool = False
    |                                                       ^^^^^^^^ FBT001
125 |     ) -> None:
126 |         """Expand permutations in a prompt.
    |

src/midjargon/cli/main.py:124:55: FBT002 Boolean default positional argument in function definition
    |
123 |     def perm(
124 |         self, prompt: str, json_output: bool = False, no_color: bool = False
    |                                                       ^^^^^^^^ FBT002
125 |     ) -> None:
126 |         """Expand permutations in a prompt.
    |

src/midjargon/core/input.py:8:5: C901 `parse_weighted_prompt` is too complex (12 > 10)
  |
8 | def parse_weighted_prompt(prompt: str) -> list[tuple[str, float]]:
  |     ^^^^^^^^^^^^^^^^^^^^^ C901
9 |     """Parse a prompt with optional weights.
  |

src/midjargon/core/main.py:9:36: FBT001 Boolean-typed positional argument in function definition
   |
 8 | def format_json_output(
 9 |     variants: list[PromptVariant], include_parsed: bool = False
   |                                    ^^^^^^^^^^^^^^ FBT001
10 | ) -> dict[str, Any]:
11 |     """Format prompt variants as JSON output.
   |

src/midjargon/core/main.py:9:36: FBT002 Boolean default positional argument in function definition
   |
 8 | def format_json_output(
 9 |     variants: list[PromptVariant], include_parsed: bool = False
   |                                    ^^^^^^^^^^^^^^ FBT002
10 | ) -> dict[str, Any]:
11 |     """Format prompt variants as JSON output.
   |

src/midjargon/core/models.py:31:9: C901 `_missing_` is too complex (16 > 10)
   |
30 |     @classmethod
31 |     def _missing_(cls, value: Any) -> Optional["MidjourneyVersion"]:
   |         ^^^^^^^^^ C901
32 |         """Handle missing values by trying to normalize the input."""
33 |         try:
   |

src/midjargon/core/models.py:31:9: PLR0911 Too many return statements (7 > 6)
   |
30 |     @classmethod
31 |     def _missing_(cls, value: Any) -> Optional["MidjourneyVersion"]:
   |         ^^^^^^^^^ PLR0911
32 |         """Handle missing values by trying to normalize the input."""
33 |         try:
   |

src/midjargon/core/models.py:31:9: PLR0912 Too many branches (16 > 12)
   |
30 |     @classmethod
31 |     def _missing_(cls, value: Any) -> Optional["MidjourneyVersion"]:
   |         ^^^^^^^^^ PLR0912
32 |         """Handle missing values by trying to normalize the input."""
33 |         try:
   |

src/midjargon/core/models.py:77:9: E722 Do not use bare `except`
   |
76 |             return None
77 |         except:
   |         ^^^^^^ E722
78 |             return None
   |

src/midjargon/core/models.py:158:9: E722 Do not use bare `except`
    |
156 |                 raise ValueError
157 |             return f"{w}:{h}"
158 |         except:
    |         ^^^^^^ E722
159 |             msg = "Invalid aspect ratio format. Expected W:H"
160 |             raise ValueError(msg)
    |

src/midjargon/core/models.py:160:13: B904 Within an `except` clause, raise exceptions with `raise ... from err` or `raise ... from None` to distinguish them from errors in exception handling
    |
158 |         except:
159 |             msg = "Invalid aspect ratio format. Expected W:H"
160 |             raise ValueError(msg)
    |             ^^^^^^^^^^^^^^^^^^^^^ B904
161 |
162 |     @field_validator("stylize")
    |

src/midjargon/core/models.py:234:17: B904 Within an `except` clause, raise exceptions with `raise ... from err` or `raise ... from None` to distinguish them from errors in exception handling
    |
232 |             except ValueError as e:
233 |                 msg = f"Invalid aspect ratio format: {e}"
234 |                 raise ValueError(msg)
    |                 ^^^^^^^^^^^^^^^^^^^^^ B904
235 |         return v
    |

src/midjargon/core/models.py:239:48: ARG003 Unused class method argument: `info`
    |
237 |     @field_validator("character_reference", "style_reference")
238 |     @classmethod
239 |     def validate_references(cls, v: list[Any], info: ValidationInfo) -> list[Any]:
    |                                                ^^^^ ARG003
240 |         """Validate reference lists."""
241 |         if v is None:
    |

src/midjargon/core/parameters.py:65:5: E722 Do not use bare `except`
   |
63 |         result = urlparse(value)
64 |         return all([result.scheme, result.netloc])
65 |     except:
   |     ^^^^^^ E722
66 |         return False
   |

src/midjargon/core/parameters.py:69:5: C901 `convert_parameter_value` is too complex (15 > 10)
   |
69 | def convert_parameter_value(param: str, value: str | None) -> Any:
   |     ^^^^^^^^^^^^^^^^^^^^^^^ C901
70 |     """Convert a parameter value to the appropriate type."""
71 |     # Handle flag parameters
   |

src/midjargon/core/parameters.py:69:5: PLR0911 Too many return statements (10 > 6)
   |
69 | def convert_parameter_value(param: str, value: str | None) -> Any:
   |     ^^^^^^^^^^^^^^^^^^^^^^^ PLR0911
70 |     """Convert a parameter value to the appropriate type."""
71 |     # Handle flag parameters
   |

src/midjargon/core/parameters.py:69:5: PLR0912 Too many branches (15 > 12)
   |
69 | def convert_parameter_value(param: str, value: str | None) -> Any:
   |     ^^^^^^^^^^^^^^^^^^^^^^^ PLR0912
70 |     """Convert a parameter value to the appropriate type."""
71 |     # Handle flag parameters
   |

src/midjargon/core/parameters.py:89:13: B904 Within an `except` clause, raise exceptions with `raise ... from err` or `raise ... from None` to distinguish them from errors in exception handling
   |
87 |         except ValueError:
88 |             msg = f"Invalid version value: {value}"
89 |             raise ValueError(msg)
   |             ^^^^^^^^^^^^^^^^^^^^^ B904
90 |
91 |     # Handle integer parameters
   |

src/midjargon/core/parameters.py:97:13: B904 Within an `except` clause, raise exceptions with `raise ... from err` or `raise ... from None` to distinguish them from errors in exception handling
   |
95 |         except ValueError:
96 |             msg = f"Invalid integer value for {param}: {value}"
97 |             raise ValueError(msg)
   |             ^^^^^^^^^^^^^^^^^^^^^ B904
98 |
99 |     # Handle float parameters
   |

src/midjargon/core/parameters.py:114:13: B904 Within an `except` clause, raise exceptions with `raise ... from err` or `raise ... from None` to distinguish them from errors in exception handling
    |
112 |         except ValueError:
113 |             msg = f"Invalid numeric value for {param}: {value}"
114 |             raise ValueError(msg)
    |             ^^^^^^^^^^^^^^^^^^^^^ B904
115 |
116 |     # Handle style parameter
    |

src/midjargon/core/parameters.py:122:13: B904 Within an `except` clause, raise exceptions with `raise ... from err` or `raise ... from None` to distinguish them from errors in exception handling
    |
120 |         except ValueError:
121 |             msg = f"Invalid style value: {value}"
122 |             raise ValueError(msg)
    |             ^^^^^^^^^^^^^^^^^^^^^ B904
123 |
124 |     # Handle character and style references
    |

src/midjargon/core/parameters.py:139:13: B904 Within an `except` clause, raise exceptions with `raise ... from err` or `raise ... from None` to distinguish them from errors in exception handling
    |
137 |         except Exception:
138 |             msg = f"Invalid reference value for {param}: {value}"
139 |             raise ValueError(msg)
    |             ^^^^^^^^^^^^^^^^^^^^^ B904
140 |
141 |     # Default case: return as string
    |

src/midjargon/core/parameters.py:145:5: C901 `parse_parameters` is too complex (14 > 10)
    |
145 | def parse_parameters(param_str: str) -> dict[str, Any]:
    |     ^^^^^^^^^^^^^^^^ C901
146 |     """Parse parameters from a string into a dictionary."""
147 |     if not param_str:
    |

src/midjargon/core/parameters.py:145:5: PLR0912 Too many branches (18 > 12)
    |
145 | def parse_parameters(param_str: str) -> dict[str, Any]:
    |     ^^^^^^^^^^^^^^^^ PLR0912
146 |     """Parse parameters from a string into a dictionary."""
147 |     if not param_str:
    |

src/midjargon/core/parameters.py:155:9: B904 Within an `except` clause, raise exceptions with `raise ... from err` or `raise ... from None` to distinguish them from errors in exception handling
    |
153 |     except ValueError as e:
154 |         msg = f"Failed to parse parameters: {e}"
155 |         raise ValueError(msg)
    |         ^^^^^^^^^^^^^^^^^^^^^ B904
156 |
157 |     result: dict[str, Any] = {}
    |

src/midjargon/core/parameters.py:188:21: B904 Within an `except` clause, raise exceptions with `raise ... from err` or `raise ... from None` to distinguish them from errors in exception handling
    |
186 |                 except Exception as e:
187 |                     msg = f"Failed to parse parameter {current_param}: {e}"
188 |                     raise ValueError(msg)
    |                     ^^^^^^^^^^^^^^^^^^^^^ B904
189 |
190 |             # Start new parameter
    |

src/midjargon/core/parameters.py:221:13: B904 Within an `except` clause, raise exceptions with `raise ... from err` or `raise ... from None` to distinguish them from errors in exception handling
    |
219 |         except Exception as e:
220 |             msg = f"Failed to parse parameter {current_param}: {e}"
221 |             raise ValueError(msg)
    |             ^^^^^^^^^^^^^^^^^^^^^ B904
222 |
223 |     return result
    |

src/midjargon/core/parser.py:24:5: E722 Do not use bare `except`
   |
22 |             )
23 |         )
24 |     except:
   |     ^^^^^^ E722
25 |         return False
   |

src/midjargon/core/parser.py:60:5: C901 `parse_parameters` is too complex (15 > 10)
   |
60 | def parse_parameters(param_str: str) -> dict[str, Any]:
   |     ^^^^^^^^^^^^^^^^ C901
61 |     """Parse parameter string into a dictionary.
   |

src/midjargon/core/parser.py:60:5: PLR0912 Too many branches (18 > 12)
   |
60 | def parse_parameters(param_str: str) -> dict[str, Any]:
   |     ^^^^^^^^^^^^^^^^ PLR0912
61 |     """Parse parameter string into a dictionary.
   |

src/midjargon/core/parser.py:132:17: B904 Within an `except` clause, raise exceptions with `raise ... from err` or `raise ... from None` to distinguish them from errors in exception handling
    |
130 |             except Exception as e:
131 |                 msg = f"Failed to parse list parameter {param_name}: {e!s}"
132 |                 raise ValueError(msg)
    |                 ^^^^^^^^^^^^^^^^^^^^^ B904
133 |         # Handle string parameters
134 |         else:
    |

src/midjargon/core/parser.py:164:13: B904 Within an `except` clause, raise exceptions with `raise ... from err` or `raise ... from None` to distinguish them from errors in exception handling
    |
162 |         except Exception as e:
163 |             msg = f"Failed to parse parameters: {e!s}"
164 |             raise ValueError(msg)
    |             ^^^^^^^^^^^^^^^^^^^^^ B904
165 |     else:
166 |         text_part = remaining_text.strip()
    |

src/midjargon/core/parser.py:181:9: B904 Within an `except` clause, raise exceptions with `raise ... from err` or `raise ... from None` to distinguish them from errors in exception handling
    |
179 |     except Exception as e:
180 |         msg = f"Failed to create prompt object: {e!s}"
181 |         raise ValueError(msg)
    |         ^^^^^^^^^^^^^^^^^^^^^ B904
    |

src/midjargon/core/permutations.py:127:9: B904 Within an `except` clause, raise exceptions with `raise ... from err` or `raise ... from None` to distinguish them from errors in exception handling
    |
125 |     except Exception as e:
126 |         msg = f"Failed to parse options at position {start}: {e!s}"
127 |         raise ValueError(msg)
    |         ^^^^^^^^^^^^^^^^^^^^^ B904
128 |
129 |     if not options:
    |

src/midjargon/core/permutations.py:145:13: B904 Within an `except` clause, raise exceptions with `raise ... from err` or `raise ... from None` to distinguish them from errors in exception handling
    |
143 |         except Exception as e:
144 |             msg = f"Failed to expand option '{option}': {e!s}"
145 |             raise ValueError(msg)
    |             ^^^^^^^^^^^^^^^^^^^^^ B904
146 |
147 |     return results
    |

Found 47 errors.
============================= test session starts ==============================
platform darwin -- Python 3.12.8, pytest-8.3.4, pluggy-1.5.0 -- /Users/adam/Library/Application Support/hatch/env/virtual/midjargon/XMQ91zt9/hatch-test.py3.12/bin/python3
cachedir: .pytest_cache
rootdir: /Users/adam/Developer/vcs/github.twardoch/pub/twat-packages/midjargon
configfile: pyproject.toml
plugins: rerunfailures-14.0, anyio-4.8.0, mock-3.14.0, xdist-3.6.1
collecting ... collected 80 items / 1 error

==================================== ERRORS ====================================
_____________________ ERROR collecting tests/test_core.py ______________________
ImportError while importing test module '/Users/adam/Developer/vcs/github.twardoch/pub/twat-packages/midjargon/tests/test_core.py'.
Hint: make sure your test modules/packages have valid Python names.
Traceback:
/Library/Frameworks/Python.framework/Versions/3.12/lib/python3.12/importlib/__init__.py:90: in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
tests/test_core.py:6: in <module>
    from midjargon import expand_midjargon_input
E   ImportError: cannot import name 'expand_midjargon_input' from 'midjargon' (/Users/adam/Developer/vcs/github.twardoch/pub/twat-packages/midjargon/src/midjargon/__init__.py)
=========================== short test summary info ============================
ERROR tests/test_core.py
!!!!!!!!!!!!!!!!!!!! Interrupted: 1 error during collection !!!!!!!!!!!!!!!!!!!!
=============================== 1 error in 0.40s ===============================
