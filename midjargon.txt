# TODO!!!!! Implement the `midjargon` Python package in `src`. 

1. Read the `README.md` file that explains the package in general. 

2. Read the `docs/specification.md` spec that describes the syntax. 

3. Read the stub code: 

- prompt parser in `src/midjargon/core/parser.py`
- parameter parsing in `src/midjargon/core/parameters.py` (including alias resolution, type conversion, and default handling).
- recursive permutation expansion in `src/midjargon/core/permutations.py`,
- CLI interface in `src/midjargon/cli/main.py`
- engines stubs in `src/midjargon/engines/midjourney/` and also for `fal`
- additional tests

4. In the `LOG.md` file in this folder, you have PREVIOUSLY STARTED WRITING your plan. Read the `LOG.md` file, analyze what you’ve written, and think hard on how to CORRECT, REVISE, EXPAND and IMPROVE your plan. Gradually add more ideas and specifics to it—include alternative approaches, detailed action items, potential dependencies, and identify risks.

5. In `LOG.md`, feel free to add NOTES TO SELF in any format you prefer. You may APPEND to it, or EDIT/REWRITE it. `LOG.md` is your SCRATCHPAD and should evolve with every iteration.

6. Read the `pyproject.toml` file that will install the package. This defines the overall structure of the package and its POTENTIAL dependencies. You may remove dependencies that are not needed or add new ones!

7. Analyze the tests in `tests/`. These tests should guide your implementation so that in the end, the package passes all of them.

8. Analyze the `test-cases/prompts.sh` script and the associated files.

9. Think very hard about how to implement the package so that it is efficient, fast, robust, and easy to maintain. Consider refactoring opportunities, performance optimizations, and comprehensive error handling.

10. Write your thoughts. Write very detailed notes on your methodology, on the algorithms and techniques and approaches you will use, about organizing the code.  Be specific, make your thinking and notes easy to follow for a developer who will then implement your plan! 



# Folder Tree Structure

.
├── LICENSE
├── LOG.md
├── README.md
├── _private
│   └── TODO.md
├── dist
├── docs
│   └── specification.md
├── package.toml
├── printme.sh
├── pyproject.toml
├── src
│   └── midjargon
│       ├── __init__.py
│       ├── cli
│       │   ├── __init__.py
│       │   └── main.py
│       ├── core
│       │   ├── __init__.py
│       │   ├── input.py
│       │   ├── parameters.py
│       │   ├── parser.py
│       │   └── permutations.py
│       └── engines
│           ├── __init__.py
│           └── midjourney
│               ├── __init__.py
│               └── midjourney.py
├── test-cases
│   ├── prompts-fal.txt
│   ├── prompts-in.txt
│   ├── prompts-json.txt
│   ├── prompts-mj.txt
│   ├── prompts-out.txt
│   ├── prompts-perm.txt
│   └── prompts.sh
└── tests
    ├── __init__.py
    ├── cli
    │   ├── __init__.py
    │   └── test_main.py
    ├── conftest.py
    ├── core
    │   ├── __init__.py
    │   ├── test_input.py
    │   ├── test_parameters.py
    │   └── test_parser.py
    ├── engines
    │   ├── __init__.py
    │   └── midjourney
    │       ├── __init__.py
    │       └── test_midjourney_parser.py
    ├── integration
    │   ├── __init__.py
    │   └── test_workflow.py
    └── test_package.py

17 directories, 40 files



# Folder: .

## File: .cursor/rules/midjargon.mdc (Size: 3.53 KB)

```
---
description: "Midjargon configuration documentation for folder structure."
globs: []
---

Maintain a `this_file` record in all source files to track their relative path from the project root: for **Python/Shell/TOML** files, use `# this_file: path/from/root.ext` as the first comment (after any shebang line `#!`), and for **Markdown** files, include `this_file: path/from/root.md` in the YAML front matter block at the document start. Update paths when moving files. Keep the entry as the first metadata element. Use Unix-style `/` path separators. Omit leading `./` in paths. *Example:* A Python file in `src/utils` would start with `#!/usr/bin/env python3\n# this_file: src/utils/helpers.py`.

# `midjargon`

`midjargon` is a hatch-managed Python library for parsing and manipulating Midjourney prompts using a specialized syntax. This tool helps you work with Midjourney prompts in a structured way, handling complex features like permutations, parameter validation, and image URL extraction.

<guidelines for python>
1. WHEN YOU WRITE PYTHON: 

a. CORE STYLE: Follow PEP 8 for consistent formatting & naming. Write clear, descriptive names for functions & variables. Keep code simple & explicit (PEP 20). Prioritize readability over cleverness. 
b. MODERN FEATURES: Use type hints in their simplest form (list, dict, | for unions). Write clear, imperative docstrings (PEP 257). Employ f-strings for string formatting. Use structural pattern matching where appropriate. 
c. CODE STRUCTURE: Extract repeated logic into focused functions. Handle errors explicitly and gracefully. Keep functions small and single-purpose. Prefer flat over nested structures. 
d. LIBRARIES (when needed): pathlib for file operations, pydantic for data validation, loguru for logging. Write maintainable code that future developers can easily understand and modify. 
e. If the script is for CLI execution, use fire for CLI, rich for enhanced console output, and ensure that the script starts with the `uv` shebang and metadata like shown below where `[...]` is a list of Python dependency specifiers, like `["fire", "rich"]`: 

```
#!/usr/bin/env -S uv run 
# /// script
# dependencies = [...]
# ///
```

f. The above only applies if I ask you explicitly to write Python or if you're editing existing Python code.
</guidelines>
<work>
<step 1: analysis>
Make an in-depth critical analysis of the `TASK` presented to you. Read the content of the @TODO.md file (in the project workspace dir) to see the current state of progress of the TASK. Then make an in-depth critical analysis of the inputs presented. 
</step>
<step 2: gather up-to-date insights>
Consult the @Web if you can. Consult the most up-to-date @Docs and run `hatch fmt; hatch test`. 
</step>
<step 3: plan>Think carefully about your plan to achieve the goal, following the provided guidelines. Write out general principles, then propose specific changes. 
</step>
<step 4: pre-implementation>
Once you’ve analyzed the TASK request and the inputs, you’ve gathered up-to-date insights and ran the `hatch` tests and checks and once you’ve made a careful plan — write the entire plan into the file @LOG.md (in the project workspace folder) — be very detailed and specific. 
</step>
<step 5: implementation>
You can start implementing the plan. Whenever you’ve made larger edits to Python files, run `hatch fmt; hatch test` to see how your changes impacted the @Codebase , then refine your plan. Keep progress documentation in @LOG.md (in the project workspace folder) , remove completed items. Work until you CLEAR the @TODO.md !     
</step>
</work>
```

## File: .github/copilot-instructions.md (Size: 3.43 KB)

```

Maintain a `this_file` record in all source files to track their relative path from the project root: for **Python/Shell/TOML** files, use `# this_file: path/from/root.ext` as the first comment (after any shebang line `#!`), and for **Markdown** files, include `this_file: path/from/root.md` in the YAML front matter block at the document start. Update paths when moving files. Keep the entry as the first metadata element. Use Unix-style `/` path separators. Omit leading `./` in paths. *Example:* A Python file in `src/utils` would start with `#!/usr/bin/env python3\n# this_file: src/utils/helpers.py`.

# `midjargon`

`midjargon` is a hatch-managed Python library for parsing and manipulating Midjourney prompts using a specialized syntax. This tool helps you work with Midjourney prompts in a structured way, handling complex features like permutations, parameter validation, and image URL extraction.

<guidelines for python>
1. WHEN YOU WRITE PYTHON: 

a. CORE STYLE: Follow PEP 8 for consistent formatting & naming. Write clear, descriptive names for functions & variables. Keep code simple & explicit (PEP 20). Prioritize readability over cleverness. 
b. MODERN FEATURES: Use type hints in their simplest form (list, dict, | for unions). Write clear, imperative docstrings (PEP 257). Employ f-strings for string formatting. Use structural pattern matching where appropriate. 
c. CODE STRUCTURE: Extract repeated logic into focused functions. Handle errors explicitly and gracefully. Keep functions small and single-purpose. Prefer flat over nested structures. 
d. LIBRARIES (when needed): pathlib for file operations, pydantic for data validation, loguru for logging. Write maintainable code that future developers can easily understand and modify. 
e. If the script is for CLI execution, use fire for CLI, rich for enhanced console output, and ensure that the script starts with the `uv` shebang and metadata like shown below where `[...]` is a list of Python dependency specifiers, like `["fire", "rich"]`: 

```
#!/usr/bin/env -S uv run 
# /// script
# dependencies = [...]
# ///
```

f. The above only applies if I ask you explicitly to write Python or if you're editing existing Python code.
</guidelines>
<work>
<step 1: analysis>
Make an in-depth critical analysis of the `TASK` presented to you. Read the content of the @TODO.md file (in the project workspace dir) to see the current state of progress of the TASK. Then make an in-depth critical analysis of the inputs presented. 
</step>
<step 2: gather up-to-date insights>
Consult the @Web if you can. Consult the most up-to-date @Docs and run `hatch fmt; hatch test`. 
</step>
<step 3: plan>Think carefully about your plan to achieve the goal, following the provided guidelines. Write out general principles, then propose specific changes. 
</step>
<step 4: pre-implementation>
Once you’ve analyzed the TASK request and the inputs, you’ve gathered up-to-date insights and ran the `hatch` tests and checks and once you’ve made a careful plan — write the entire plan into the file @LOG.md (in the project workspace folder) — be very detailed and specific. 
</step>
<step 5: implementation>
You can start implementing the plan. Whenever you’ve made larger edits to Python files, run `hatch fmt; hatch test` to see how your changes impacted the @Codebase , then refine your plan. Keep progress documentation in @LOG.md (in the project workspace folder) , remove completed items. Work until you CLEAR the @TODO.md !     
</step>
</work>
```

## File: .github/workflows/push.yml (Size: 2.70 KB)

```
name: Build & Test

on:
  push:
    branches: [main]
    tags-ignore: ["v*"]
  pull_request:
    branches: [main]
  workflow_dispatch:

permissions:
  contents: write
  id-token: write

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  quality:
    name: Code Quality
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Run Ruff lint
        uses: astral-sh/ruff-action@v3
        with:
          version: "latest"
          args: "check --output-format=github"

      - name: Run Ruff Format
        uses: astral-sh/ruff-action@v3
        with:
          version: "latest"
          args: "format --check --respect-gitignore"

  test:
    name: Run Tests
    needs: quality
    strategy:
      matrix:
        python-version: ["3.10", "3.11", "3.12"]
        os: [ubuntu-latest]
      fail-fast: true
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install UV
        uses: astral-sh/setup-uv@v5
        with:
          version: "latest"
          python-version: ${{ matrix.python-version }}
          enable-cache: true
          cache-suffix: ${{ matrix.os }}-${{ matrix.python-version }}

      - name: Install test dependencies
        run: |
          uv pip install --system --upgrade pip
          uv pip install --system ".[test]"

      - name: Run tests with Pytest
        run: uv run pytest -n auto --maxfail=1 --disable-warnings --cov-report=xml --cov-config=pyproject.toml --cov=src/midjargon --cov=tests tests/

      - name: Upload coverage report
        uses: actions/upload-artifact@v4
        with:
          name: coverage-${{ matrix.python-version }}-${{ matrix.os }}
          path: coverage.xml

  build:
    name: Build Distribution
    needs: test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Install UV
        uses: astral-sh/setup-uv@v5
        with:
          version: "latest"
          python-version: "3.12"
          enable-cache: true

      - name: Install build tools
        run: uv pip install build hatchling hatch-vcs

      - name: Build distributions
        run: uv run python -m build --outdir dist

      - name: Upload distribution artifacts
        uses: actions/upload-artifact@v4
        with:
          name: dist-files
          path: dist/
          retention-days: 5
```

## File: .github/workflows/release.yml (Size: 1.41 KB)

```
name: Release

on:
  push:
    tags: ["v*"]

permissions:
  contents: write
  id-token: write

jobs:
  release:
    name: Release to PyPI
    runs-on: ubuntu-latest
    environment:
      name: pypi
      url: https://pypi.org/p/midjargon
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Install UV
        uses: astral-sh/setup-uv@v5
        with:
          version: "latest"
          python-version: "3.12"
          enable-cache: true

      - name: Install build tools
        run: uv pip install build hatchling hatch-vcs

      - name: Build distributions
        run: uv run python -m build --outdir dist

      - name: Verify distribution files
        run: |
          ls -la dist/
          test -n "$(find dist -name '*.whl')" || (echo "Wheel file missing" && exit 1)
          test -n "$(find dist -name '*.tar.gz')" || (echo "Source distribution missing" && exit 1)

      - name: Publish to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          password: ${{ secrets.PYPI_TOKEN }}

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          files: dist/*
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
```

## File: .gitignore (Size: 3.41 KB)

```
!**/[Pp]ackages/build/
!.axoCover/settings.json
!.vscode/extensions.json
!.vscode/launch.json
!.vscode/settings.json
!.vscode/tasks.json
!?*.[Cc]ache/
!Directory.Build.rsp
!dist/.gitkeep
$tf/
*$py.class
**/*.DesktopClient/GeneratedArtifacts
**/*.DesktopClient/ModelManifest.xml
**/*.HTMLClient/GeneratedArtifacts
**/*.Server/GeneratedArtifacts
**/*.Server/ModelManifest.xml
**/[Pp]ackages/*
*- [Bb]ackup ([0-9]).rdl
*- [Bb]ackup ([0-9][0-9]).rdl
*- [Bb]ackup.rdl
*.[Cc]ache
*.[Pp]ublish.xml
*.[Rr]e[Ss]harper
*.a
*.app
*.appx
*.appxbundle
*.appxupload
*.aps
*.azurePubxml
*.bim.layout
*.bim_*.settings
*.binlog
*.btm.cs
*.btp.cs
*.build.csdef
*.cab
*.cachefile
*.code-workspace
*.cover
*.coverage
*.coveragexml
*.d
*.dbmdl
*.dbproj.schemaview
*.dll
*.dotCover
*.DotSettings.user
*.dsp
*.dsw
*.dylib
*.e2e
*.egg
*.egg-info/
*.exe
*.gch
*.GhostDoc.xml
*.gpState
*.ilk
*.iobj
*.ipdb
*.jfm
*.jmconfig
*.la
*.lai
*.ldf
*.lib
*.lo
*.log
*.mdf
*.meta
*.mm.*
*.mod
*.msi
*.msix
*.msm
*.msp
*.ncb
*.ndf
*.nuget.props
*.nuget.targets
*.nupkg
*.nvuser
*.o
*.obj
*.odx.cs
*.opendb
*.opensdf
*.opt
*.out
*.pch
*.pdb
*.pfx
*.pgc
*.pgd
*.pidb
*.plg
*.psess
*.publishproj
*.publishsettings
*.pubxml
*.py,cover
*.py[cod]
*.pyc
*.rdl.data
*.rptproj.bak
*.rptproj.rsuser
*.rsp
*.rsuser
*.sap
*.sbr
*.scc
*.sdf
*.sln.docstates
*.sln.iml
*.slo
*.smod
*.snupkg
*.so
*.suo
*.svclog
*.swo
*.swp
*.tlb
*.tlh
*.tli
*.tlog
*.tmp
*.tmp_proj
*.tss
*.user
*.userosscache
*.userprefs
*.vbp
*.vbw
*.VC.db
*.VC.VC.opendb
*.VisualState.xml
*.vsp
*.vspscc
*.vspx
*.vssscc
*.xsd.cs
*_autogen/
*_h.h
*_i.c
*_p.c
*_wpftmp.csproj
*~
.*crunch*.local.xml
._*
.axoCover/*
.builds
.cache
.coverage
.coverage.*
.cr/personal
.DS_Store
.DS_Store?
.eggs/
.env
.fake/
.history/
.hypothesis/
.idea/
.installed.cfg
.ionide/
.localhistory/
.mfractor/
.mypy_cache/
.nox/
.ntvs_analysis.dat
.paket/paket.exe
.pytest_cache/
.Python
.ruff_cache/
.sass-cache/
.Spotlight-V100
.tox/
.Trashes
.venv
.vs/
.vscode
.vscode/
.vscode/*
.vshistory/
[Aa][Rr][Mm]/
[Aa][Rr][Mm]64/
[Bb]in/
[Bb]uild[Ll]og.*
[Dd]ebug/
[Dd]ebugPS/
[Dd]ebugPublic/
[Ee]xpress/
[Ll]og/
[Ll]ogs/
[Oo]bj/
[Rr]elease/
[Rr]eleasePS/
[Rr]eleases/
[Tt]est[Rr]esult*/
[Ww][Ii][Nn]32/
__pycache__/
__version__.py
_Chutzpah*
_deps
_NCrunch_*
_pkginfo.txt
_Pvt_Extensions
_ReSharper*/
_TeamCity*
_UpgradeReport_Files/
AppPackages/
artifacts/
ASALocalRun/
AutoTest.Net/
Backup*/
BenchmarkDotNet.Artifacts/
bld/
build/
BundleArtifacts/
ClientBin/
cmake_install.cmake
CMakeCache.txt
CMakeFiles
CMakeLists.txt.user
CMakeScripts
CMakeUserPresets.json
compile_commands.json
cover/
coverage*.info
coverage*.json
coverage*.xml
coverage.xml
csx/
CTestTestfile.cmake
develop-eggs/
dlldata.c
DocProject/buildhelp/
DocProject/Help/*.hhc
DocProject/Help/*.hhk
DocProject/Help/*.hhp
DocProject/Help/*.HxC
DocProject/Help/*.HxT
DocProject/Help/html
DocProject/Help/Html2
downloads/
ecf/
eggs/
ehthumbs.db
env.bak/
env/
ENV/
FakesAssemblies/
FodyWeavers.xsd
Generated\ Files/
Generated_Code/
healthchecksdb
htmlcov/
install_manifest.txt
ipch/
lib/
lib64/
Makefile
MANIFEST
MigrationBackup/
mono_crash.*
nCrunchTemp_*
node_modules/
nosetests.xml
nunit-*.xml
OpenCover/
orleans.codegen.cs
Package.StoreAssociation.xml
paket-files/
parts/
project.fragment.lock.json
project.lock.json
publish/
PublishScripts/
rcf/
ScaffoldingReadMe.txt
sdist/
ServiceFabricBackup/
StyleCopReport.xml
Testing
TestResult.xml
Thumbs.db
UpgradeLog*.htm
UpgradeLog*.XML
var/
venv.bak/
venv/
wheels/
x64/
x86/
~$*
.aider*
/_private
```

## File: .pre-commit-config.yaml (Size: 0.52 KB)

```
repos:
  - repo: https://github.com/astral-sh/ruff-pre-commit
    rev: v0.3.4
    hooks:
      - id: ruff
        args: [--fix]
      - id: ruff-format
        args: [--respect-gitignore]
  - repo: https://github.com/pre-commit/pre-commit-hooks
    rev: v4.5.0
    hooks:
      - id: trailing-whitespace
      - id: end-of-file-fixer
      - id: check-yaml
      - id: check-toml
      - id: check-added-large-files
      - id: debug-statements
      - id: check-case-conflict
      - id: mixed-line-ending
        args: [--fix=lf]
```

## File: LICENSE (Size: 1.04 KB)

```
MIT License

Copyright (c) 2025 Adam Twardoch

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
```

## File: LOG.md (Size: 0.05 KB)

```
---
this_file: LOG.md
---
# Implementation Log
```

## File: README.md (Size: 3.63 KB)

```
---
this_file: README.md
---

# Midjargon

`midjargon` is a powerful Python library designed to simplify the parsing and manipulation of Midjourney-style prompts. 

Midjourney uses a specialized syntax for prompts, which we call “midjargon”. It allows for `{}` permutation and for specifying of parameters using an `--` prefix. This syntax is useful for other applications, such as constructing prompts for Flux models. 

The `midjargon` package reads midjargon prompts, deconstructs them into manageable components, ensuring type-safe operations and comprehensive validation. It also converts midjargon prompts into other formats, such as Fal.ai, and serializes them back into the Midjourney format.

_It’s work in progress, but already pretty usable._

## Features

- **Robust Prompt Parsing**:
  - Parses Midjourney prompts into structured components (text, parameters, image URLs)
  - Type-safe parsing with comprehensive validation
  - Supports complex prompt structures and syntax

- **Advanced Permutation Support**:
  - Handles nested permutations in curly braces `{option1, option2}`
  - Supports escaped characters in permutations (e.g., `\,` for literal commas)
  - Automatically expands all possible combinations

- **Comprehensive Parameter Handling**:
  - Validates parameter names and values
  - Supports numeric ranges and type conversion
  - Processes boolean flags and multi-value parameters

- **Image URL Processing**:
  - Extracts and validates image URLs
  - Supports multiple image inputs and file extensions

- **Multi-prompt Support**:
  - Handles weighted prompts using `::`
  - Processes multiple variations in a single input

- **Type Safety**:
  - Full type hints throughout the codebase
  - Pydantic models for robust validation

- **Rich CLI Interface**:
  - Fire-based command-line interface with rich output
  - CLI commands for converting prompts to different formats (Midjourney, Fal.ai)
  - JSON output option for automation

## Installation

```bash
pip install midjargon
```

## Quick Start

### Basic Usage

```python
from midjargon import parse_midjourney_dict, expand_midjargon_input

# Parse a simple prompt
prompt = "a serene landscape --ar 16:9 --stylize 100"
result = expand_midjargon_input(prompt)[0]
validated = parse_midjourney_dict(result)
```

### CLI Usage

Midjargon exposes a single CLI interface with multiple commands. Here are some examples:

```bash
# You can run the tool with uv without installing dependencies: 
uv run midjargon

# You can also run it directly: 
midjargon

# Or using your Python interpreter:
python -m midjargon
```

To get help on the commands: 

```bash
# Help for Fal.ai conversion (convert prompt to Fal.ai format)
midjargon fal --help

# Help for Midjourney conversion
midjargon mj --help

# Help for JSON parsing (MidjargonDict output)
midjargon json --help

# Help for permutation expansion
midjargon perm --help
```

You can also run commands directly:

```bash
# Convert prompt to Fal.ai format:
midjargon fal "a portrait of a cat --ar 1:1"

# Parse prompt to MidjargonDict:
midjargon json "a futuristic city --chaos 20 --stylize 200"

# Convert prompt to Midjourney format:
midjargon mj "a landscape --ar 16:9 --tile"

# Expand prompt permutations:
midjargon perm "a {red, blue} bird on a tree"
```

## Project Structure

TODO: Add a file tree

## Contributing

Contributions are welcome! Please submit a pull request with your changes.

### Development Setup

1. Clone the repository
2. Install dependencies:
   ```bash
   uv pip install --system --upgrade ".[all]"
   ```
3. Run tests:
   ```bash
   hatch test
   ```
4. Format code:
   ```bash
   hatch fmt
   ```

## License

MIT License - See LICENSE file for details
```

## File: dist/.gitkeep (Size: 0.00 KB)

```

```

## File: docs/specification.md (Size: 15.07 KB)

```
---
this_file: docs/specification.md
---

# **Midjourney Prompt Format Specification**

_2025-02-06 by Adam Twardoch, not affiliated with Midjourney_

Midjourney prompts use “midjargon”, a structured syntax to instruct the Midjourney models to generate images. A prompt consists of three main sections, in order:

1. **Image Reference (Optional)**
2. **Text Description (Required if no image is provided)**
3. **Parameters (Optional)**

Each section has defined syntax and placement requirements. Advanced features such as multi-prompts with weights, permutation prompts, personalization, and style or character references are integrated into the text description and parameters.

Midjourney supports two distinct types of stylizations. The official Midjourney documentation often ambiguously calls both “style”: 

- Style reference
- Personalization

## Parameters

Parameters are modifiers appended at the end of the prompt that adjust various aspects of image generation. Parameters always begin with two hyphens `--` and may accept a value. The order of parameters (after the text description) is flexible.

Terms that follow a parameter `--a` are treated as its arguments (values). If `--a` is directly followed by another parameter `--b`, then `--a` is considered a boolean flag. 

---

## Choosing the model

### Midjourney series (`--v` or `--version`)

Uses the specified version of the general Midjourney model series. 

#### Syntax

```
--v <version_number>
```

#### Values

- `5`, `5.1`, `5.2`, `6`, `6.1`

> Example

```
--v 6
```

### Niji series (`--niji`)

Uses the specified version of the Niji model series, optimized for anime and illustrative styles.

#### Syntax

```
--niji <version_number>
```

- Values: `5`, `6`

> Example

```
--niji 6
```

### Model mode (`--style`)

Applies specific model mode. 

```
--style <mode_name>
```

- Mode name can be `raw`, it reduces automatic personalization.

> Example

```
--style raw
```

## Using images

### Image references

One or more direct image URLs or attachments used to influence the generated image's style, color, composition, and content.

Must appear at the very **start** of the prompt.

Each image can be:

- A direct image URL ending with `.png`, `.jpg`, `.jpeg`, `.gif`, or `.webp`.
- An attached image in Discord or uploaded via the Midjourney web interface.

Multiple images are separated by whitespace.

> Example

```
https://example.com/image1.jpg https://example.com/image2.png
```

#### Image weight (`--iw`)

`--iw <value>`

Adjusts the influence of all image references relative to the text prompt. 

- Value Range `0.0` to `3.0` (float)
- Default: `1.0` (varies by model)

> Example

```
--iw 1.5
```

As with other parameters, `--iw` must be placed after the text description, even though it refers to the image references that are placed at the very start of the prompt.

### Character reference (`--cref`)

`--cref <url1> [<url2> ...]`

Uses images as character references to maintain consistency.

#### Character weight (`--cw`)

Adjusts the strength of the character reference.

`--cw <value>`

- Value range: `0` to `100` (integer)
- Default: `100`

The character weight `0` typically only copies the face. 

> Example

```
--cref https://example.com/character.jpg --cw 50
```

### Style reference (`--sref`)

The `--sref` parameter uses images as style references without influencing content. It applies the visual characteristics of a specific images or stylization code. 

In effect, it pulls the generated image towards a specific look that is expressed explicitly (via the image) or less directly (via the stylization code).

```
--sref <url|code> [<url|code> ...]
```

One or more image URLs or a specific stylization CODE (the CODE acts as a shorthand for a predefined image reference)

#### Style weight (`--sw`)

Adjusts the strength of the style reference.

`--sw <value>`

- Value Range: `0` to `1000` (integer)

#### Style version (`--sv`)

Selects different style reference algorithms.

`--sv <value>`

- Values: `1`, `2`, `3`, `4`

> Example

```
--sref https://example.com/style.jpg --sw 200 --sv 2
```

#### Random style reference

`--sref random`

Generates a random style reference.

### Persona reference (`--p`)

References one or more “personas”, personalized style profiles, which pull the generated image towards the preferences or a general style of a particular user or moodboard, with the degree controlled by `--s`.

- Without specifying a persona code, `--p` uses your current personalization profile.
- Providing one or more persona codes of a personalization profile or moodboard (e.g., `--p p123456789`) applies a specific personalization.

#### Personalization weight (`--s`)

```
--stylize <value>
```

The `--s` (`--stylize`, or personalization weight) parameter controls the degree of personalization. 

- If a persona with a code is provided, the `--s` parameter controls how much the generated image will be pulled towards that persona.
- If the personalization switch is used (`--p`) without a code, the `--s` parameter controls how much the generated image will be pulled towards your current personalization profile.
- If the personalization switch is not used (no `--p` at all), the `--s` parameter controls how much the generated image will be pulled towards the model’s general “persona” (overall aesthetic preference).

- Value range: `0` to `1000` (integer)
- Default: `100`

The value of `0` applies minimal personalization, though certain influence of the model remains. To reduce the model influence, and have purer personalization use `--style raw` together with a low `--s` value.

> Example:

```
--p p123456789 --s 500 --style raw
```

## Describing the image

A natural language description of the desired image, specifying the subject, mood, style, and other artistic details.

### Clarity & specificity

Use specific adjectives, nouns, and phrases. Describe the subject, medium, environment, lighting, color, mood, and composition.

### Positive framing

Emphasize what should appear in the image rather than what should be excluded (exclusions are handled by the `--no` parameter).

### Tokenization

The text is internally tokenized; word order and precision are important.

### Text generation

Use double quotation marks `"` around words or phrases to specify exact text you want to appear in the image.

> Example

```
A neon sign that says "Open"
```

### Negative text description (`--no`)

Signals to the model elements or aspects that you don’t want to see in the image. 

```
--no <item1, item2, ...>
```

- Value: Comma-separated list of terms

> Example:

```
--no cars, trees, watermarks
```

## Image layout

### Aspect ratio (`--ar`)

Sets the width-to-height ratio of the image

```
--ar <width>:<height>
```

- Value: Two integers separated by a colon
- Default: `1:1`

> Example:

```
--ar 16:9
```

### Tile (`--tile`)

Creates images that are seamlessly tileable

```
--tile
```

- Value: None (boolean flag)

> Example:

```
--tile
```

---

## Separating and prioritizing

Use a double colon `::` to separate concepts, optionally followed by a weight. If omitted, the weight defaults to 1.

```
concept1 ::<weight1> concept2 ::<weight2> ...
```

- Weight values can be floating-point numbers within the range `-10.0` to `10.0`.
- Negative weights (e.g., `::-0.5`) de-emphasize or exclude a concept.

### Purpose

This syntax allows you to balance and blend different concepts in one prompt. Weights are normalized internally to maintain their proportional relationships.

### Examples

```
futuristic city ::2 cyberpunk skyline ::1
beautiful landscape ::1.5 mountains ::-0.5 water
serene lake ::2 foggy mountains ::1
portrait ::1.5 dramatic lighting ::1 dark background ::0.8
still life painting ::1 fruit ::-0.5
```

---

## Variation

### Chaos (`--chaos` or `--c`)

Controls variation or unpredictability in the output

```
--chaos <value>
```

- Value range: `0` to `100` (integer)
- Default: `0`

> Example

```
--chaos 50
```

### Weird (`--weird` or `--w`)

Introduces unconventional aesthetics

```
--weird <value>
```

- Value range: `0` to `3000` (integer)
- Default: `0`

> Example

```
--weird 1000
```

---

## Generation process

### Seed (`--seed`)

Sets a specific seed to reproduce outcomes

```
--seed <value>
```

- Value range: `0` to `4294967295` (integer)

> Example:

```
--seed 123456789
```

### Prompt permutation

Prompt permutation allows you to quickly generate multiple prompts by including comma-separated options within curly braces `{}`. The surrounding fixed text is repeated with each provided option to create separate prompt variations.

Enclose a comma-separated list of options within curly braces. 

```
A {red, blue, green} car
```

This expands to 3 prompts:

- `A red car`
- `A blue car`
- `A green car`

Repeat permutations.

```
A {red, blue} {car, truck} with {chrome, matte} finish
```

This expands to 2×2×2=8 prompts. 

Permute parameters.

```
portrait --ar {1:1, 16:9} --s {100, 500, 1000}
```

This expands to 2×3=6 prompts. 

Nest permutations.

```
{realistic, artistic} scene --v {5.2, 6 {, --style raw}} 
```

This expands to 2×(2+1)=6 prompts:

- `realistic scene --v 5.2`
- `realistic scene --v 6`
- `realistic scene --v 6 --style raw`
- `artistic scene --v 5.2`
- `artistic scene --v 6`
- `artistic scene --v 6 --style raw`

Within a permutation group, use commas to separate portions, prefix a comma with a backslash to actually have it in the expanded prompt.

```
A {bright\, vibrant, dark\, moody} atmosphere
```

This expands to 2 prompts:

- `A bright, vibrant atmosphere`
- `A dark, moody atmosphere`

The total number of permutations may be limited based on subscription tier. Permutation prompts are only available in Fast Mode.

Permutation is great for exploring various syntaxes and prompt structures: 

```
beautiful woman{::, ::2, ::0.3, \,} sports car
```

expands into

- `beautiful woman:: sports car`
- `beautiful woman::2 sports car`
- `beautiful woman::0.3 sports car`
- `beautiful woman, sports car`



### Repeat (`--repeat` or `--r`)

The `--r` parameter produces multiple prompts, similarly to prompt permutation, but the multiplication happens on the model side. It can be combined with permutation prompts.

If a prompt includes the `--r` parameter, the model runs the same prompt multiple times to generate variations. It can be used with `--sref random` to generate different style references each time. 

```
--repeat <number>
```

- Value range: Basic Subscribers: 2–4, Standard Subscribers: 2–10, Pro/Mega Subscribers: 2–40

> Example:

```
--repeat 5
```

## Quality and speed

### Quality (`--quality` or `--q`)

Controls the time spent generating an image; affects detail

```
--quality <value>
```

- Values: `0.25`, `0.5`, `1` (default)

> Example

```
--quality 0.5
```

#### Turbo Mode (`--turbo`)

Generates images faster using additional GPU resources

```
--turbo
```

- Value: None (boolean flag)

#### Relax Mode (`--relax`)

Generates images in relaxed mode without consuming GPU time

```
--relax
```

- Value: None (boolean flag)

### Stop (`--stop`)

Stops image generation at a specified percentage of completion for different artistic effects

```
--stop <value>
```

- Value range: `10` to `100` (integer)
- Default: `100`

> Example:

```
--stop 80
```

---

## Summary

- **Order matters**: Image prompts come first (if used), followed by the text description, and then all parameters.
- **Parameter prefix**: Every parameter starts with `--` and, if required, is followed by a space and its value.
- **Advanced techniques**: Use multi-prompts with `::` and permutation prompts with `{}` to fine-tune creative direction and generate multiple variations.
- **Personalization and references**: `--sw` controls the weight of the style reference (`--sref`). `--s` controls the weight of personalization (`--p`, or of the default persona when `--p` is not provided). Style reference and personalization operate independently: each pulls the image in a distinct stylistic direction. To test the full effect of style reference without personalization influence, use: `--style raw --s 0`.
- **Model and feature dependencies**: Some parameters (e.g., `--iw`, `--sv`, `--p`, permutation prompts) are model-specific or depend on the subscription tier or mode (e.g., Fast Mode).
- **Text generation**: Use double quotation marks `"` to specify exact text to appear in the image.

## Prompt examples

1. **Basic Text-Only Prompt:**

```
/imagine prompt: A serene sunset over the ocean
```

2. **Prompt with Image URLs, Text, and Parameters:**

```
/imagine prompt: https://example.com/inspiration.jpg A portrait of a wise old man --style raw --v 5.1
```

3. **Prompt with Character and Style References:**

```
/imagine prompt: A hero in battle --cref https://example.com/hero.png --cw 75 --sref https://example.com/style.jpg --sw 150
```

4. **Multi-Prompt with Weighting:**

```
/imagine prompt: futuristic city ::2 cyberpunk skyline ::1 --chaos 20
```

5. **Permutation Prompt for Multiple Variations:**

```
/imagine prompt: A {red, blue, green} bird on a {flower, leaf} --ar {16:9, 1:1}
```

6. **Prompt with Personalization and Parameters:**

```
/imagine prompt: A vibrant garden in spring --p p123456789 --stylize 500 --seed 987654321
```

7. **Complex Mixed Prompt:**

```
/imagine prompt: {realistic, artistic} portrait of a {young, old} {man, woman} --style {raw, expressive} --v 6 --ar 1:1 --stylize {100, 1000}
```

8. **Prompt with Exclusions and Turbo Mode:**

```
/imagine prompt: A futuristic landscape at dusk --ar 21:9 --stylize 300 --chaos 50 --seed 987654321 --no buildings, cars --turbo
```

---

## Notes for parser implementers

### Parsing order

1. **Permutation:**

- Process all permutation groups `{...}`.
- Handle nested permutations.
- Expand into individual prompts.
- `a{b, c}d` should expand to `abd` `acd`. The spaces right around the `{` and `}` should be treated as they are. Spaces around the separating commas can be collapsed fully, as if there is no space.
- `\{` `\}` `\,` must produce the literal `{` `}` `,` in the expanded permutations

2. **Image referece:**

- Identify and validate image URLs or attachments at the start.
- Check for supported file formats.
- Handle multiple images.

3. **Text description:**

- Extract main prompt text.
- Segment text by weight markers `::`.
- Handle escaped characters.
- Identify text in double quotes `"` for explicit text generation.

4. **Parameter Processing:**

- Extract parameters starting with `--`.
- Parse parameter values.
- Handle boolean flags.
- Validate parameter ranges.
- Values should be typically strings, unless it’s obviously an int or float. Version "number" should be kept a string.

### Boolean Parameters

- If a parameter is followed by another parameter (e.g., `--tile --ar 16:9`), it's treated as a boolean flag.

### Multi-Value Parameters

- Some parameters accept multiple values (e.g., `--no cars, trees`).

### Parameter Validation

- Numeric ranges are enforced.
- Aspect ratios must be valid integers.
- Version numbers must be supported.
- Style names and codes must be recognized.

### Error handling

The parser should handle common errors gracefully:

- Invalid URL formats.
- Malformed permutation syntax.
- Invalid parameter values.
- Missing required components.
- Unsupported parameter combinations.
```

## File: package.toml (Size: 0.43 KB)

```
# Package configuration
# this_file: package.toml
[package]
include_cli = true      # Include CLI boilerplate
include_logging = true  # Include logging setup
use_pydantic = true     # Use Pydantic for data validation
use_rich = true         # Use Rich for terminal output

[features]
mkdocs = false          # Enable MkDocs documentation
vcs = true              # Initialize Git repository
github_actions = true   # Add GitHub Actions workflows
```

## File: printme.sh (Size: 0.28 KB)

```
#!/usr/bin/env bash
# this_file: midjargon/printme.sh
if [ -e ./midjargon.txt ]; then
    rm ./midjargon.txt
fi
if [ -z "$VIRTUAL_ENV" ]; then
    uv pip install --system gitignore-find
else
    uv pip install gitignore-find
fi
printfolder . ../midjargon.txt && mv ../midjargon.txt .
```

## File: pyproject.toml (Size: 4.50 KB)

```
# this_file: pyproject.toml
[build-system]
build-backend = "hatchling.build"
requires = ["hatchling>=1.21.0", "hatch-vcs>=0.3.0"]

[[project.authors]]
email = "adam+github@twardoch.com"
name = "Adam Twardoch"

[project]
classifiers = [
  "Development Status :: 4 - Beta",
  "Programming Language :: Python",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: 3.12",
  "Programming Language :: Python :: Implementation :: CPython",
  "Programming Language :: Python :: Implementation :: PyPy",
]
dependencies = [
  "pydantic>=2.0.0",
  "rich>=13.0.0",
  "fire>=0.5.0",
  "python-box>=7.3.2",
  "fal-client>=0.5.8",
]
description = ""
dynamic = ["version"]
keywords = []
license = "MIT"
name = "midjargon"
readme = "README.md"
requires-python = ">=3.10"

[project.optional-dependencies]
all = [
  "pre-commit>=3.6.0",
  "ruff>=0.1.0",
  "mypy>=1.0.0",
  "pytest>=7.0.0",
  "pytest-cov>=4.0.0",
]
dev = ["pre-commit>=3.6.0", "ruff>=0.1.0", "mypy>=1.0.0"]
test = ["pytest>=7.0.0", "pytest-cov>=4.0.0"]

[project.scripts]
midjargon = "midjargon.__main__:main"

[project.urls]
Documentation = "https://github.com/twardoch/midjargon#readme"
Issues = "https://github.com/twardoch/midjargon/issues"
Source = "https://github.com/twardoch/midjargon"

[tool.coverage.paths]
midjargon = ["src/midjargon", "*/midjargon/src/midjargon"]
tests = ["tests", "*/midjargon/tests"]

[tool.coverage.report]
exclude_lines = ["no cov", "if __name__ == .__main__.:", "if TYPE_CHECKING:"]

[tool.coverage.run]
branch = true
omit = ["src/midjargon/__about__.py"]
parallel = true
source_pkgs = ["midjargon", "tests"]

[tool.hatch.build.hooks.vcs]
version-file = "src/midjargon/__version__.py"

[tool.hatch.build.targets.wheel]
packages = ["src/midjargon"]

[[tool.hatch.envs.all.matrix]]
python = ["3.10", "3.11", "3.12"]

[tool.hatch.envs.default]
dependencies = ["pytest", "pytest-cov", "mypy>=1.0.0", "ruff>=0.1.0"]

[tool.hatch.envs.default.scripts]
lint = ["ruff check src/midjargon tests", "ruff format src/midjargon tests"]
test = "pytest {args:tests}"
test-cov = "pytest --cov-report=term-missing --cov-config=pyproject.toml --cov=src/midjargon --cov=tests {args:tests}"
type-check = "mypy src/midjargon tests"

[tool.hatch.envs.lint]
dependencies = ["mypy>=1.0.0", "ruff>=0.1.0"]
detached = true

[tool.hatch.envs.lint.scripts]
all = ["style", "typing"]
fmt = ["ruff format {args:.}", "ruff check --fix {args:.}"]
style = ["ruff check {args:.}", "ruff format {args:.}"]
typing = "mypy --install-types --non-interactive {args:src/midjargon tests}"

[tool.hatch.envs.test]
dependencies = [
  "pytest>=7.0.0",
  "pytest-cov>=4.0.0",
  "pytest-xdist>=3.0.0",
  "midjargon[test]",
]

[tool.hatch.envs.test.scripts]
test = "pytest --cov=src/midjargon --cov-report=term-missing --cov-branch --no-cov-on-fail {args:tests}"
test-cov = "pytest --cov=src/midjargon --cov-report=term-missing --cov-branch --no-cov-on-fail {args:tests}"

[tool.hatch.version]
source = "vcs"

[tool.hatch.version.raw-options]
version_scheme = "post-release"

[tool.mypy]
check_untyped_defs = true
disallow_incomplete_defs = true
disallow_untyped_decorators = true
disallow_untyped_defs = true
no_implicit_optional = true
python_version = "3.10"
warn_no_return = true
warn_redundant_casts = true
warn_return_any = true
warn_unreachable = true
warn_unused_configs = true
warn_unused_ignores = true

[tool.pytest.ini_options]
addopts = "-v --durations=10 -p no:briefcase"
asyncio_mode = "auto"
console_output_style = "progress"
filterwarnings = ["ignore::DeprecationWarning", "ignore::UserWarning"]
log_cli = true
log_cli_level = "INFO"
markers = [
  "benchmark: marks tests as benchmarks (select with '-m benchmark')",
  "unit: mark a test as a unit test",
  "integration: mark a test as an integration test",
  "permutation: tests for permutation functionality",
  "parameter: tests for parameter parsing",
  "prompt: tests for prompt parsing",
]
norecursedirs = [
  ".*",
  "build",
  "dist",
  "venv",
  "__pycache__",
  "*.egg-info",
  "_private",
]

python_classes = ["Test*"]
python_files = ["test_*.py"]
python_functions = ["test_*"]
testpaths = ["tests"]

[tool.ruff]
line-length = 88
target-version = "py310"

[tool.ruff.lint]
extend-select = [
  "A",
  "ARG",
  "B",
  "C",
  "DTZ",
  "E",
  "EM",
  "F",
  "FBT",
  "I",
  "ICN",
  "ISC",
  "N",
  "PLC",
  "PLE",
  "PLR",
  "PLW",
  "Q",
  "RUF",
  "S",
  "T",
  "TID",
  "UP",
  "W",
  "YTT",
]
ignore = ["ARG001", "E501", "I001", "RUF001", "PLR2004", "EXE003", "ISC001"]

[tool.ruff.lint.per-file-ignores]
"tests/*" = ["S101"]
```

## File: src/midjargon/__init__.py (Size: 0.28 KB)

```
# this_file: src/midjargon/__init__.py
"""
midjargon

A Python library for parsing and manipulating Midjourney prompts.
"""

__version__ = "0.1.0"

__all__ = []

from midjargon.core.input import expand_midjargon_input
from midjargon.core.parser import parse_midjargon_prompt_to_dict
```

## File: src/midjargon/cli/__init__.py (Size: 0.04 KB)

```
# this_file: src/midjargon/cli/__init__.py
```

## File: src/midjargon/cli/main.py (Size: 1.39 KB)

```
#!/usr/bin/env -S uv run
# this_file: src/midjargon/cli/main.py

import fire
from rich.console import Console
from midjargon.core.input import expand_midjargon_input
from midjargon.core.parser import parse_midjargon_prompt_to_dict
from midjargon.engines.midjourney import parse_midjourney_dict

console = Console()

class MidjargonCLI:
    """
    Simple CLI for midjargon with commands: fal, mj, json, perm.
    """

    def fal(self, prompt: str):
        """Stub: Convert prompt to Fal.ai format."""
        # ...existing logic stub...
        console.print(f"[green]Fal.ai conversion: {prompt}[/green]")

    def mj(self, prompt: str):
        """Stub: Convert prompt to Midjourney format."""
        # Use the Midjourney parser stub for demonstration.
        parsed = parse_midjargon_prompt_to_dict(prompt)
        console.print(f"[blue]Midjourney conversion: {parsed}[/blue]")

    def json(self, prompt: str):
        """Parse prompt and output JSON representation."""
        parsed = parse_midjargon_prompt_to_dict(prompt)
        console.print(parsed)

    def perm(self, prompt: str):
        """Expand prompt permutations and list all variants."""
        variants = list(expand_midjargon_input(prompt))
        for idx, variant in enumerate(variants, 1):
            console.print(f"[magenta]Variant {idx}:[/magenta] {variant}")

def main():
    fire.Fire(MidjargonCLI)

if __name__ == '__main__':
    main()
```

## File: src/midjargon/core/__init__.py (Size: 0.04 KB)

```
# this_file: src/midjargon/core/__init__.py
```

## File: src/midjargon/core/input.py (Size: 0.40 KB)

```
#!/usr/bin/env python3
# this_file: src/midjargon/core/input.py

from midjargon.core.permutations import expand_permutations


def expand_midjargon_input(prompt: str) -> list[dict]:
    """Expand a midjourney prompt by processing permutations and returning a list of prompt dictionaries."""
    permutation_options = expand_permutations(prompt)
    return [{"prompt": opt} for opt in permutation_options]
```

## File: src/midjargon/core/parameters.py (Size: 2.24 KB)

```
#!/usr/bin/env python3
# this_file: src/midjargon/core/parameters.py

import shlex


def parse_parameters(param_str: str) -> dict:
    """Parse a string of parameters starting with '--' into a dictionary with appropriate alias mapping and flag handling."""
    tokens = shlex.split(param_str)
    result = {}
    aliases = {
        "ar": "aspect",
        "s": "stylize",
        "stylize": "stylize",
        "c": "chaos",
        "w": "weird",
        "iw": "image_weight",
        "q": "quality",
        "p": "personalization",
        "niji": "version",
        "tile": "tile",
        "turbo": "turbo",
        "relax": "relax",
        "no": "no",
        "style": "style",
        "seed": "seed",
        "cref": "character_reference",
        "v": "version",
    }
    # Define flag parameters which if present can be set to None (or a special value for version)
    flag_params = {"tile", "turbo", "relax", "personalization", "version"}
    i = 0
    while i < len(tokens):
        token = tokens[i]
        if token.startswith("--"):
            name = token[2:]
            if not name:
                raise ValueError("Empty parameter name")
            canonical = aliases.get(name, name)
            # Check if there is a next token and it does not start with '--'
            if i + 1 < len(tokens) and not tokens[i + 1].startswith("--"):
                values = []
                while i + 1 < len(tokens) and not tokens[i + 1].startswith("--"):
                    values.append(tokens[i + 1])
                    i += 1
                # For parameters that expect list always
                if canonical in {"personalization", "character_reference"}:
                    result[canonical] = values
                else:
                    # If only one value, store as string
                    result[canonical] = values[0] if len(values) == 1 else values
            else:
                # No following value
                if canonical in flag_params:
                    if canonical == "version":
                        result[canonical] = "niji"
                    else:
                        result[canonical] = None
                else:
                    raise ValueError(f"Missing value for parameter: {canonical}")
        i += 1
    return result
```

## File: src/midjargon/core/parser.py (Size: 1.10 KB)

```
#!/usr/bin/env python3
# this_file: src/midjargon/core/parser.py

import re

from midjargon.core.parameters import parse_parameters


def parse_midjargon_prompt_to_dict(prompt: str) -> dict:
    """Parse a Midjourney prompt and return its dictionary representation.

    Extracts image URLs, splits the main text from parameters identified by ' --',
    and returns a dict with keys: text, parameters, images.
    """
    # Extract image URLs
    images = re.findall(r"https?://\S+", prompt)
    # Remove image URLs from prompt
    prompt_without_images = re.sub(r"https?://\S+", "", prompt).strip()
    # Check if there is a parameter part identified by ' --'
    if " --" in prompt_without_images:
        text_part, param_part = prompt_without_images.split(" --", 1)
        text_part = text_part.strip()
        param_str = "--" + param_part.strip()
        try:
            parameters = parse_parameters(param_str)
        except Exception as e:
            parameters = {}
    else:
        text_part = prompt_without_images
        parameters = {}
    return {"text": text_part, "parameters": parameters, "images": images}
```

## File: src/midjargon/core/permutations.py (Size: 0.97 KB)

```
#!/usr/bin/env python3
# this_file: src/midjargon/core/permutations.py


def expand_permutations(s: str) -> list[str]:
    """Recursively expand the permutations in the prompt string using {a, b, ...} syntax."""
    start = s.find("{")
    if start == -1:
        return [s]
    count = 0
    end = -1
    for i in range(start, len(s)):
        if s[i] == "{":
            count += 1
        elif s[i] == "}":
            count -= 1
            if count == 0:
                end = i
                break
    if end == -1:
        # no matching closing brace, return the string as is
        return [s]
    options_str = s[start + 1 : end]
    # Split options on comma (simple split; does not handle escaped commas)
    options = [opt.strip() for opt in options_str.split(",")]
    results = []
    for option in options:
        # Replace the entire '{...}' with the option
        new_s = s[:start] + option + s[end + 1 :]
        results.extend(expand_permutations(new_s))
    return results
```

## File: src/midjargon/engines/__init__.py (Size: 0.05 KB)

```
# this_file: src/midjargon/engines/__init__.py
```

## File: src/midjargon/engines/midjourney/__init__.py (Size: 0.40 KB)

```
#!/usr/bin/env python3
# this_file: src/midjargon/engines/midjourney/__init__.py

from .midjourney import MidjourneyParser


class MidjourneyPrompt:
    """Stub class for Midjourney prompt."""

    def __init__(self, prompt: str = ""):
        self.prompt = prompt


def parse_midjourney_dict(prompt: str) -> dict:
    """Stub function for converting a prompt to a dictionary."""
    return {"prompt": prompt}
```

## File: src/midjargon/engines/midjourney/midjourney.py (Size: 0.54 KB)

```
#!/usr/bin/env python3
# this_file: src/midjargon/engines/midjourney/midjourney.py


class MidjourneyParser:
    """
    Stub class for Midjourney prompt parsing.
    """
    def __init__(self, prompt_dict: dict):
        self.prompt_dict = prompt_dict

    def parse(self) -> dict:
        # ...stub implementation...
        return self.prompt_dict

def parse_midjourney_dict(prompt_dict: dict) -> dict:
    """
    Stub function to convert parsed prompt into Midjourney-specific dict.
    """
    # ...stub implementation...
    return prompt_dict
```

## File: test-cases/prompts-fal.txt (Size: 32.46 KB)

```
======
"Do not enter" sign in Elvish script, overgrown with vines --v 6 --stylize 250 --seed {12345, 67890}
[
  {
    "images": [],
    "version": 6,
    "stylize": 250,
    "seed": 12345,
    "prompt": "\"Do not enter\" sign in Elvish script, overgrown with vines"
  },
  {
    "images": [],
    "version": 6,
    "stylize": 250,
    "seed": 67890,
    "prompt": "\"Do not enter\" sign in Elvish script, overgrown with vines"
  }
]======
"Lost in translation" neon sign in a Tokyo alleyway --v 6.1 --stylize 750 --weird 250
{
  "images": [],
  "version": 6.1,
  "stylize": 750,
  "weird": 250,
  "prompt": "\"Lost in translation\" neon sign in a Tokyo alleyway"
}======
"Made in Midjourney" stamp on a vintage postage stamp --v 6.1 --stylize 1000 --zoom 1.5 --ar 1:2
{
  "images": [],
  "version": 6.1,
  "stylize": 1000,
  "zoom": 1.5,
  "aspect_ratio": "1:2",
  "prompt": "\"Made in Midjourney\" stamp on a vintage postage stamp"
}======
A black and white oak tree icon --style {raw, default} --stylize {0, 1000} --weird {0, 3000}
[
  {
    "images": [],
    "style": "raw",
    "stylize": 0,
    "weird": 0,
    "prompt": "A black and white oak tree icon"
  },
  {
    "images": [],
    "style": "raw",
    "stylize": 0,
    "weird": 3000,
    "prompt": "A black and white oak tree icon"
  },
  {
    "images": [],
    "style": "raw",
    "stylize": 1000,
    "weird": 0,
    "prompt": "A black and white oak tree icon"
  },
  {
    "images": [],
    "style": "raw",
    "stylize": 1000,
    "weird": 3000,
    "prompt": "A black and white oak tree icon"
  },
  {
    "images": [],
    "style": "default",
    "stylize": 0,
    "weird": 0,
    "prompt": "A black and white oak tree icon"
  },
  {
    "images": [],
    "style": "default",
    "stylize": 0,
    "weird": 3000,
    "prompt": "A black and white oak tree icon"
  },
  {
    "images": [],
    "style": "default",
    "stylize": 1000,
    "weird": 0,
    "prompt": "A black and white oak tree icon"
  },
  {
    "images": [],
    "style": "default",
    "stylize": 1000,
    "weird": 3000,
    "prompt": "A black and white oak tree icon"
  }
]======
A botanical sketch of fern fronds --video --version {5.2, 6} --ar {1:1, 16:9} --chaos 30
[
  {
    "images": [],
    "video": null,
    "version": 5.2,
    "chaos": 30,
    "aspect_ratio": "1:1",
    "prompt": "A botanical sketch of fern fronds"
  },
  {
    "images": [],
    "video": null,
    "version": 5.2,
    "chaos": 30,
    "aspect_ratio": "16:9",
    "prompt": "A botanical sketch of fern fronds"
  },
  {
    "images": [],
    "video": null,
    "version": 6,
    "chaos": 30,
    "aspect_ratio": "1:1",
    "prompt": "A botanical sketch of fern fronds"
  },
  {
    "images": [],
    "video": null,
    "version": 6,
    "chaos": 30,
    "aspect_ratio": "16:9",
    "prompt": "A botanical sketch of fern fronds"
  }
]======
A cartoon drawing of a manual with the words "read the docs" in big text on the pages --v 6 --stylize 100 --ar 2:3
{
  "images": [],
  "version": 6,
  "stylize": 100,
  "aspect_ratio": "2:3",
  "prompt": "A cartoon drawing of a manual with the words \"read the docs\" in big text on the pages"
}======
A cat in a {Tundra, Jungle, City} environment --ar 3:2 --stop 80 --weird 2000
[
  {
    "images": [],
    "stop": 80,
    "weird": 2000,
    "aspect_ratio": "3:2",
    "prompt": "A cat in a Tundra environment"
  },
  {
    "images": [],
    "stop": 80,
    "weird": 2000,
    "aspect_ratio": "3:2",
    "prompt": "A cat in a Jungle environment"
  },
  {
    "images": [],
    "stop": 80,
    "weird": 2000,
    "aspect_ratio": "3:2",
    "prompt": "A cat in a City environment"
  }
]======
A child's crayon drawing of a cat --version {5.2, 6} --style raw --stylize {50, 750} --quality {.25, 1}
[
  {
    "images": [],
    "version": 5.2,
    "style": "raw",
    "stylize": 50,
    "quality": 0.25,
    "prompt": "A child's crayon drawing of a cat"
  },
  {
    "images": [],
    "version": 5.2,
    "style": "raw",
    "stylize": 50,
    "quality": 1.0,
    "prompt": "A child's crayon drawing of a cat"
  },
  {
    "images": [],
    "version": 5.2,
    "style": "raw",
    "stylize": 750,
    "quality": 0.25,
    "prompt": "A child's crayon drawing of a cat"
  },
  {
    "images": [],
    "version": 5.2,
    "style": "raw",
    "stylize": 750,
    "quality": 1.0,
    "prompt": "A child's crayon drawing of a cat"
  },
  {
    "images": [],
    "version": 6,
    "style": "raw",
    "stylize": 50,
    "quality": 0.25,
    "prompt": "A child's crayon drawing of a cat"
  },
  {
    "images": [],
    "version": 6,
    "style": "raw",
    "stylize": 50,
    "quality": 1.0,
    "prompt": "A child's crayon drawing of a cat"
  },
  {
    "images": [],
    "version": 6,
    "style": "raw",
    "stylize": 750,
    "quality": 0.25,
    "prompt": "A child's crayon drawing of a cat"
  },
  {
    "images": [],
    "version": 6,
    "style": "raw",
    "stylize": 750,
    "quality": 1.0,
    "prompt": "A child's crayon drawing of a cat"
  }
]======
A cyberpunk cat with a neon sign that says "Midjourney" --v 6 --stylize 500 --ar 1:1
{
  "images": [],
  "version": 6,
  "stylize": 500,
  "aspect_ratio": "1:1",
  "prompt": "A cyberpunk cat with a neon sign that says \"Midjourney\""
}======
A pastel watercolor landscape with "/imagine" written in the clouds --v 6.1 --stylize 250 --ar 16:9
{
  "images": [],
  "version": 6.1,
  "stylize": 250,
  "aspect_ratio": "16:9",
  "prompt": "A pastel watercolor landscape with \"/imagine\" written in the clouds"
}======
A pattern of {pink and blue striped river stones, colorful watercolor fall leaves} --tile --chaos {25, 75}
[
  {
    "images": [],
    "tile": null,
    "chaos": 25,
    "prompt": "A pattern of pink and blue striped river stones"
  },
  {
    "images": [],
    "tile": null,
    "chaos": 75,
    "prompt": "A pattern of pink and blue striped river stones"
  },
  {
    "images": [],
    "tile": null,
    "chaos": 25,
    "prompt": "A pattern of colorful watercolor fall leaves"
  },
  {
    "images": [],
    "tile": null,
    "chaos": 75,
    "prompt": "A pattern of colorful watercolor fall leaves"
  }
]======
A pencil sketch of a dragon made of constellations --ar 2:3 --style random-64 --no color, shading
{
  "images": [],
  "style": "random-64",
  "no": "color, shading",
  "aspect_ratio": "2:3",
  "prompt": "A pencil sketch of a dragon made of constellations"
}======
A portrait of a melancholic robot butler --cref <image URL of classic butler> --cw {0, 50, 100} --sref <image URL of sad painting> --sw {100, 800}
[
  {
    "images": [],
    "character_reference": [
      "<image URL of classic butler>"
    ],
    "character_weight": 0,
    "style_reference": [
      "<image URL of sad painting>"
    ],
    "style_weight": 100,
    "prompt": "A portrait of a melancholic robot butler"
  },
  {
    "images": [],
    "character_reference": [
      "<image URL of classic butler>"
    ],
    "character_weight": 0,
    "style_reference": [
      "<image URL of sad painting>"
    ],
    "style_weight": 800,
    "prompt": "A portrait of a melancholic robot butler"
  },
  {
    "images": [],
    "character_reference": [
      "<image URL of classic butler>"
    ],
    "character_weight": 50,
    "style_reference": [
      "<image URL of sad painting>"
    ],
    "style_weight": 100,
    "prompt": "A portrait of a melancholic robot butler"
  },
  {
    "images": [],
    "character_reference": [
      "<image URL of classic butler>"
    ],
    "character_weight": 50,
    "style_reference": [
      "<image URL of sad painting>"
    ],
    "style_weight": 800,
    "prompt": "A portrait of a melancholic robot butler"
  },
  {
    "images": [],
    "character_reference": [
      "<image URL of classic butler>"
    ],
    "character_weight": 100,
    "style_reference": [
      "<image URL of sad painting>"
    ],
    "style_weight": 100,
    "prompt": "A portrait of a melancholic robot butler"
  },
  {
    "images": [],
    "character_reference": [
      "<image URL of classic butler>"
    ],
    "character_weight": 100,
    "style_reference": [
      "<image URL of sad painting>"
    ],
    "style_weight": 800,
    "prompt": "A portrait of a melancholic robot butler"
  }
]======
A surreal sculpture made of clockwork oranges and melting clocks --weird {500, 1500} --chaos 80 --stop {30, 70}
[
  {
    "images": [],
    "weird": 500,
    "chaos": 80,
    "stop": 30,
    "prompt": "A surreal sculpture made of clockwork oranges and melting clocks"
  },
  {
    "images": [],
    "weird": 500,
    "chaos": 80,
    "stop": 70,
    "prompt": "A surreal sculpture made of clockwork oranges and melting clocks"
  },
  {
    "images": [],
    "weird": 1500,
    "chaos": 80,
    "stop": 30,
    "prompt": "A surreal sculpture made of clockwork oranges and melting clocks"
  },
  {
    "images": [],
    "weird": 1500,
    "chaos": 80,
    "stop": 70,
    "prompt": "A surreal sculpture made of clockwork oranges and melting clocks"
  }
]======
A vibrant California poppies image --aspect {5:4, 7:4} --chaos {10, 50} --quality {.5, 1} --seed {random, 4294967295}
[
  {
    "images": [],
    "chaos": 10,
    "quality": 0.5,
    "seed": "random",
    "aspect_ratio": "5:4",
    "prompt": "A vibrant California poppies image"
  },
  {
    "images": [],
    "chaos": 10,
    "quality": 0.5,
    "seed": 4294967295,
    "aspect_ratio": "5:4",
    "prompt": "A vibrant California poppies image"
  },
  {
    "images": [],
    "chaos": 10,
    "quality": 1.0,
    "seed": "random",
    "aspect_ratio": "5:4",
    "prompt": "A vibrant California poppies image"
  },
  {
    "images": [],
    "chaos": 10,
    "quality": 1.0,
    "seed": 4294967295,
    "aspect_ratio": "5:4",
    "prompt": "A vibrant California poppies image"
  },
  {
    "images": [],
    "chaos": 50,
    "quality": 0.5,
    "seed": "random",
    "aspect_ratio": "5:4",
    "prompt": "A vibrant California poppies image"
  },
  {
    "images": [],
    "chaos": 50,
    "quality": 0.5,
    "seed": 4294967295,
    "aspect_ratio": "5:4",
    "prompt": "A vibrant California poppies image"
  },
  {
    "images": [],
    "chaos": 50,
    "quality": 1.0,
    "seed": "random",
    "aspect_ratio": "5:4",
    "prompt": "A vibrant California poppies image"
  },
  {
    "images": [],
    "chaos": 50,
    "quality": 1.0,
    "seed": 4294967295,
    "aspect_ratio": "5:4",
    "prompt": "A vibrant California poppies image"
  },
  {
    "images": [],
    "chaos": 10,
    "quality": 0.5,
    "seed": "random",
    "aspect_ratio": "7:4",
    "prompt": "A vibrant California poppies image"
  },
  {
    "images": [],
    "chaos": 10,
    "quality": 0.5,
    "seed": 4294967295,
    "aspect_ratio": "7:4",
    "prompt": "A vibrant California poppies image"
  },
  {
    "images": [],
    "chaos": 10,
    "quality": 1.0,
    "seed": "random",
    "aspect_ratio": "7:4",
    "prompt": "A vibrant California poppies image"
  },
  {
    "images": [],
    "chaos": 10,
    "quality": 1.0,
    "seed": 4294967295,
    "aspect_ratio": "7:4",
    "prompt": "A vibrant California poppies image"
  },
  {
    "images": [],
    "chaos": 50,
    "quality": 0.5,
    "seed": "random",
    "aspect_ratio": "7:4",
    "prompt": "A vibrant California poppies image"
  },
  {
    "images": [],
    "chaos": 50,
    "quality": 0.5,
    "seed": 4294967295,
    "aspect_ratio": "7:4",
    "prompt": "A vibrant California poppies image"
  },
  {
    "images": [],
    "chaos": 50,
    "quality": 1.0,
    "seed": "random",
    "aspect_ratio": "7:4",
    "prompt": "A vibrant California poppies image"
  },
  {
    "images": [],
    "chaos": 50,
    "quality": 1.0,
    "seed": 4294967295,
    "aspect_ratio": "7:4",
    "prompt": "A vibrant California poppies image"
  }
]======
A {continuous line, loose gestural} charcoal drawing of a value study of a cyborg geisha --stop 50 --q 0.5
[
  {
    "images": [],
    "stop": 50,
    "quality": 0.5,
    "prompt": "A continuous line charcoal drawing of a value study of a cyborg geisha"
  },
  {
    "images": [],
    "stop": 50,
    "quality": 0.5,
    "prompt": "A loose gestural charcoal drawing of a value study of a cyborg geisha"
  }
]======
A {dreary, vibrant} cyberpunk cityscape --ar {16:9, 1:1} --style {raw, random} --chaos {0, 100}
[
  {
    "images": [],
    "style": "raw",
    "chaos": 0,
    "aspect_ratio": "16:9",
    "prompt": "A dreary cyberpunk cityscape"
  },
  {
    "images": [],
    "style": "raw",
    "chaos": 100,
    "aspect_ratio": "16:9",
    "prompt": "A dreary cyberpunk cityscape"
  },
  {
    "images": [],
    "style": "random",
    "chaos": 0,
    "aspect_ratio": "16:9",
    "prompt": "A dreary cyberpunk cityscape"
  },
  {
    "images": [],
    "style": "random",
    "chaos": 100,
    "aspect_ratio": "16:9",
    "prompt": "A dreary cyberpunk cityscape"
  },
  {
    "images": [],
    "style": "raw",
    "chaos": 0,
    "aspect_ratio": "1:1",
    "prompt": "A dreary cyberpunk cityscape"
  },
  {
    "images": [],
    "style": "raw",
    "chaos": 100,
    "aspect_ratio": "1:1",
    "prompt": "A dreary cyberpunk cityscape"
  },
  {
    "images": [],
    "style": "random",
    "chaos": 0,
    "aspect_ratio": "1:1",
    "prompt": "A dreary cyberpunk cityscape"
  },
  {
    "images": [],
    "style": "random",
    "chaos": 100,
    "aspect_ratio": "1:1",
    "prompt": "A dreary cyberpunk cityscape"
  },
  {
    "images": [],
    "style": "raw",
    "chaos": 0,
    "aspect_ratio": "16:9",
    "prompt": "A vibrant cyberpunk cityscape"
  },
  {
    "images": [],
    "style": "raw",
    "chaos": 100,
    "aspect_ratio": "16:9",
    "prompt": "A vibrant cyberpunk cityscape"
  },
  {
    "images": [],
    "style": "random",
    "chaos": 0,
    "aspect_ratio": "16:9",
    "prompt": "A vibrant cyberpunk cityscape"
  },
  {
    "images": [],
    "style": "random",
    "chaos": 100,
    "aspect_ratio": "16:9",
    "prompt": "A vibrant cyberpunk cityscape"
  },
  {
    "images": [],
    "style": "raw",
    "chaos": 0,
    "aspect_ratio": "1:1",
    "prompt": "A vibrant cyberpunk cityscape"
  },
  {
    "images": [],
    "style": "raw",
    "chaos": 100,
    "aspect_ratio": "1:1",
    "prompt": "A vibrant cyberpunk cityscape"
  },
  {
    "images": [],
    "style": "random",
    "chaos": 0,
    "aspect_ratio": "1:1",
    "prompt": "A vibrant cyberpunk cityscape"
  },
  {
    "images": [],
    "style": "random",
    "chaos": 100,
    "aspect_ratio": "1:1",
    "prompt": "A vibrant cyberpunk cityscape"
  }
]======
A {Millennial Pink, Acid Green, Ebony} colored cat --s 250 --style random-16 --no monochrome
[
  {
    "images": [],
    "stylize": 250,
    "style": "random-16",
    "no": "monochrome",
    "prompt": "A Millennial Pink colored cat"
  },
  {
    "images": [],
    "stylize": 250,
    "style": "random-16",
    "no": "monochrome",
    "prompt": "A Acid Green colored cat"
  },
  {
    "images": [],
    "stylize": 250,
    "style": "random-16",
    "no": "monochrome",
    "prompt": "A Ebony colored cat"
  }
]======
A {pastel, blacklight} painting of a {determined, sleepy} sloth riding a unicorn through a {crystal forest, salt flat} --chaos 25
[
  {
    "images": [],
    "chaos": 25,
    "prompt": "A pastel painting of a determined sloth riding a unicorn through a crystal forest"
  },
  {
    "images": [],
    "chaos": 25,
    "prompt": "A pastel painting of a determined sloth riding a unicorn through a salt flat"
  },
  {
    "images": [],
    "chaos": 25,
    "prompt": "A pastel painting of a sleepy sloth riding a unicorn through a crystal forest"
  },
  {
    "images": [],
    "chaos": 25,
    "prompt": "A pastel painting of a sleepy sloth riding a unicorn through a salt flat"
  },
  {
    "images": [],
    "chaos": 25,
    "prompt": "A blacklight painting of a determined sloth riding a unicorn through a crystal forest"
  },
  {
    "images": [],
    "chaos": 25,
    "prompt": "A blacklight painting of a determined sloth riding a unicorn through a salt flat"
  },
  {
    "images": [],
    "chaos": 25,
    "prompt": "A blacklight painting of a sleepy sloth riding a unicorn through a crystal forest"
  },
  {
    "images": [],
    "chaos": 25,
    "prompt": "A blacklight painting of a sleepy sloth riding a unicorn through a salt flat"
  }
]======
A {pixel art, acrylic pour} style cat --style random-128 --weird 1000 --no fur, whiskers
[
  {
    "images": [],
    "style": "random-128",
    "weird": 1000,
    "no": "fur, whiskers",
    "prompt": "A pixel art style cat"
  },
  {
    "images": [],
    "style": "random-128",
    "weird": 1000,
    "no": "fur, whiskers",
    "prompt": "A acrylic pour style cat"
  }
]======
An impressionistic watercolor of a cat playing chess with a dog --ar 4:3 --s 50 --no board, pieces --style raw
{
  "images": [],
  "stylize": 50,
  "no": "board, pieces",
  "style": "raw",
  "aspect_ratio": "4:3",
  "prompt": "An impressionistic watercolor of a cat playing chess with a dog"
}======
cheese:: cake:: painting multi-prompt --negative weight fruit::-.5 --version 4 --chaos 60
{
  "images": [],
  "negative": "weight fruit::-.5",
  "version": 4,
  "chaos": 60,
  "prompt": "cheese:: cake:: painting multi-prompt"
}======
Clockwork chicken --weird {750, 1750, 2750} --stylize {200, 600, 900} --ar {2:3, 3:2}
[
  {
    "images": [],
    "weird": 750,
    "stylize": 200,
    "aspect_ratio": "2:3",
    "prompt": "Clockwork chicken"
  },
  {
    "images": [],
    "weird": 750,
    "stylize": 200,
    "aspect_ratio": "3:2",
    "prompt": "Clockwork chicken"
  },
  {
    "images": [],
    "weird": 750,
    "stylize": 600,
    "aspect_ratio": "2:3",
    "prompt": "Clockwork chicken"
  },
  {
    "images": [],
    "weird": 750,
    "stylize": 600,
    "aspect_ratio": "3:2",
    "prompt": "Clockwork chicken"
  },
  {
    "images": [],
    "weird": 750,
    "stylize": 900,
    "aspect_ratio": "2:3",
    "prompt": "Clockwork chicken"
  },
  {
    "images": [],
    "weird": 750,
    "stylize": 900,
    "aspect_ratio": "3:2",
    "prompt": "Clockwork chicken"
  },
  {
    "images": [],
    "weird": 1750,
    "stylize": 200,
    "aspect_ratio": "2:3",
    "prompt": "Clockwork chicken"
  },
  {
    "images": [],
    "weird": 1750,
    "stylize": 200,
    "aspect_ratio": "3:2",
    "prompt": "Clockwork chicken"
  },
  {
    "images": [],
    "weird": 1750,
    "stylize": 600,
    "aspect_ratio": "2:3",
    "prompt": "Clockwork chicken"
  },
  {
    "images": [],
    "weird": 1750,
    "stylize": 600,
    "aspect_ratio": "3:2",
    "prompt": "Clockwork chicken"
  },
  {
    "images": [],
    "weird": 1750,
    "stylize": 900,
    "aspect_ratio": "2:3",
    "prompt": "Clockwork chicken"
  },
  {
    "images": [],
    "weird": 1750,
    "stylize": 900,
    "aspect_ratio": "3:2",
    "prompt": "Clockwork chicken"
  },
  {
    "images": [],
    "weird": 2750,
    "stylize": 200,
    "aspect_ratio": "2:3",
    "prompt": "Clockwork chicken"
  },
  {
    "images": [],
    "weird": 2750,
    "stylize": 200,
    "aspect_ratio": "3:2",
    "prompt": "Clockwork chicken"
  },
  {
    "images": [],
    "weird": 2750,
    "stylize": 600,
    "aspect_ratio": "2:3",
    "prompt": "Clockwork chicken"
  },
  {
    "images": [],
    "weird": 2750,
    "stylize": 600,
    "aspect_ratio": "3:2",
    "prompt": "Clockwork chicken"
  },
  {
    "images": [],
    "weird": 2750,
    "stylize": 900,
    "aspect_ratio": "2:3",
    "prompt": "Clockwork chicken"
  },
  {
    "images": [],
    "weird": 2750,
    "stylize": 900,
    "aspect_ratio": "3:2",
    "prompt": "Clockwork chicken"
  }
]======
Cyanotype cat --weird {250, 1000, 2000} --stylize {100, 500, 1000} --chaos {10, 50, 90}
[
  {
    "images": [],
    "weird": 250,
    "stylize": 100,
    "chaos": 10,
    "prompt": "Cyanotype cat"
  },
  {
    "images": [],
    "weird": 250,
    "stylize": 100,
    "chaos": 50,
    "prompt": "Cyanotype cat"
  },
  {
    "images": [],
    "weird": 250,
    "stylize": 100,
    "chaos": 90,
    "prompt": "Cyanotype cat"
  },
  {
    "images": [],
    "weird": 250,
    "stylize": 500,
    "chaos": 10,
    "prompt": "Cyanotype cat"
  },
  {
    "images": [],
    "weird": 250,
    "stylize": 500,
    "chaos": 50,
    "prompt": "Cyanotype cat"
  },
  {
    "images": [],
    "weird": 250,
    "stylize": 500,
    "chaos": 90,
    "prompt": "Cyanotype cat"
  },
  {
    "images": [],
    "weird": 250,
    "stylize": 1000,
    "chaos": 10,
    "prompt": "Cyanotype cat"
  },
  {
    "images": [],
    "weird": 250,
    "stylize": 1000,
    "chaos": 50,
    "prompt": "Cyanotype cat"
  },
  {
    "images": [],
    "weird": 250,
    "stylize": 1000,
    "chaos": 90,
    "prompt": "Cyanotype cat"
  },
  {
    "images": [],
    "weird": 1000,
    "stylize": 100,
    "chaos": 10,
    "prompt": "Cyanotype cat"
  },
  {
    "images": [],
    "weird": 1000,
    "stylize": 100,
    "chaos": 50,
    "prompt": "Cyanotype cat"
  },
  {
    "images": [],
    "weird": 1000,
    "stylize": 100,
    "chaos": 90,
    "prompt": "Cyanotype cat"
  },
  {
    "images": [],
    "weird": 1000,
    "stylize": 500,
    "chaos": 10,
    "prompt": "Cyanotype cat"
  },
  {
    "images": [],
    "weird": 1000,
    "stylize": 500,
    "chaos": 50,
    "prompt": "Cyanotype cat"
  },
  {
    "images": [],
    "weird": 1000,
    "stylize": 500,
    "chaos": 90,
    "prompt": "Cyanotype cat"
  },
  {
    "images": [],
    "weird": 1000,
    "stylize": 1000,
    "chaos": 10,
    "prompt": "Cyanotype cat"
  },
  {
    "images": [],
    "weird": 1000,
    "stylize": 1000,
    "chaos": 50,
    "prompt": "Cyanotype cat"
  },
  {
    "images": [],
    "weird": 1000,
    "stylize": 1000,
    "chaos": 90,
    "prompt": "Cyanotype cat"
  },
  {
    "images": [],
    "weird": 2000,
    "stylize": 100,
    "chaos": 10,
    "prompt": "Cyanotype cat"
  },
  {
    "images": [],
    "weird": 2000,
    "stylize": 100,
    "chaos": 50,
    "prompt": "Cyanotype cat"
  },
  {
    "images": [],
    "weird": 2000,
    "stylize": 100,
    "chaos": 90,
    "prompt": "Cyanotype cat"
  },
  {
    "images": [],
    "weird": 2000,
    "stylize": 500,
    "chaos": 10,
    "prompt": "Cyanotype cat"
  },
  {
    "images": [],
    "weird": 2000,
    "stylize": 500,
    "chaos": 50,
    "prompt": "Cyanotype cat"
  },
  {
    "images": [],
    "weird": 2000,
    "stylize": 500,
    "chaos": 90,
    "prompt": "Cyanotype cat"
  },
  {
    "images": [],
    "weird": 2000,
    "stylize": 1000,
    "chaos": 10,
    "prompt": "Cyanotype cat"
  },
  {
    "images": [],
    "weird": 2000,
    "stylize": 1000,
    "chaos": 50,
    "prompt": "Cyanotype cat"
  },
  {
    "images": [],
    "weird": 2000,
    "stylize": 1000,
    "chaos": 90,
    "prompt": "Cyanotype cat"
  }
]======
Ice cream icon --niji {5, 6} --style {cute, expressive} --weird {250, 1000} --ar {1:1, 2:3}
[
  {
    "images": [],
    "version": "niji 5",
    "style": "cute",
    "weird": 250,
    "aspect_ratio": "1:1",
    "prompt": "Ice cream icon"
  },
  {
    "images": [],
    "version": "niji 5",
    "style": "cute",
    "weird": 250,
    "aspect_ratio": "2:3",
    "prompt": "Ice cream icon"
  },
  {
    "images": [],
    "version": "niji 5",
    "style": "cute",
    "weird": 1000,
    "aspect_ratio": "1:1",
    "prompt": "Ice cream icon"
  },
  {
    "images": [],
    "version": "niji 5",
    "style": "cute",
    "weird": 1000,
    "aspect_ratio": "2:3",
    "prompt": "Ice cream icon"
  },
  {
    "images": [],
    "version": "niji 5",
    "style": "expressive",
    "weird": 250,
    "aspect_ratio": "1:1",
    "prompt": "Ice cream icon"
  },
  {
    "images": [],
    "version": "niji 5",
    "style": "expressive",
    "weird": 250,
    "aspect_ratio": "2:3",
    "prompt": "Ice cream icon"
  },
  {
    "images": [],
    "version": "niji 5",
    "style": "expressive",
    "weird": 1000,
    "aspect_ratio": "1:1",
    "prompt": "Ice cream icon"
  },
  {
    "images": [],
    "version": "niji 5",
    "style": "expressive",
    "weird": 1000,
    "aspect_ratio": "2:3",
    "prompt": "Ice cream icon"
  },
  {
    "images": [],
    "version": "niji 6",
    "style": "cute",
    "weird": 250,
    "aspect_ratio": "1:1",
    "prompt": "Ice cream icon"
  },
  {
    "images": [],
    "version": "niji 6",
    "style": "cute",
    "weird": 250,
    "aspect_ratio": "2:3",
    "prompt": "Ice cream icon"
  },
  {
    "images": [],
    "version": "niji 6",
    "style": "cute",
    "weird": 1000,
    "aspect_ratio": "1:1",
    "prompt": "Ice cream icon"
  },
  {
    "images": [],
    "version": "niji 6",
    "style": "cute",
    "weird": 1000,
    "aspect_ratio": "2:3",
    "prompt": "Ice cream icon"
  },
  {
    "images": [],
    "version": "niji 6",
    "style": "expressive",
    "weird": 250,
    "aspect_ratio": "1:1",
    "prompt": "Ice cream icon"
  },
  {
    "images": [],
    "version": "niji 6",
    "style": "expressive",
    "weird": 250,
    "aspect_ratio": "2:3",
    "prompt": "Ice cream icon"
  },
  {
    "images": [],
    "version": "niji 6",
    "style": "expressive",
    "weird": 1000,
    "aspect_ratio": "1:1",
    "prompt": "Ice cream icon"
  },
  {
    "images": [],
    "version": "niji 6",
    "style": "expressive",
    "weird": 1000,
    "aspect_ratio": "2:3",
    "prompt": "Ice cream icon"
  }
]======
image of a robot holding flowers --remix --prompt "A cyborg holding cybernetic orchids" --zoom 2x
{
  "images": [],
  "remix": null,
  "prompt": "image of a robot holding flowers",
  "zoom": "2x"
}======
Imagine a {1400s, 1990s} cat --sref <image URL of medieval tapestry> --sv {1, 4} --ar 5:4
[
  {
    "images": [],
    "style_reference": [
      "<image URL of medieval tapestry>"
    ],
    "style_version": 1,
    "aspect_ratio": "5:4",
    "prompt": "Imagine a 1400s cat"
  },
  {
    "images": [],
    "style_reference": [
      "<image URL of medieval tapestry>"
    ],
    "style_version": 4,
    "aspect_ratio": "5:4",
    "prompt": "Imagine a 1400s cat"
  },
  {
    "images": [],
    "style_reference": [
      "<image URL of medieval tapestry>"
    ],
    "style_version": 1,
    "aspect_ratio": "5:4",
    "prompt": "Imagine a 1990s cat"
  },
  {
    "images": [],
    "style_reference": [
      "<image URL of medieval tapestry>"
    ],
    "style_version": 4,
    "aspect_ratio": "5:4",
    "prompt": "Imagine a 1990s cat"
  }
]======
Lithograph potato --weird {500, 1500, 2500} --chaos {20, 60, 80} --quality {.5, 1}
[
  {
    "images": [],
    "weird": 500,
    "chaos": 20,
    "quality": 0.5,
    "prompt": "Lithograph potato"
  },
  {
    "images": [],
    "weird": 500,
    "chaos": 20,
    "quality": 1.0,
    "prompt": "Lithograph potato"
  },
  {
    "images": [],
    "weird": 500,
    "chaos": 60,
    "quality": 0.5,
    "prompt": "Lithograph potato"
  },
  {
    "images": [],
    "weird": 500,
    "chaos": 60,
    "quality": 1.0,
    "prompt": "Lithograph potato"
  },
  {
    "images": [],
    "weird": 500,
    "chaos": 80,
    "quality": 0.5,
    "prompt": "Lithograph potato"
  },
  {
    "images": [],
    "weird": 500,
    "chaos": 80,
    "quality": 1.0,
    "prompt": "Lithograph potato"
  },
  {
    "images": [],
    "weird": 1500,
    "chaos": 20,
    "quality": 0.5,
    "prompt": "Lithograph potato"
  },
  {
    "images": [],
    "weird": 1500,
    "chaos": 20,
    "quality": 1.0,
    "prompt": "Lithograph potato"
  },
  {
    "images": [],
    "weird": 1500,
    "chaos": 60,
    "quality": 0.5,
    "prompt": "Lithograph potato"
  },
  {
    "images": [],
    "weird": 1500,
    "chaos": 60,
    "quality": 1.0,
    "prompt": "Lithograph potato"
  },
  {
    "images": [],
    "weird": 1500,
    "chaos": 80,
    "quality": 0.5,
    "prompt": "Lithograph potato"
  },
  {
    "images": [],
    "weird": 1500,
    "chaos": 80,
    "quality": 1.0,
    "prompt": "Lithograph potato"
  },
  {
    "images": [],
    "weird": 2500,
    "chaos": 20,
    "quality": 0.5,
    "prompt": "Lithograph potato"
  },
  {
    "images": [],
    "weird": 2500,
    "chaos": 20,
    "quality": 1.0,
    "prompt": "Lithograph potato"
  },
  {
    "images": [],
    "weird": 2500,
    "chaos": 60,
    "quality": 0.5,
    "prompt": "Lithograph potato"
  },
  {
    "images": [],
    "weird": 2500,
    "chaos": 60,
    "quality": 1.0,
    "prompt": "Lithograph potato"
  },
  {
    "images": [],
    "weird": 2500,
    "chaos": 80,
    "quality": 0.5,
    "prompt": "Lithograph potato"
  },
  {
    "images": [],
    "weird": 2500,
    "chaos": 80,
    "quality": 1.0,
    "prompt": "Lithograph potato"
  }
]======
space:: ship multi-prompt --stylize {250, 750} --weird 500
[
  {
    "images": [],
    "stylize": 250,
    "weird": 500,
    "prompt": "space:: ship multi-prompt"
  },
  {
    "images": [],
    "stylize": 750,
    "weird": 500,
    "prompt": "space:: ship multi-prompt"
  }
]======
stream running through a redwood forest --vary region --selection "sky area" --prompt "aurora borealis" --pan up
{
  "images": [],
  "vary": "region",
  "selection": "sky area",
  "prompt": "stream running through a redwood forest",
  "pan": "up"
}======
Vibrant California poppies --version {5.2, 6, 6.1} --stylize {100, 500} --quality {1, 2}
[
  {
    "images": [],
    "version": 5.2,
    "stylize": 100,
    "quality": 1.0,
    "prompt": "Vibrant California poppies"
  },
  {
    "images": [],
    "version": 5.2,
    "stylize": 100,
    "quality": 2.0,
    "prompt": "Vibrant California poppies"
  },
  {
    "images": [],
    "version": 5.2,
    "stylize": 500,
    "quality": 1.0,
    "prompt": "Vibrant California poppies"
  },
  {
    "images": [],
    "version": 5.2,
    "stylize": 500,
    "quality": 2.0,
    "prompt": "Vibrant California poppies"
  },
  {
    "images": [],
    "version": 6,
    "stylize": 100,
    "quality": 1.0,
    "prompt": "Vibrant California poppies"
  },
  {
    "images": [],
    "version": 6,
    "stylize": 100,
    "quality": 2.0,
    "prompt": "Vibrant California poppies"
  },
  {
    "images": [],
    "version": 6,
    "stylize": 500,
    "quality": 1.0,
    "prompt": "Vibrant California poppies"
  },
  {
    "images": [],
    "version": 6,
    "stylize": 500,
    "quality": 2.0,
    "prompt": "Vibrant California poppies"
  },
  {
    "images": [],
    "version": 6.1,
    "stylize": 100,
    "quality": 1.0,
    "prompt": "Vibrant California poppies"
  },
  {
    "images": [],
    "version": 6.1,
    "stylize": 100,
    "quality": 2.0,
    "prompt": "Vibrant California poppies"
  },
  {
    "images": [],
    "version": 6.1,
    "stylize": 500,
    "quality": 1.0,
    "prompt": "Vibrant California poppies"
  },
  {
    "images": [],
    "version": 6.1,
    "stylize": 500,
    "quality": 2.0,
    "prompt": "Vibrant California poppies"
  }
]======
{A flock, Three} of iridescent hummingbirds drinking nectar from {gigantic, miniature} orchids --q {0.25, 1} --repeat {2, 5}
[
  {
    "images": [],
    "quality": 0.25,
    "repeat": 2,
    "prompt": "A flock of iridescent hummingbirds drinking nectar from gigantic orchids"
  },
  {
    "images": [],
    "quality": 0.25,
    "repeat": 5,
    "prompt": "A flock of iridescent hummingbirds drinking nectar from gigantic orchids"
  },
  {
    "images": [],
    "quality": 1.0,
    "repeat": 2,
    "prompt": "A flock of iridescent hummingbirds drinking nectar from gigantic orchids"
  },
  {
    "images": [],
    "quality": 1.0,
    "repeat": 5,
    "prompt": "A flock of iridescent hummingbirds drinking nectar from gigantic orchids"
  },
  {
    "images": [],
    "quality": 0.25,
    "repeat": 2,
    "prompt": "A flock of iridescent hummingbirds drinking nectar from miniature orchids"
  },
  {
    "images": [],
    "quality": 0.25,
    "repeat": 5,
    "prompt": "A flock of iridescent hummingbirds drinking nectar from miniature orchids"
  },
  {
    "images": [],
    "quality": 1.0,
    "repeat": 2,
    "prompt": "A flock of iridescent hummingbirds drinking nectar from miniature orchids"
  },
  {
    "images": [],
    "quality": 1.0,
    "repeat": 5,
    "prompt": "A flock of iridescent hummingbirds drinking nectar from miniature orchids"
  },
  {
    "images": [],
    "quality": 0.25,
    "repeat": 2,
    "prompt": "Three of iridescent hummingbirds drinking nectar from gigantic orchids"
  },
  {
    "images": [],
    "quality": 0.25,
    "repeat": 5,
    "prompt": "Three of iridescent hummingbirds drinking nectar from gigantic orchids"
  },
  {
    "images": [],
    "quality": 1.0,
    "repeat": 2,
    "prompt": "Three of iridescent hummingbirds drinking nectar from gigantic orchids"
  },
  {
    "images": [],
    "quality": 1.0,
    "repeat": 5,
    "prompt": "Three of iridescent hummingbirds drinking nectar from gigantic orchids"
  },
  {
    "images": [],
    "quality": 0.25,
    "repeat": 2,
    "prompt": "Three of iridescent hummingbirds drinking nectar from miniature orchids"
  },
  {
    "images": [],
    "quality": 0.25,
    "repeat": 5,
    "prompt": "Three of iridescent hummingbirds drinking nectar from miniature orchids"
  },
  {
    "images": [],
    "quality": 1.0,
    "repeat": 2,
    "prompt": "Three of iridescent hummingbirds drinking nectar from miniature orchids"
  },
  {
    "images": [],
    "quality": 1.0,
    "repeat": 5,
    "prompt": "Three of iridescent hummingbirds drinking nectar from miniature orchids"
  }
]
```

## File: test-cases/prompts-in.txt (Size: 3.16 KB)

```
"Do not enter" sign in Elvish script, overgrown with vines --v 6 --stylize 250 --seed {12345, 67890}
"Lost in translation" neon sign in a Tokyo alleyway --v 6.1 --stylize 750 --weird 250
"Made in Midjourney" stamp on a vintage postage stamp --v 6.1 --stylize 1000 --zoom 1.5 --ar 1:2
A black and white oak tree icon --style {raw, default} --stylize {0, 1000} --weird {0, 3000}
A botanical sketch of fern fronds --video --version {5.2, 6} --ar {1:1, 16:9} --chaos 30
A cartoon drawing of a manual with the words "read the docs" in big text on the pages --v 6 --stylize 100 --ar 2:3
A cat in a {Tundra, Jungle, City} environment --ar 3:2 --stop 80 --weird 2000
A child's crayon drawing of a cat --version {5.2, 6} --style raw --stylize {50, 750} --quality {.25, 1}
A cyberpunk cat with a neon sign that says "Midjourney" --v 6 --stylize 500 --ar 1:1
A pastel watercolor landscape with "/imagine" written in the clouds --v 6.1 --stylize 250 --ar 16:9
A pattern of {pink and blue striped river stones, colorful watercolor fall leaves} --tile --chaos {25, 75}
A pencil sketch of a dragon made of constellations --ar 2:3 --style random-64 --no color, shading
A portrait of a melancholic robot butler --cref <image URL of classic butler> --cw {0, 50, 100} --sref <image URL of sad painting> --sw {100, 800}
A surreal sculpture made of clockwork oranges and melting clocks --weird {500, 1500} --chaos 80 --stop {30, 70}
A vibrant California poppies image --aspect {5:4, 7:4} --chaos {10, 50} --quality {.5, 1} --seed {random, 4294967295}
A {continuous line, loose gestural} charcoal drawing of a value study of a cyborg geisha --stop 50 --q 0.5
A {dreary, vibrant} cyberpunk cityscape --ar {16:9, 1:1} --style {raw, random} --chaos {0, 100}
A {Millennial Pink, Acid Green, Ebony} colored cat --s 250 --style random-16 --no monochrome
A {pastel, blacklight} painting of a {determined, sleepy} sloth riding a unicorn through a {crystal forest, salt flat} --chaos 25
A {pixel art, acrylic pour} style cat --style random-128 --weird 1000 --no fur, whiskers
An impressionistic watercolor of a cat playing chess with a dog --ar 4:3 --s 50 --no board, pieces --style raw
cheese:: cake:: painting multi-prompt --negative weight fruit::-.5 --version 4 --chaos 60
Clockwork chicken --weird {750, 1750, 2750} --stylize {200, 600, 900} --ar {2:3, 3:2}
Cyanotype cat --weird {250, 1000, 2000} --stylize {100, 500, 1000} --chaos {10, 50, 90}
Ice cream icon --niji {5, 6} --style {cute, expressive} --weird {250, 1000} --ar {1:1, 2:3}
image of a robot holding flowers --remix --prompt "A cyborg holding cybernetic orchids" --zoom 2x
Imagine a {1400s, 1990s} cat --sref <image URL of medieval tapestry> --sv {1, 4} --ar 5:4
Lithograph potato --weird {500, 1500, 2500} --chaos {20, 60, 80} --quality {.5, 1}
space:: ship multi-prompt  --stylize {250, 750} --weird 500
stream running through a redwood forest --vary region --selection "sky area" --prompt "aurora borealis" --pan up
Vibrant California poppies --version {5.2, 6, 6.1} --stylize {100, 500} --quality {1, 2}
{A flock, Three} of iridescent hummingbirds drinking nectar from {gigantic, miniature} orchids --q {0.25, 1} --repeat {2, 5}
{Happy, Angry, Shy} cat --style raw --chaos 60 --quality 1 --repeat 3
```

## File: test-cases/prompts-json.txt (Size: 31.71 KB)

```
======
"Do not enter" sign in Elvish script, overgrown with vines --v 6 --stylize 250 --seed {12345, 67890}
[
  {
    "images": [],
    "text": "\"Do not enter\" sign in Elvish script, overgrown with vines",
    "version": "6",
    "stylize": 250,
    "seed": 12345
  },
  {
    "images": [],
    "text": "\"Do not enter\" sign in Elvish script, overgrown with vines",
    "version": "6",
    "stylize": 250,
    "seed": 67890
  }
]======
"Lost in translation" neon sign in a Tokyo alleyway --v 6.1 --stylize 750 --weird 250
{
  "images": [],
  "text": "\"Lost in translation\" neon sign in a Tokyo alleyway",
  "version": "6.1",
  "stylize": 750,
  "weird": 250
}======
"Made in Midjourney" stamp on a vintage postage stamp --v 6.1 --stylize 1000 --zoom 1.5 --ar 1:2
{
  "images": [],
  "text": "\"Made in Midjourney\" stamp on a vintage postage stamp",
  "version": "6.1",
  "stylize": 1000,
  "zoom": "1.5",
  "aspect": "1:2"
}======
A black and white oak tree icon --style {raw, default} --stylize {0, 1000} --weird {0, 3000}
[
  {
    "images": [],
    "text": "A black and white oak tree icon",
    "style": "raw",
    "stylize": 0,
    "weird": 0
  },
  {
    "images": [],
    "text": "A black and white oak tree icon",
    "style": "raw",
    "stylize": 0,
    "weird": 3000
  },
  {
    "images": [],
    "text": "A black and white oak tree icon",
    "style": "raw",
    "stylize": 1000,
    "weird": 0
  },
  {
    "images": [],
    "text": "A black and white oak tree icon",
    "style": "raw",
    "stylize": 1000,
    "weird": 3000
  },
  {
    "images": [],
    "text": "A black and white oak tree icon",
    "style": "default",
    "stylize": 0,
    "weird": 0
  },
  {
    "images": [],
    "text": "A black and white oak tree icon",
    "style": "default",
    "stylize": 0,
    "weird": 3000
  },
  {
    "images": [],
    "text": "A black and white oak tree icon",
    "style": "default",
    "stylize": 1000,
    "weird": 0
  },
  {
    "images": [],
    "text": "A black and white oak tree icon",
    "style": "default",
    "stylize": 1000,
    "weird": 3000
  }
]======
A botanical sketch of fern fronds --video --version {5.2, 6} --ar {1:1, 16:9} --chaos 30
[
  {
    "images": [],
    "text": "A botanical sketch of fern fronds",
    "video": null,
    "version": "5.2",
    "aspect": "1:1",
    "chaos": 30
  },
  {
    "images": [],
    "text": "A botanical sketch of fern fronds",
    "video": null,
    "version": "5.2",
    "aspect": "16:9",
    "chaos": 30
  },
  {
    "images": [],
    "text": "A botanical sketch of fern fronds",
    "video": null,
    "version": "6",
    "aspect": "1:1",
    "chaos": 30
  },
  {
    "images": [],
    "text": "A botanical sketch of fern fronds",
    "video": null,
    "version": "6",
    "aspect": "16:9",
    "chaos": 30
  }
]======
A cartoon drawing of a manual with the words "read the docs" in big text on the pages --v 6 --stylize 100 --ar 2:3
{
  "images": [],
  "text": "A cartoon drawing of a manual with the words \"read the docs\" in big text on the pages",
  "version": "6",
  "stylize": 100,
  "aspect": "2:3"
}======
A cat in a {Tundra, Jungle, City} environment --ar 3:2 --stop 80 --weird 2000
[
  {
    "images": [],
    "text": "A cat in a Tundra environment",
    "aspect": "3:2",
    "stop": 80,
    "weird": 2000
  },
  {
    "images": [],
    "text": "A cat in a Jungle environment",
    "aspect": "3:2",
    "stop": 80,
    "weird": 2000
  },
  {
    "images": [],
    "text": "A cat in a City environment",
    "aspect": "3:2",
    "stop": 80,
    "weird": 2000
  }
]======
A child's crayon drawing of a cat --version {5.2, 6} --style raw --stylize {50, 750} --quality {.25, 1}
[
  {
    "images": [],
    "text": "A child's crayon drawing of a cat",
    "version": "5.2",
    "style": "raw",
    "stylize": 50,
    "quality": 0.25
  },
  {
    "images": [],
    "text": "A child's crayon drawing of a cat",
    "version": "5.2",
    "style": "raw",
    "stylize": 50,
    "quality": 1.0
  },
  {
    "images": [],
    "text": "A child's crayon drawing of a cat",
    "version": "5.2",
    "style": "raw",
    "stylize": 750,
    "quality": 0.25
  },
  {
    "images": [],
    "text": "A child's crayon drawing of a cat",
    "version": "5.2",
    "style": "raw",
    "stylize": 750,
    "quality": 1.0
  },
  {
    "images": [],
    "text": "A child's crayon drawing of a cat",
    "version": "6",
    "style": "raw",
    "stylize": 50,
    "quality": 0.25
  },
  {
    "images": [],
    "text": "A child's crayon drawing of a cat",
    "version": "6",
    "style": "raw",
    "stylize": 50,
    "quality": 1.0
  },
  {
    "images": [],
    "text": "A child's crayon drawing of a cat",
    "version": "6",
    "style": "raw",
    "stylize": 750,
    "quality": 0.25
  },
  {
    "images": [],
    "text": "A child's crayon drawing of a cat",
    "version": "6",
    "style": "raw",
    "stylize": 750,
    "quality": 1.0
  }
]======
A cyberpunk cat with a neon sign that says "Midjourney" --v 6 --stylize 500 --ar 1:1
{
  "images": [],
  "text": "A cyberpunk cat with a neon sign that says \"Midjourney\"",
  "version": "6",
  "stylize": 500,
  "aspect": "1:1"
}======
A pastel watercolor landscape with "/imagine" written in the clouds --v 6.1 --stylize 250 --ar 16:9
{
  "images": [],
  "text": "A pastel watercolor landscape with \"/imagine\" written in the clouds",
  "version": "6.1",
  "stylize": 250,
  "aspect": "16:9"
}======
A pattern of {pink and blue striped river stones, colorful watercolor fall leaves} --tile --chaos {25, 75}
[
  {
    "images": [],
    "text": "A pattern of pink and blue striped river stones",
    "tile": null,
    "chaos": 25
  },
  {
    "images": [],
    "text": "A pattern of pink and blue striped river stones",
    "tile": null,
    "chaos": 75
  },
  {
    "images": [],
    "text": "A pattern of colorful watercolor fall leaves",
    "tile": null,
    "chaos": 25
  },
  {
    "images": [],
    "text": "A pattern of colorful watercolor fall leaves",
    "tile": null,
    "chaos": 75
  }
]======
A pencil sketch of a dragon made of constellations --ar 2:3 --style random-64 --no color, shading
{
  "images": [],
  "text": "A pencil sketch of a dragon made of constellations",
  "aspect": "2:3",
  "style": "random-64",
  "no": "color, shading"
}======
A portrait of a melancholic robot butler --cref <image URL of classic butler> --cw {0, 50, 100} --sref <image URL of sad painting> --sw {100, 800}
[
  {
    "images": [],
    "text": "A portrait of a melancholic robot butler",
    "character_reference": [
      "<image URL of classic butler>"
    ],
    "character_weight": 0,
    "style_reference": [
      "<image URL of sad painting>"
    ],
    "style_weight": 100
  },
  {
    "images": [],
    "text": "A portrait of a melancholic robot butler",
    "character_reference": [
      "<image URL of classic butler>"
    ],
    "character_weight": 0,
    "style_reference": [
      "<image URL of sad painting>"
    ],
    "style_weight": 800
  },
  {
    "images": [],
    "text": "A portrait of a melancholic robot butler",
    "character_reference": [
      "<image URL of classic butler>"
    ],
    "character_weight": 50,
    "style_reference": [
      "<image URL of sad painting>"
    ],
    "style_weight": 100
  },
  {
    "images": [],
    "text": "A portrait of a melancholic robot butler",
    "character_reference": [
      "<image URL of classic butler>"
    ],
    "character_weight": 50,
    "style_reference": [
      "<image URL of sad painting>"
    ],
    "style_weight": 800
  },
  {
    "images": [],
    "text": "A portrait of a melancholic robot butler",
    "character_reference": [
      "<image URL of classic butler>"
    ],
    "character_weight": 100,
    "style_reference": [
      "<image URL of sad painting>"
    ],
    "style_weight": 100
  },
  {
    "images": [],
    "text": "A portrait of a melancholic robot butler",
    "character_reference": [
      "<image URL of classic butler>"
    ],
    "character_weight": 100,
    "style_reference": [
      "<image URL of sad painting>"
    ],
    "style_weight": 800
  }
]======
A surreal sculpture made of clockwork oranges and melting clocks --weird {500, 1500} --chaos 80 --stop {30, 70}
[
  {
    "images": [],
    "text": "A surreal sculpture made of clockwork oranges and melting clocks",
    "weird": 500,
    "chaos": 80,
    "stop": 30
  },
  {
    "images": [],
    "text": "A surreal sculpture made of clockwork oranges and melting clocks",
    "weird": 500,
    "chaos": 80,
    "stop": 70
  },
  {
    "images": [],
    "text": "A surreal sculpture made of clockwork oranges and melting clocks",
    "weird": 1500,
    "chaos": 80,
    "stop": 30
  },
  {
    "images": [],
    "text": "A surreal sculpture made of clockwork oranges and melting clocks",
    "weird": 1500,
    "chaos": 80,
    "stop": 70
  }
]======
A vibrant California poppies image --aspect {5:4, 7:4} --chaos {10, 50} --quality {.5, 1} --seed {random, 4294967295}
[
  {
    "images": [],
    "text": "A vibrant California poppies image",
    "aspect": "5:4",
    "chaos": 10,
    "quality": 0.5,
    "seed": "random"
  },
  {
    "images": [],
    "text": "A vibrant California poppies image",
    "aspect": "5:4",
    "chaos": 10,
    "quality": 0.5,
    "seed": 4294967295
  },
  {
    "images": [],
    "text": "A vibrant California poppies image",
    "aspect": "5:4",
    "chaos": 10,
    "quality": 1.0,
    "seed": "random"
  },
  {
    "images": [],
    "text": "A vibrant California poppies image",
    "aspect": "5:4",
    "chaos": 10,
    "quality": 1.0,
    "seed": 4294967295
  },
  {
    "images": [],
    "text": "A vibrant California poppies image",
    "aspect": "5:4",
    "chaos": 50,
    "quality": 0.5,
    "seed": "random"
  },
  {
    "images": [],
    "text": "A vibrant California poppies image",
    "aspect": "5:4",
    "chaos": 50,
    "quality": 0.5,
    "seed": 4294967295
  },
  {
    "images": [],
    "text": "A vibrant California poppies image",
    "aspect": "5:4",
    "chaos": 50,
    "quality": 1.0,
    "seed": "random"
  },
  {
    "images": [],
    "text": "A vibrant California poppies image",
    "aspect": "5:4",
    "chaos": 50,
    "quality": 1.0,
    "seed": 4294967295
  },
  {
    "images": [],
    "text": "A vibrant California poppies image",
    "aspect": "7:4",
    "chaos": 10,
    "quality": 0.5,
    "seed": "random"
  },
  {
    "images": [],
    "text": "A vibrant California poppies image",
    "aspect": "7:4",
    "chaos": 10,
    "quality": 0.5,
    "seed": 4294967295
  },
  {
    "images": [],
    "text": "A vibrant California poppies image",
    "aspect": "7:4",
    "chaos": 10,
    "quality": 1.0,
    "seed": "random"
  },
  {
    "images": [],
    "text": "A vibrant California poppies image",
    "aspect": "7:4",
    "chaos": 10,
    "quality": 1.0,
    "seed": 4294967295
  },
  {
    "images": [],
    "text": "A vibrant California poppies image",
    "aspect": "7:4",
    "chaos": 50,
    "quality": 0.5,
    "seed": "random"
  },
  {
    "images": [],
    "text": "A vibrant California poppies image",
    "aspect": "7:4",
    "chaos": 50,
    "quality": 0.5,
    "seed": 4294967295
  },
  {
    "images": [],
    "text": "A vibrant California poppies image",
    "aspect": "7:4",
    "chaos": 50,
    "quality": 1.0,
    "seed": "random"
  },
  {
    "images": [],
    "text": "A vibrant California poppies image",
    "aspect": "7:4",
    "chaos": 50,
    "quality": 1.0,
    "seed": 4294967295
  }
]======
A {continuous line, loose gestural} charcoal drawing of a value study of a cyborg geisha --stop 50 --q 0.5
[
  {
    "images": [],
    "text": "A continuous line charcoal drawing of a value study of a cyborg geisha",
    "stop": 50,
    "quality": 0.5
  },
  {
    "images": [],
    "text": "A loose gestural charcoal drawing of a value study of a cyborg geisha",
    "stop": 50,
    "quality": 0.5
  }
]======
A {dreary, vibrant} cyberpunk cityscape --ar {16:9, 1:1} --style {raw, random} --chaos {0, 100}
[
  {
    "images": [],
    "text": "A dreary cyberpunk cityscape",
    "aspect": "16:9",
    "style": "raw",
    "chaos": 0
  },
  {
    "images": [],
    "text": "A dreary cyberpunk cityscape",
    "aspect": "16:9",
    "style": "raw",
    "chaos": 100
  },
  {
    "images": [],
    "text": "A dreary cyberpunk cityscape",
    "aspect": "16:9",
    "style": "random",
    "chaos": 0
  },
  {
    "images": [],
    "text": "A dreary cyberpunk cityscape",
    "aspect": "16:9",
    "style": "random",
    "chaos": 100
  },
  {
    "images": [],
    "text": "A dreary cyberpunk cityscape",
    "aspect": "1:1",
    "style": "raw",
    "chaos": 0
  },
  {
    "images": [],
    "text": "A dreary cyberpunk cityscape",
    "aspect": "1:1",
    "style": "raw",
    "chaos": 100
  },
  {
    "images": [],
    "text": "A dreary cyberpunk cityscape",
    "aspect": "1:1",
    "style": "random",
    "chaos": 0
  },
  {
    "images": [],
    "text": "A dreary cyberpunk cityscape",
    "aspect": "1:1",
    "style": "random",
    "chaos": 100
  },
  {
    "images": [],
    "text": "A vibrant cyberpunk cityscape",
    "aspect": "16:9",
    "style": "raw",
    "chaos": 0
  },
  {
    "images": [],
    "text": "A vibrant cyberpunk cityscape",
    "aspect": "16:9",
    "style": "raw",
    "chaos": 100
  },
  {
    "images": [],
    "text": "A vibrant cyberpunk cityscape",
    "aspect": "16:9",
    "style": "random",
    "chaos": 0
  },
  {
    "images": [],
    "text": "A vibrant cyberpunk cityscape",
    "aspect": "16:9",
    "style": "random",
    "chaos": 100
  },
  {
    "images": [],
    "text": "A vibrant cyberpunk cityscape",
    "aspect": "1:1",
    "style": "raw",
    "chaos": 0
  },
  {
    "images": [],
    "text": "A vibrant cyberpunk cityscape",
    "aspect": "1:1",
    "style": "raw",
    "chaos": 100
  },
  {
    "images": [],
    "text": "A vibrant cyberpunk cityscape",
    "aspect": "1:1",
    "style": "random",
    "chaos": 0
  },
  {
    "images": [],
    "text": "A vibrant cyberpunk cityscape",
    "aspect": "1:1",
    "style": "random",
    "chaos": 100
  }
]======
A {Millennial Pink, Acid Green, Ebony} colored cat --s 250 --style random-16 --no monochrome
[
  {
    "images": [],
    "text": "A Millennial Pink colored cat",
    "stylize": 250,
    "style": "random-16",
    "no": "monochrome"
  },
  {
    "images": [],
    "text": "A Acid Green colored cat",
    "stylize": 250,
    "style": "random-16",
    "no": "monochrome"
  },
  {
    "images": [],
    "text": "A Ebony colored cat",
    "stylize": 250,
    "style": "random-16",
    "no": "monochrome"
  }
]======
A {pastel, blacklight} painting of a {determined, sleepy} sloth riding a unicorn through a {crystal forest, salt flat} --chaos 25
[
  {
    "images": [],
    "text": "A pastel painting of a determined sloth riding a unicorn through a crystal forest",
    "chaos": 25
  },
  {
    "images": [],
    "text": "A pastel painting of a determined sloth riding a unicorn through a salt flat",
    "chaos": 25
  },
  {
    "images": [],
    "text": "A pastel painting of a sleepy sloth riding a unicorn through a crystal forest",
    "chaos": 25
  },
  {
    "images": [],
    "text": "A pastel painting of a sleepy sloth riding a unicorn through a salt flat",
    "chaos": 25
  },
  {
    "images": [],
    "text": "A blacklight painting of a determined sloth riding a unicorn through a crystal forest",
    "chaos": 25
  },
  {
    "images": [],
    "text": "A blacklight painting of a determined sloth riding a unicorn through a salt flat",
    "chaos": 25
  },
  {
    "images": [],
    "text": "A blacklight painting of a sleepy sloth riding a unicorn through a crystal forest",
    "chaos": 25
  },
  {
    "images": [],
    "text": "A blacklight painting of a sleepy sloth riding a unicorn through a salt flat",
    "chaos": 25
  }
]======
A {pixel art, acrylic pour} style cat --style random-128 --weird 1000 --no fur, whiskers
[
  {
    "images": [],
    "text": "A pixel art style cat",
    "style": "random-128",
    "weird": 1000,
    "no": "fur, whiskers"
  },
  {
    "images": [],
    "text": "A acrylic pour style cat",
    "style": "random-128",
    "weird": 1000,
    "no": "fur, whiskers"
  }
]======
An impressionistic watercolor of a cat playing chess with a dog --ar 4:3 --s 50 --no board, pieces --style raw
{
  "images": [],
  "text": "An impressionistic watercolor of a cat playing chess with a dog",
  "aspect": "4:3",
  "stylize": 50,
  "no": "board, pieces",
  "style": "raw"
}======
cheese:: cake:: painting multi-prompt --negative weight fruit::-.5 --version 4 --chaos 60
{
  "images": [],
  "text": "cheese:: cake:: painting multi-prompt",
  "negative": "weight fruit::-.5",
  "version": "4",
  "chaos": 60
}======
Clockwork chicken --weird {750, 1750, 2750} --stylize {200, 600, 900} --ar {2:3, 3:2}
[
  {
    "images": [],
    "text": "Clockwork chicken",
    "weird": 750,
    "stylize": 200,
    "aspect": "2:3"
  },
  {
    "images": [],
    "text": "Clockwork chicken",
    "weird": 750,
    "stylize": 200,
    "aspect": "3:2"
  },
  {
    "images": [],
    "text": "Clockwork chicken",
    "weird": 750,
    "stylize": 600,
    "aspect": "2:3"
  },
  {
    "images": [],
    "text": "Clockwork chicken",
    "weird": 750,
    "stylize": 600,
    "aspect": "3:2"
  },
  {
    "images": [],
    "text": "Clockwork chicken",
    "weird": 750,
    "stylize": 900,
    "aspect": "2:3"
  },
  {
    "images": [],
    "text": "Clockwork chicken",
    "weird": 750,
    "stylize": 900,
    "aspect": "3:2"
  },
  {
    "images": [],
    "text": "Clockwork chicken",
    "weird": 1750,
    "stylize": 200,
    "aspect": "2:3"
  },
  {
    "images": [],
    "text": "Clockwork chicken",
    "weird": 1750,
    "stylize": 200,
    "aspect": "3:2"
  },
  {
    "images": [],
    "text": "Clockwork chicken",
    "weird": 1750,
    "stylize": 600,
    "aspect": "2:3"
  },
  {
    "images": [],
    "text": "Clockwork chicken",
    "weird": 1750,
    "stylize": 600,
    "aspect": "3:2"
  },
  {
    "images": [],
    "text": "Clockwork chicken",
    "weird": 1750,
    "stylize": 900,
    "aspect": "2:3"
  },
  {
    "images": [],
    "text": "Clockwork chicken",
    "weird": 1750,
    "stylize": 900,
    "aspect": "3:2"
  },
  {
    "images": [],
    "text": "Clockwork chicken",
    "weird": 2750,
    "stylize": 200,
    "aspect": "2:3"
  },
  {
    "images": [],
    "text": "Clockwork chicken",
    "weird": 2750,
    "stylize": 200,
    "aspect": "3:2"
  },
  {
    "images": [],
    "text": "Clockwork chicken",
    "weird": 2750,
    "stylize": 600,
    "aspect": "2:3"
  },
  {
    "images": [],
    "text": "Clockwork chicken",
    "weird": 2750,
    "stylize": 600,
    "aspect": "3:2"
  },
  {
    "images": [],
    "text": "Clockwork chicken",
    "weird": 2750,
    "stylize": 900,
    "aspect": "2:3"
  },
  {
    "images": [],
    "text": "Clockwork chicken",
    "weird": 2750,
    "stylize": 900,
    "aspect": "3:2"
  }
]======
Cyanotype cat --weird {250, 1000, 2000} --stylize {100, 500, 1000} --chaos {10, 50, 90}
[
  {
    "images": [],
    "text": "Cyanotype cat",
    "weird": 250,
    "stylize": 100,
    "chaos": 10
  },
  {
    "images": [],
    "text": "Cyanotype cat",
    "weird": 250,
    "stylize": 100,
    "chaos": 50
  },
  {
    "images": [],
    "text": "Cyanotype cat",
    "weird": 250,
    "stylize": 100,
    "chaos": 90
  },
  {
    "images": [],
    "text": "Cyanotype cat",
    "weird": 250,
    "stylize": 500,
    "chaos": 10
  },
  {
    "images": [],
    "text": "Cyanotype cat",
    "weird": 250,
    "stylize": 500,
    "chaos": 50
  },
  {
    "images": [],
    "text": "Cyanotype cat",
    "weird": 250,
    "stylize": 500,
    "chaos": 90
  },
  {
    "images": [],
    "text": "Cyanotype cat",
    "weird": 250,
    "stylize": 1000,
    "chaos": 10
  },
  {
    "images": [],
    "text": "Cyanotype cat",
    "weird": 250,
    "stylize": 1000,
    "chaos": 50
  },
  {
    "images": [],
    "text": "Cyanotype cat",
    "weird": 250,
    "stylize": 1000,
    "chaos": 90
  },
  {
    "images": [],
    "text": "Cyanotype cat",
    "weird": 1000,
    "stylize": 100,
    "chaos": 10
  },
  {
    "images": [],
    "text": "Cyanotype cat",
    "weird": 1000,
    "stylize": 100,
    "chaos": 50
  },
  {
    "images": [],
    "text": "Cyanotype cat",
    "weird": 1000,
    "stylize": 100,
    "chaos": 90
  },
  {
    "images": [],
    "text": "Cyanotype cat",
    "weird": 1000,
    "stylize": 500,
    "chaos": 10
  },
  {
    "images": [],
    "text": "Cyanotype cat",
    "weird": 1000,
    "stylize": 500,
    "chaos": 50
  },
  {
    "images": [],
    "text": "Cyanotype cat",
    "weird": 1000,
    "stylize": 500,
    "chaos": 90
  },
  {
    "images": [],
    "text": "Cyanotype cat",
    "weird": 1000,
    "stylize": 1000,
    "chaos": 10
  },
  {
    "images": [],
    "text": "Cyanotype cat",
    "weird": 1000,
    "stylize": 1000,
    "chaos": 50
  },
  {
    "images": [],
    "text": "Cyanotype cat",
    "weird": 1000,
    "stylize": 1000,
    "chaos": 90
  },
  {
    "images": [],
    "text": "Cyanotype cat",
    "weird": 2000,
    "stylize": 100,
    "chaos": 10
  },
  {
    "images": [],
    "text": "Cyanotype cat",
    "weird": 2000,
    "stylize": 100,
    "chaos": 50
  },
  {
    "images": [],
    "text": "Cyanotype cat",
    "weird": 2000,
    "stylize": 100,
    "chaos": 90
  },
  {
    "images": [],
    "text": "Cyanotype cat",
    "weird": 2000,
    "stylize": 500,
    "chaos": 10
  },
  {
    "images": [],
    "text": "Cyanotype cat",
    "weird": 2000,
    "stylize": 500,
    "chaos": 50
  },
  {
    "images": [],
    "text": "Cyanotype cat",
    "weird": 2000,
    "stylize": 500,
    "chaos": 90
  },
  {
    "images": [],
    "text": "Cyanotype cat",
    "weird": 2000,
    "stylize": 1000,
    "chaos": 10
  },
  {
    "images": [],
    "text": "Cyanotype cat",
    "weird": 2000,
    "stylize": 1000,
    "chaos": 50
  },
  {
    "images": [],
    "text": "Cyanotype cat",
    "weird": 2000,
    "stylize": 1000,
    "chaos": 90
  }
]======
Ice cream icon --niji {5, 6} --style {cute, expressive} --weird {250, 1000} --ar {1:1, 2:3}
[
  {
    "images": [],
    "text": "Ice cream icon",
    "version": "niji 5",
    "style": "cute",
    "weird": 250,
    "aspect": "1:1"
  },
  {
    "images": [],
    "text": "Ice cream icon",
    "version": "niji 5",
    "style": "cute",
    "weird": 250,
    "aspect": "2:3"
  },
  {
    "images": [],
    "text": "Ice cream icon",
    "version": "niji 5",
    "style": "cute",
    "weird": 1000,
    "aspect": "1:1"
  },
  {
    "images": [],
    "text": "Ice cream icon",
    "version": "niji 5",
    "style": "cute",
    "weird": 1000,
    "aspect": "2:3"
  },
  {
    "images": [],
    "text": "Ice cream icon",
    "version": "niji 5",
    "style": "expressive",
    "weird": 250,
    "aspect": "1:1"
  },
  {
    "images": [],
    "text": "Ice cream icon",
    "version": "niji 5",
    "style": "expressive",
    "weird": 250,
    "aspect": "2:3"
  },
  {
    "images": [],
    "text": "Ice cream icon",
    "version": "niji 5",
    "style": "expressive",
    "weird": 1000,
    "aspect": "1:1"
  },
  {
    "images": [],
    "text": "Ice cream icon",
    "version": "niji 5",
    "style": "expressive",
    "weird": 1000,
    "aspect": "2:3"
  },
  {
    "images": [],
    "text": "Ice cream icon",
    "version": "niji 6",
    "style": "cute",
    "weird": 250,
    "aspect": "1:1"
  },
  {
    "images": [],
    "text": "Ice cream icon",
    "version": "niji 6",
    "style": "cute",
    "weird": 250,
    "aspect": "2:3"
  },
  {
    "images": [],
    "text": "Ice cream icon",
    "version": "niji 6",
    "style": "cute",
    "weird": 1000,
    "aspect": "1:1"
  },
  {
    "images": [],
    "text": "Ice cream icon",
    "version": "niji 6",
    "style": "cute",
    "weird": 1000,
    "aspect": "2:3"
  },
  {
    "images": [],
    "text": "Ice cream icon",
    "version": "niji 6",
    "style": "expressive",
    "weird": 250,
    "aspect": "1:1"
  },
  {
    "images": [],
    "text": "Ice cream icon",
    "version": "niji 6",
    "style": "expressive",
    "weird": 250,
    "aspect": "2:3"
  },
  {
    "images": [],
    "text": "Ice cream icon",
    "version": "niji 6",
    "style": "expressive",
    "weird": 1000,
    "aspect": "1:1"
  },
  {
    "images": [],
    "text": "Ice cream icon",
    "version": "niji 6",
    "style": "expressive",
    "weird": 1000,
    "aspect": "2:3"
  }
]======
image of a robot holding flowers --remix --prompt "A cyborg holding cybernetic orchids" --zoom 2x
{
  "images": [],
  "text": "image of a robot holding flowers",
  "remix": null,
  "prompt": "A cyborg holding cybernetic orchids",
  "zoom": "2x"
}======
Imagine a {1400s, 1990s} cat --sref <image URL of medieval tapestry> --sv {1, 4} --ar 5:4
[
  {
    "images": [],
    "text": "Imagine a 1400s cat",
    "style_reference": [
      "<image URL of medieval tapestry>"
    ],
    "style_version": 1,
    "aspect": "5:4"
  },
  {
    "images": [],
    "text": "Imagine a 1400s cat",
    "style_reference": [
      "<image URL of medieval tapestry>"
    ],
    "style_version": 4,
    "aspect": "5:4"
  },
  {
    "images": [],
    "text": "Imagine a 1990s cat",
    "style_reference": [
      "<image URL of medieval tapestry>"
    ],
    "style_version": 1,
    "aspect": "5:4"
  },
  {
    "images": [],
    "text": "Imagine a 1990s cat",
    "style_reference": [
      "<image URL of medieval tapestry>"
    ],
    "style_version": 4,
    "aspect": "5:4"
  }
]======
Lithograph potato --weird {500, 1500, 2500} --chaos {20, 60, 80} --quality {.5, 1}
[
  {
    "images": [],
    "text": "Lithograph potato",
    "weird": 500,
    "chaos": 20,
    "quality": 0.5
  },
  {
    "images": [],
    "text": "Lithograph potato",
    "weird": 500,
    "chaos": 20,
    "quality": 1.0
  },
  {
    "images": [],
    "text": "Lithograph potato",
    "weird": 500,
    "chaos": 60,
    "quality": 0.5
  },
  {
    "images": [],
    "text": "Lithograph potato",
    "weird": 500,
    "chaos": 60,
    "quality": 1.0
  },
  {
    "images": [],
    "text": "Lithograph potato",
    "weird": 500,
    "chaos": 80,
    "quality": 0.5
  },
  {
    "images": [],
    "text": "Lithograph potato",
    "weird": 500,
    "chaos": 80,
    "quality": 1.0
  },
  {
    "images": [],
    "text": "Lithograph potato",
    "weird": 1500,
    "chaos": 20,
    "quality": 0.5
  },
  {
    "images": [],
    "text": "Lithograph potato",
    "weird": 1500,
    "chaos": 20,
    "quality": 1.0
  },
  {
    "images": [],
    "text": "Lithograph potato",
    "weird": 1500,
    "chaos": 60,
    "quality": 0.5
  },
  {
    "images": [],
    "text": "Lithograph potato",
    "weird": 1500,
    "chaos": 60,
    "quality": 1.0
  },
  {
    "images": [],
    "text": "Lithograph potato",
    "weird": 1500,
    "chaos": 80,
    "quality": 0.5
  },
  {
    "images": [],
    "text": "Lithograph potato",
    "weird": 1500,
    "chaos": 80,
    "quality": 1.0
  },
  {
    "images": [],
    "text": "Lithograph potato",
    "weird": 2500,
    "chaos": 20,
    "quality": 0.5
  },
  {
    "images": [],
    "text": "Lithograph potato",
    "weird": 2500,
    "chaos": 20,
    "quality": 1.0
  },
  {
    "images": [],
    "text": "Lithograph potato",
    "weird": 2500,
    "chaos": 60,
    "quality": 0.5
  },
  {
    "images": [],
    "text": "Lithograph potato",
    "weird": 2500,
    "chaos": 60,
    "quality": 1.0
  },
  {
    "images": [],
    "text": "Lithograph potato",
    "weird": 2500,
    "chaos": 80,
    "quality": 0.5
  },
  {
    "images": [],
    "text": "Lithograph potato",
    "weird": 2500,
    "chaos": 80,
    "quality": 1.0
  }
]======
space:: ship multi-prompt --stylize {250, 750} --weird 500
[
  {
    "images": [],
    "text": "space:: ship multi-prompt",
    "stylize": 250,
    "weird": 500
  },
  {
    "images": [],
    "text": "space:: ship multi-prompt",
    "stylize": 750,
    "weird": 500
  }
]======
stream running through a redwood forest --vary region --selection "sky area" --prompt "aurora borealis" --pan up
{
  "images": [],
  "text": "stream running through a redwood forest",
  "vary": "region",
  "selection": "sky area",
  "prompt": "aurora borealis",
  "pan": "up"
}======
Vibrant California poppies --version {5.2, 6, 6.1} --stylize {100, 500} --quality {1, 2}
[
  {
    "images": [],
    "text": "Vibrant California poppies",
    "version": "5.2",
    "stylize": 100,
    "quality": 1.0
  },
  {
    "images": [],
    "text": "Vibrant California poppies",
    "version": "5.2",
    "stylize": 100,
    "quality": 2.0
  },
  {
    "images": [],
    "text": "Vibrant California poppies",
    "version": "5.2",
    "stylize": 500,
    "quality": 1.0
  },
  {
    "images": [],
    "text": "Vibrant California poppies",
    "version": "5.2",
    "stylize": 500,
    "quality": 2.0
  },
  {
    "images": [],
    "text": "Vibrant California poppies",
    "version": "6",
    "stylize": 100,
    "quality": 1.0
  },
  {
    "images": [],
    "text": "Vibrant California poppies",
    "version": "6",
    "stylize": 100,
    "quality": 2.0
  },
  {
    "images": [],
    "text": "Vibrant California poppies",
    "version": "6",
    "stylize": 500,
    "quality": 1.0
  },
  {
    "images": [],
    "text": "Vibrant California poppies",
    "version": "6",
    "stylize": 500,
    "quality": 2.0
  },
  {
    "images": [],
    "text": "Vibrant California poppies",
    "version": "6.1",
    "stylize": 100,
    "quality": 1.0
  },
  {
    "images": [],
    "text": "Vibrant California poppies",
    "version": "6.1",
    "stylize": 100,
    "quality": 2.0
  },
  {
    "images": [],
    "text": "Vibrant California poppies",
    "version": "6.1",
    "stylize": 500,
    "quality": 1.0
  },
  {
    "images": [],
    "text": "Vibrant California poppies",
    "version": "6.1",
    "stylize": 500,
    "quality": 2.0
  }
]======
{A flock, Three} of iridescent hummingbirds drinking nectar from {gigantic, miniature} orchids --q {0.25, 1} --repeat {2, 5}
[
  {
    "images": [],
    "text": "A flock of iridescent hummingbirds drinking nectar from gigantic orchids",
    "quality": 0.25,
    "repeat": 2
  },
  {
    "images": [],
    "text": "A flock of iridescent hummingbirds drinking nectar from gigantic orchids",
    "quality": 0.25,
    "repeat": 5
  },
  {
    "images": [],
    "text": "A flock of iridescent hummingbirds drinking nectar from gigantic orchids",
    "quality": 1.0,
    "repeat": 2
  },
  {
    "images": [],
    "text": "A flock of iridescent hummingbirds drinking nectar from gigantic orchids",
    "quality": 1.0,
    "repeat": 5
  },
  {
    "images": [],
    "text": "A flock of iridescent hummingbirds drinking nectar from miniature orchids",
    "quality": 0.25,
    "repeat": 2
  },
  {
    "images": [],
    "text": "A flock of iridescent hummingbirds drinking nectar from miniature orchids",
    "quality": 0.25,
    "repeat": 5
  },
  {
    "images": [],
    "text": "A flock of iridescent hummingbirds drinking nectar from miniature orchids",
    "quality": 1.0,
    "repeat": 2
  },
  {
    "images": [],
    "text": "A flock of iridescent hummingbirds drinking nectar from miniature orchids",
    "quality": 1.0,
    "repeat": 5
  },
  {
    "images": [],
    "text": "Three of iridescent hummingbirds drinking nectar from gigantic orchids",
    "quality": 0.25,
    "repeat": 2
  },
  {
    "images": [],
    "text": "Three of iridescent hummingbirds drinking nectar from gigantic orchids",
    "quality": 0.25,
    "repeat": 5
  },
  {
    "images": [],
    "text": "Three of iridescent hummingbirds drinking nectar from gigantic orchids",
    "quality": 1.0,
    "repeat": 2
  },
  {
    "images": [],
    "text": "Three of iridescent hummingbirds drinking nectar from gigantic orchids",
    "quality": 1.0,
    "repeat": 5
  },
  {
    "images": [],
    "text": "Three of iridescent hummingbirds drinking nectar from miniature orchids",
    "quality": 0.25,
    "repeat": 2
  },
  {
    "images": [],
    "text": "Three of iridescent hummingbirds drinking nectar from miniature orchids",
    "quality": 0.25,
    "repeat": 5
  },
  {
    "images": [],
    "text": "Three of iridescent hummingbirds drinking nectar from miniature orchids",
    "quality": 1.0,
    "repeat": 2
  },
  {
    "images": [],
    "text": "Three of iridescent hummingbirds drinking nectar from miniature orchids",
    "quality": 1.0,
    "repeat": 5
  }
]
```

## File: test-cases/prompts-mj.txt (Size: 105.65 KB)

```
======
"Do not enter" sign in Elvish script, overgrown with vines --v 6 --stylize 250 --seed {12345, 67890}
[
  {
    "text": "\"Do not enter\" sign in Elvish script, overgrown with vines",
    "image_prompts": [],
    "stylize": 250,
    "chaos": 0,
    "weird": 0,
    "image_weight": 1.0,
    "seed": 12345,
    "stop": 100,
    "aspect_width": 1,
    "aspect_height": 1,
    "aspect_ratio": "1:1",
    "style": null,
    "version": "v6",
    "personalization": false,
    "quality": 1.0,
    "character_reference": [],
    "character_weight": 100,
    "style_reference": [],
    "style_weight": null,
    "style_version": 2,
    "repeat": null,
    "turbo": false,
    "relax": false,
    "tile": false,
    "negative_prompt": null,
    "extra_params": {}
  },
  {
    "text": "\"Do not enter\" sign in Elvish script, overgrown with vines",
    "image_prompts": [],
    "stylize": 250,
    "chaos": 0,
    "weird": 0,
    "image_weight": 1.0,
    "seed": 67890,
    "stop": 100,
    "aspect_width": 1,
    "aspect_height": 1,
    "aspect_ratio": "1:1",
    "style": null,
    "version": "v6",
    "personalization": false,
    "quality": 1.0,
    "character_reference": [],
    "character_weight": 100,
    "style_reference": [],
    "style_weight": null,
    "style_version": 2,
    "repeat": null,
    "turbo": false,
    "relax": false,
    "tile": false,
    "negative_prompt": null,
    "extra_params": {}
  }
]======
"Lost in translation" neon sign in a Tokyo alleyway --v 6.1 --stylize 750 --weird 250
{
  "text": "\"Lost in translation\" neon sign in a Tokyo alleyway",
  "image_prompts": [],
  "stylize": 750,
  "chaos": 0,
  "weird": 250,
  "image_weight": 1.0,
  "seed": null,
  "stop": 100,
  "aspect_width": 1,
  "aspect_height": 1,
  "aspect_ratio": "1:1",
  "style": null,
  "version": "v6.1",
  "personalization": false,
  "quality": 1.0,
  "character_reference": [],
  "character_weight": 100,
  "style_reference": [],
  "style_weight": null,
  "style_version": 2,
  "repeat": null,
  "turbo": false,
  "relax": false,
  "tile": false,
  "negative_prompt": null,
  "extra_params": {}
}======
"Made in Midjourney" stamp on a vintage postage stamp --v 6.1 --stylize 1000 --zoom 1.5 --ar 1:2
{
  "text": "\"Made in Midjourney\" stamp on a vintage postage stamp",
  "image_prompts": [],
  "stylize": 1000,
  "chaos": 0,
  "weird": 0,
  "image_weight": 1.0,
  "seed": null,
  "stop": 100,
  "aspect_width": 1,
  "aspect_height": 2,
  "aspect_ratio": "1:2",
  "style": null,
  "version": "v6.1",
  "personalization": false,
  "quality": 1.0,
  "character_reference": [],
  "character_weight": 100,
  "style_reference": [],
  "style_weight": null,
  "style_version": 2,
  "repeat": null,
  "turbo": false,
  "relax": false,
  "tile": false,
  "negative_prompt": null,
  "extra_params": {
    "zoom": "1.5"
  }
}======
A black and white oak tree icon --style {raw, default} --stylize {0, 1000} --weird {0, 3000}
{
  "error": "1 validation error for MidjourneyPrompt\nstyle\n  Value error, Invalid style value. Must be one of: {'cute', 'expressive', 'raw', 'scenic', 'original'} [type=value_error, input_value='default', input_type=str]\n    For further information visit https://errors.pydantic.dev/2.10/v/value_error"
}======
A botanical sketch of fern fronds --video --version {5.2, 6} --ar {1:1, 16:9} --chaos 30
[
  {
    "text": "A botanical sketch of fern fronds",
    "image_prompts": [],
    "stylize": 100,
    "chaos": 30,
    "weird": 0,
    "image_weight": 1.0,
    "seed": null,
    "stop": 100,
    "aspect_width": 1,
    "aspect_height": 1,
    "aspect_ratio": "1:1",
    "style": null,
    "version": "v5.2",
    "personalization": false,
    "quality": 1.0,
    "character_reference": [],
    "character_weight": 100,
    "style_reference": [],
    "style_weight": null,
    "style_version": 2,
    "repeat": null,
    "turbo": false,
    "relax": false,
    "tile": false,
    "negative_prompt": null,
    "extra_params": {
      "video": null
    }
  },
  {
    "text": "A botanical sketch of fern fronds",
    "image_prompts": [],
    "stylize": 100,
    "chaos": 30,
    "weird": 0,
    "image_weight": 1.0,
    "seed": null,
    "stop": 100,
    "aspect_width": 16,
    "aspect_height": 9,
    "aspect_ratio": "16:9",
    "style": null,
    "version": "v5.2",
    "personalization": false,
    "quality": 1.0,
    "character_reference": [],
    "character_weight": 100,
    "style_reference": [],
    "style_weight": null,
    "style_version": 2,
    "repeat": null,
    "turbo": false,
    "relax": false,
    "tile": false,
    "negative_prompt": null,
    "extra_params": {
      "video": null
    }
  },
  {
    "text": "A botanical sketch of fern fronds",
    "image_prompts": [],
    "stylize": 100,
    "chaos": 30,
    "weird": 0,
    "image_weight": 1.0,
    "seed": null,
    "stop": 100,
    "aspect_width": 1,
    "aspect_height": 1,
    "aspect_ratio": "1:1",
    "style": null,
    "version": "v6",
    "personalization": false,
    "quality": 1.0,
    "character_reference": [],
    "character_weight": 100,
    "style_reference": [],
    "style_weight": null,
    "style_version": 2,
    "repeat": null,
    "turbo": false,
    "relax": false,
    "tile": false,
    "negative_prompt": null,
    "extra_params": {
      "video": null
    }
  },
  {
    "text": "A botanical sketch of fern fronds",
    "image_prompts": [],
    "stylize": 100,
    "chaos": 30,
    "weird": 0,
    "image_weight": 1.0,
    "seed": null,
    "stop": 100,
    "aspect_width": 16,
    "aspect_height": 9,
    "aspect_ratio": "16:9",
    "style": null,
    "version": "v6",
    "personalization": false,
    "quality": 1.0,
    "character_reference": [],
    "character_weight": 100,
    "style_reference": [],
    "style_weight": null,
    "style_version": 2,
    "repeat": null,
    "turbo": false,
    "relax": false,
    "tile": false,
    "negative_prompt": null,
    "extra_params": {
      "video": null
    }
  }
]======
A cartoon drawing of a manual with the words "read the docs" in big text on the pages --v 6 --stylize 100 --ar 2:3
{
  "text": "A cartoon drawing of a manual with the words \"read the docs\" in big text on the pages",
  "image_prompts": [],
  "stylize": 100,
  "chaos": 0,
  "weird": 0,
  "image_weight": 1.0,
  "seed": null,
  "stop": 100,
  "aspect_width": 2,
  "aspect_height": 3,
  "aspect_ratio": "2:3",
  "style": null,
  "version": "v6",
  "personalization": false,
  "quality": 1.0,
  "character_reference": [],
  "character_weight": 100,
  "style_reference": [],
  "style_weight": null,
  "style_version": 2,
  "repeat": null,
  "turbo": false,
  "relax": false,
  "tile": false,
  "negative_prompt": null,
  "extra_params": {}
}======
A cat in a {Tundra, Jungle, City} environment --ar 3:2 --stop 80 --weird 2000
[
  {
    "text": "A cat in a Tundra environment",
    "image_prompts": [],
    "stylize": 100,
    "chaos": 0,
    "weird": 2000,
    "image_weight": 1.0,
    "seed": null,
    "stop": 80,
    "aspect_width": 3,
    "aspect_height": 2,
    "aspect_ratio": "3:2",
    "style": null,
    "version": null,
    "personalization": false,
    "quality": 1.0,
    "character_reference": [],
    "character_weight": 100,
    "style_reference": [],
    "style_weight": null,
    "style_version": 2,
    "repeat": null,
    "turbo": false,
    "relax": false,
    "tile": false,
    "negative_prompt": null,
    "extra_params": {}
  },
  {
    "text": "A cat in a Jungle environment",
    "image_prompts": [],
    "stylize": 100,
    "chaos": 0,
    "weird": 2000,
    "image_weight": 1.0,
    "seed": null,
    "stop": 80,
    "aspect_width": 3,
    "aspect_height": 2,
    "aspect_ratio": "3:2",
    "style": null,
    "version": null,
    "personalization": false,
    "quality": 1.0,
    "character_reference": [],
    "character_weight": 100,
    "style_reference": [],
    "style_weight": null,
    "style_version": 2,
    "repeat": null,
    "turbo": false,
    "relax": false,
    "tile": false,
    "negative_prompt": null,
    "extra_params": {}
  },
  {
    "text": "A cat in a City environment",
    "image_prompts": [],
    "stylize": 100,
    "chaos": 0,
    "weird": 2000,
    "image_weight": 1.0,
    "seed": null,
    "stop": 80,
    "aspect_width": 3,
    "aspect_height": 2,
    "aspect_ratio": "3:2",
    "style": null,
    "version": null,
    "personalization": false,
    "quality": 1.0,
    "character_reference": [],
    "character_weight": 100,
    "style_reference": [],
    "style_weight": null,
    "style_version": 2,
    "repeat": null,
    "turbo": false,
    "relax": false,
    "tile": false,
    "negative_prompt": null,
    "extra_params": {}
  }
]======
A child's crayon drawing of a cat --version {5.2, 6} --style raw --stylize {50, 750} --quality {.25, 1}
[
  {
    "text": "A child's crayon drawing of a cat",
    "image_prompts": [],
    "stylize": 50,
    "chaos": 0,
    "weird": 0,
    "image_weight": 1.0,
    "seed": null,
    "stop": 100,
    "aspect_width": 1,
    "aspect_height": 1,
    "aspect_ratio": "1:1",
    "style": "raw",
    "version": "v5.2",
    "personalization": false,
    "quality": 0.25,
    "character_reference": [],
    "character_weight": 100,
    "style_reference": [],
    "style_weight": null,
    "style_version": 2,
    "repeat": null,
    "turbo": false,
    "relax": false,
    "tile": false,
    "negative_prompt": null,
    "extra_params": {}
  },
  {
    "text": "A child's crayon drawing of a cat",
    "image_prompts": [],
    "stylize": 50,
    "chaos": 0,
    "weird": 0,
    "image_weight": 1.0,
    "seed": null,
    "stop": 100,
    "aspect_width": 1,
    "aspect_height": 1,
    "aspect_ratio": "1:1",
    "style": "raw",
    "version": "v5.2",
    "personalization": false,
    "quality": 1.0,
    "character_reference": [],
    "character_weight": 100,
    "style_reference": [],
    "style_weight": null,
    "style_version": 2,
    "repeat": null,
    "turbo": false,
    "relax": false,
    "tile": false,
    "negative_prompt": null,
    "extra_params": {}
  },
  {
    "text": "A child's crayon drawing of a cat",
    "image_prompts": [],
    "stylize": 750,
    "chaos": 0,
    "weird": 0,
    "image_weight": 1.0,
    "seed": null,
    "stop": 100,
    "aspect_width": 1,
    "aspect_height": 1,
    "aspect_ratio": "1:1",
    "style": "raw",
    "version": "v5.2",
    "personalization": false,
    "quality": 0.25,
    "character_reference": [],
    "character_weight": 100,
    "style_reference": [],
    "style_weight": null,
    "style_version": 2,
    "repeat": null,
    "turbo": false,
    "relax": false,
    "tile": false,
    "negative_prompt": null,
    "extra_params": {}
  },
  {
    "text": "A child's crayon drawing of a cat",
    "image_prompts": [],
    "stylize": 750,
    "chaos": 0,
    "weird": 0,
    "image_weight": 1.0,
    "seed": null,
    "stop": 100,
    "aspect_width": 1,
    "aspect_height": 1,
    "aspect_ratio": "1:1",
    "style": "raw",
    "version": "v5.2",
    "personalization": false,
    "quality": 1.0,
    "character_reference": [],
    "character_weight": 100,
    "style_reference": [],
    "style_weight": null,
    "style_version": 2,
    "repeat": null,
    "turbo": false,
    "relax": false,
    "tile": false,
    "negative_prompt": null,
    "extra_params": {}
  },
  {
    "text": "A child's crayon drawing of a cat",
    "image_prompts": [],
    "stylize": 50,
    "chaos": 0,
    "weird": 0,
    "image_weight": 1.0,
    "seed": null,
    "stop": 100,
    "aspect_width": 1,
    "aspect_height": 1,
    "aspect_ratio": "1:1",
    "style": "raw",
    "version": "v6",
    "personalization": false,
    "quality": 0.25,
    "character_reference": [],
    "character_weight": 100,
    "style_reference": [],
    "style_weight": null,
    "style_version": 2,
    "repeat": null,
    "turbo": false,
    "relax": false,
    "tile": false,
    "negative_prompt": null,
    "extra_params": {}
  },
  {
    "text": "A child's crayon drawing of a cat",
    "image_prompts": [],
    "stylize": 50,
    "chaos": 0,
    "weird": 0,
    "image_weight": 1.0,
    "seed": null,
    "stop": 100,
    "aspect_width": 1,
    "aspect_height": 1,
    "aspect_ratio": "1:1",
    "style": "raw",
    "version": "v6",
    "personalization": false,
    "quality": 1.0,
    "character_reference": [],
    "character_weight": 100,
    "style_reference": [],
    "style_weight": null,
    "style_version": 2,
    "repeat": null,
    "turbo": false,
    "relax": false,
    "tile": false,
    "negative_prompt": null,
    "extra_params": {}
  },
  {
    "text": "A child's crayon drawing of a cat",
    "image_prompts": [],
    "stylize": 750,
    "chaos": 0,
    "weird": 0,
    "image_weight": 1.0,
    "seed": null,
    "stop": 100,
    "aspect_width": 1,
    "aspect_height": 1,
    "aspect_ratio": "1:1",
    "style": "raw",
    "version": "v6",
    "personalization": false,
    "quality": 0.25,
    "character_reference": [],
    "character_weight": 100,
    "style_reference": [],
    "style_weight": null,
    "style_version": 2,
    "repeat": null,
    "turbo": false,
    "relax": false,
    "tile": false,
    "negative_prompt": null,
    "extra_params": {}
  },
  {
    "text": "A child's crayon drawing of a cat",
    "image_prompts": [],
    "stylize": 750,
    "chaos": 0,
    "weird": 0,
    "image_weight": 1.0,
    "seed": null,
    "stop": 100,
    "aspect_width": 1,
    "aspect_height": 1,
    "aspect_ratio": "1:1",
    "style": "raw",
    "version": "v6",
    "personalization": false,
    "quality": 1.0,
    "character_reference": [],
    "character_weight": 100,
    "style_reference": [],
    "style_weight": null,
    "style_version": 2,
    "repeat": null,
    "turbo": false,
    "relax": false,
    "tile": false,
    "negative_prompt": null,
    "extra_params": {}
  }
]======
A cyberpunk cat with a neon sign that says "Midjourney" --v 6 --stylize 500 --ar 1:1
{
  "text": "A cyberpunk cat with a neon sign that says \"Midjourney\"",
  "image_prompts": [],
  "stylize": 500,
  "chaos": 0,
  "weird": 0,
  "image_weight": 1.0,
  "seed": null,
  "stop": 100,
  "aspect_width": 1,
  "aspect_height": 1,
  "aspect_ratio": "1:1",
  "style": null,
  "version": "v6",
  "personalization": false,
  "quality": 1.0,
  "character_reference": [],
  "character_weight": 100,
  "style_reference": [],
  "style_weight": null,
  "style_version": 2,
  "repeat": null,
  "turbo": false,
  "relax": false,
  "tile": false,
  "negative_prompt": null,
  "extra_params": {}
}======
A pastel watercolor landscape with "/imagine" written in the clouds --v 6.1 --stylize 250 --ar 16:9
{
  "text": "A pastel watercolor landscape with \"/imagine\" written in the clouds",
  "image_prompts": [],
  "stylize": 250,
  "chaos": 0,
  "weird": 0,
  "image_weight": 1.0,
  "seed": null,
  "stop": 100,
  "aspect_width": 16,
  "aspect_height": 9,
  "aspect_ratio": "16:9",
  "style": null,
  "version": "v6.1",
  "personalization": false,
  "quality": 1.0,
  "character_reference": [],
  "character_weight": 100,
  "style_reference": [],
  "style_weight": null,
  "style_version": 2,
  "repeat": null,
  "turbo": false,
  "relax": false,
  "tile": false,
  "negative_prompt": null,
  "extra_params": {}
}======
A pattern of {pink and blue striped river stones, colorful watercolor fall leaves} --tile --chaos {25, 75}
[
  {
    "text": "A pattern of pink and blue striped river stones",
    "image_prompts": [],
    "stylize": 100,
    "chaos": 25,
    "weird": 0,
    "image_weight": 1.0,
    "seed": null,
    "stop": 100,
    "aspect_width": 1,
    "aspect_height": 1,
    "aspect_ratio": "1:1",
    "style": null,
    "version": null,
    "personalization": false,
    "quality": 1.0,
    "character_reference": [],
    "character_weight": 100,
    "style_reference": [],
    "style_weight": null,
    "style_version": 2,
    "repeat": null,
    "turbo": false,
    "relax": false,
    "tile": true,
    "negative_prompt": null,
    "extra_params": {}
  },
  {
    "text": "A pattern of pink and blue striped river stones",
    "image_prompts": [],
    "stylize": 100,
    "chaos": 75,
    "weird": 0,
    "image_weight": 1.0,
    "seed": null,
    "stop": 100,
    "aspect_width": 1,
    "aspect_height": 1,
    "aspect_ratio": "1:1",
    "style": null,
    "version": null,
    "personalization": false,
    "quality": 1.0,
    "character_reference": [],
    "character_weight": 100,
    "style_reference": [],
    "style_weight": null,
    "style_version": 2,
    "repeat": null,
    "turbo": false,
    "relax": false,
    "tile": true,
    "negative_prompt": null,
    "extra_params": {}
  },
  {
    "text": "A pattern of colorful watercolor fall leaves",
    "image_prompts": [],
    "stylize": 100,
    "chaos": 25,
    "weird": 0,
    "image_weight": 1.0,
    "seed": null,
    "stop": 100,
    "aspect_width": 1,
    "aspect_height": 1,
    "aspect_ratio": "1:1",
    "style": null,
    "version": null,
    "personalization": false,
    "quality": 1.0,
    "character_reference": [],
    "character_weight": 100,
    "style_reference": [],
    "style_weight": null,
    "style_version": 2,
    "repeat": null,
    "turbo": false,
    "relax": false,
    "tile": true,
    "negative_prompt": null,
    "extra_params": {}
  },
  {
    "text": "A pattern of colorful watercolor fall leaves",
    "image_prompts": [],
    "stylize": 100,
    "chaos": 75,
    "weird": 0,
    "image_weight": 1.0,
    "seed": null,
    "stop": 100,
    "aspect_width": 1,
    "aspect_height": 1,
    "aspect_ratio": "1:1",
    "style": null,
    "version": null,
    "personalization": false,
    "quality": 1.0,
    "character_reference": [],
    "character_weight": 100,
    "style_reference": [],
    "style_weight": null,
    "style_version": 2,
    "repeat": null,
    "turbo": false,
    "relax": false,
    "tile": true,
    "negative_prompt": null,
    "extra_params": {}
  }
]======
A pencil sketch of a dragon made of constellations --ar 2:3 --style random-64 --no color, shading
{
  "error": "1 validation error for MidjourneyPrompt\nstyle\n  Value error, Invalid style value. Must be one of: {'scenic', 'cute', 'original', 'raw', 'expressive'} [type=value_error, input_value='random-64', input_type=str]\n    For further information visit https://errors.pydantic.dev/2.10/v/value_error"
}======
A portrait of a melancholic robot butler --cref <image URL of classic butler> --cw {0, 50, 100} --sref <image URL of sad painting> --sw {100, 800}
[
  {
    "text": "A portrait of a melancholic robot butler",
    "image_prompts": [],
    "stylize": 100,
    "chaos": 0,
    "weird": 0,
    "image_weight": 1.0,
    "seed": null,
    "stop": 100,
    "aspect_width": 1,
    "aspect_height": 1,
    "aspect_ratio": "1:1",
    "style": null,
    "version": null,
    "personalization": false,
    "quality": 1.0,
    "character_reference": [
      "<image URL of classic butler>"
    ],
    "character_weight": 0,
    "style_reference": [
      "<image URL of sad painting>"
    ],
    "style_weight": 100,
    "style_version": 2,
    "repeat": null,
    "turbo": false,
    "relax": false,
    "tile": false,
    "negative_prompt": null,
    "extra_params": {}
  },
  {
    "text": "A portrait of a melancholic robot butler",
    "image_prompts": [],
    "stylize": 100,
    "chaos": 0,
    "weird": 0,
    "image_weight": 1.0,
    "seed": null,
    "stop": 100,
    "aspect_width": 1,
    "aspect_height": 1,
    "aspect_ratio": "1:1",
    "style": null,
    "version": null,
    "personalization": false,
    "quality": 1.0,
    "character_reference": [
      "<image URL of classic butler>"
    ],
    "character_weight": 0,
    "style_reference": [
      "<image URL of sad painting>"
    ],
    "style_weight": 800,
    "style_version": 2,
    "repeat": null,
    "turbo": false,
    "relax": false,
    "tile": false,
    "negative_prompt": null,
    "extra_params": {}
  },
  {
    "text": "A portrait of a melancholic robot butler",
    "image_prompts": [],
    "stylize": 100,
    "chaos": 0,
    "weird": 0,
    "image_weight": 1.0,
    "seed": null,
    "stop": 100,
    "aspect_width": 1,
    "aspect_height": 1,
    "aspect_ratio": "1:1",
    "style": null,
    "version": null,
    "personalization": false,
    "quality": 1.0,
    "character_reference": [
      "<image URL of classic butler>"
    ],
    "character_weight": 50,
    "style_reference": [
      "<image URL of sad painting>"
    ],
    "style_weight": 100,
    "style_version": 2,
    "repeat": null,
    "turbo": false,
    "relax": false,
    "tile": false,
    "negative_prompt": null,
    "extra_params": {}
  },
  {
    "text": "A portrait of a melancholic robot butler",
    "image_prompts": [],
    "stylize": 100,
    "chaos": 0,
    "weird": 0,
    "image_weight": 1.0,
    "seed": null,
    "stop": 100,
    "aspect_width": 1,
    "aspect_height": 1,
    "aspect_ratio": "1:1",
    "style": null,
    "version": null,
    "personalization": false,
    "quality": 1.0,
    "character_reference": [
      "<image URL of classic butler>"
    ],
    "character_weight": 50,
    "style_reference": [
      "<image URL of sad painting>"
    ],
    "style_weight": 800,
    "style_version": 2,
    "repeat": null,
    "turbo": false,
    "relax": false,
    "tile": false,
    "negative_prompt": null,
    "extra_params": {}
  },
  {
    "text": "A portrait of a melancholic robot butler",
    "image_prompts": [],
    "stylize": 100,
    "chaos": 0,
    "weird": 0,
    "image_weight": 1.0,
    "seed": null,
    "stop": 100,
    "aspect_width": 1,
    "aspect_height": 1,
    "aspect_ratio": "1:1",
    "style": null,
    "version": null,
    "personalization": false,
    "quality": 1.0,
    "character_reference": [
      "<image URL of classic butler>"
    ],
    "character_weight": 100,
    "style_reference": [
      "<image URL of sad painting>"
    ],
    "style_weight": 100,
    "style_version": 2,
    "repeat": null,
    "turbo": false,
    "relax": false,
    "tile": false,
    "negative_prompt": null,
    "extra_params": {}
  },
  {
    "text": "A portrait of a melancholic robot butler",
    "image_prompts": [],
    "stylize": 100,
    "chaos": 0,
    "weird": 0,
    "image_weight": 1.0,
    "seed": null,
    "stop": 100,
    "aspect_width": 1,
    "aspect_height": 1,
    "aspect_ratio": "1:1",
    "style": null,
    "version": null,
    "personalization": false,
    "quality": 1.0,
    "character_reference": [
      "<image URL of classic butler>"
    ],
    "character_weight": 100,
    "style_reference": [
      "<image URL of sad painting>"
    ],
    "style_weight": 800,
    "style_version": 2,
    "repeat": null,
    "turbo": false,
    "relax": false,
    "tile": false,
    "negative_prompt": null,
    "extra_params": {}
  }
]======
A surreal sculpture made of clockwork oranges and melting clocks --weird {500, 1500} --chaos 80 --stop {30, 70}
[
  {
    "text": "A surreal sculpture made of clockwork oranges and melting clocks",
    "image_prompts": [],
    "stylize": 100,
    "chaos": 80,
    "weird": 500,
    "image_weight": 1.0,
    "seed": null,
    "stop": 30,
    "aspect_width": 1,
    "aspect_height": 1,
    "aspect_ratio": "1:1",
    "style": null,
    "version": null,
    "personalization": false,
    "quality": 1.0,
    "character_reference": [],
    "character_weight": 100,
    "style_reference": [],
    "style_weight": null,
    "style_version": 2,
    "repeat": null,
    "turbo": false,
    "relax": false,
    "tile": false,
    "negative_prompt": null,
    "extra_params": {}
  },
  {
    "text": "A surreal sculpture made of clockwork oranges and melting clocks",
    "image_prompts": [],
    "stylize": 100,
    "chaos": 80,
    "weird": 500,
    "image_weight": 1.0,
    "seed": null,
    "stop": 70,
    "aspect_width": 1,
    "aspect_height": 1,
    "aspect_ratio": "1:1",
    "style": null,
    "version": null,
    "personalization": false,
    "quality": 1.0,
    "character_reference": [],
    "character_weight": 100,
    "style_reference": [],
    "style_weight": null,
    "style_version": 2,
    "repeat": null,
    "turbo": false,
    "relax": false,
    "tile": false,
    "negative_prompt": null,
    "extra_params": {}
  },
  {
    "text": "A surreal sculpture made of clockwork oranges and melting clocks",
    "image_prompts": [],
    "stylize": 100,
    "chaos": 80,
    "weird": 1500,
    "image_weight": 1.0,
    "seed": null,
    "stop": 30,
    "aspect_width": 1,
    "aspect_height": 1,
    "aspect_ratio": "1:1",
    "style": null,
    "version": null,
    "personalization": false,
    "quality": 1.0,
    "character_reference": [],
    "character_weight": 100,
    "style_reference": [],
    "style_weight": null,
    "style_version": 2,
    "repeat": null,
    "turbo": false,
    "relax": false,
    "tile": false,
    "negative_prompt": null,
    "extra_params": {}
  },
  {
    "text": "A surreal sculpture made of clockwork oranges and melting clocks",
    "image_prompts": [],
    "stylize": 100,
    "chaos": 80,
    "weird": 1500,
    "image_weight": 1.0,
    "seed": null,
    "stop": 70,
    "aspect_width": 1,
    "aspect_height": 1,
    "aspect_ratio": "1:1",
    "style": null,
    "version": null,
    "personalization": false,
    "quality": 1.0,
    "character_reference": [],
    "character_weight": 100,
    "style_reference": [],
    "style_weight": null,
    "style_version": 2,
    "repeat": null,
    "turbo": false,
    "relax": false,
    "tile": false,
    "negative_prompt": null,
    "extra_params": {}
  }
]======
A vibrant California poppies image --aspect {5:4, 7:4} --chaos {10, 50} --quality {.5, 1} --seed {random, 4294967295}
{
  "error": "Invalid value for seed: random - Invalid numeric value: could not convert string to float: 'random'"
}======
A {continuous line, loose gestural} charcoal drawing of a value study of a cyborg geisha --stop 50 --q 0.5
[
  {
    "text": "A continuous line charcoal drawing of a value study of a cyborg geisha",
    "image_prompts": [],
    "stylize": 100,
    "chaos": 0,
    "weird": 0,
    "image_weight": 1.0,
    "seed": null,
    "stop": 50,
    "aspect_width": 1,
    "aspect_height": 1,
    "aspect_ratio": "1:1",
    "style": null,
    "version": null,
    "personalization": false,
    "quality": 0.5,
    "character_reference": [],
    "character_weight": 100,
    "style_reference": [],
    "style_weight": null,
    "style_version": 2,
    "repeat": null,
    "turbo": false,
    "relax": false,
    "tile": false,
    "negative_prompt": null,
    "extra_params": {}
  },
  {
    "text": "A loose gestural charcoal drawing of a value study of a cyborg geisha",
    "image_prompts": [],
    "stylize": 100,
    "chaos": 0,
    "weird": 0,
    "image_weight": 1.0,
    "seed": null,
    "stop": 50,
    "aspect_width": 1,
    "aspect_height": 1,
    "aspect_ratio": "1:1",
    "style": null,
    "version": null,
    "personalization": false,
    "quality": 0.5,
    "character_reference": [],
    "character_weight": 100,
    "style_reference": [],
    "style_weight": null,
    "style_version": 2,
    "repeat": null,
    "turbo": false,
    "relax": false,
    "tile": false,
    "negative_prompt": null,
    "extra_params": {}
  }
]======
A {dreary, vibrant} cyberpunk cityscape --ar {16:9, 1:1} --style {raw, random} --chaos {0, 100}
{
  "error": "1 validation error for MidjourneyPrompt\nstyle\n  Value error, Invalid style value. Must be one of: {'scenic', 'raw', 'cute', 'original', 'expressive'} [type=value_error, input_value='random', input_type=str]\n    For further information visit https://errors.pydantic.dev/2.10/v/value_error"
}======
A {Millennial Pink, Acid Green, Ebony} colored cat --s 250 --style random-16 --no monochrome
{
  "error": "1 validation error for MidjourneyPrompt\nstyle\n  Value error, Invalid style value. Must be one of: {'cute', 'expressive', 'original', 'raw', 'scenic'} [type=value_error, input_value='random-16', input_type=str]\n    For further information visit https://errors.pydantic.dev/2.10/v/value_error"
}======
A {pastel, blacklight} painting of a {determined, sleepy} sloth riding a unicorn through a {crystal forest, salt flat} --chaos 25
[
  {
    "text": "A pastel painting of a determined sloth riding a unicorn through a crystal forest",
    "image_prompts": [],
    "stylize": 100,
    "chaos": 25,
    "weird": 0,
    "image_weight": 1.0,
    "seed": null,
    "stop": 100,
    "aspect_width": 1,
    "aspect_height": 1,
    "aspect_ratio": "1:1",
    "style": null,
    "version": null,
    "personalization": false,
    "quality": 1.0,
    "character_reference": [],
    "character_weight": 100,
    "style_reference": [],
    "style_weight": null,
    "style_version": 2,
    "repeat": null,
    "turbo": false,
    "relax": false,
    "tile": false,
    "negative_prompt": null,
    "extra_params": {}
  },
  {
    "text": "A pastel painting of a determined sloth riding a unicorn through a salt flat",
    "image_prompts": [],
    "stylize": 100,
    "chaos": 25,
    "weird": 0,
    "image_weight": 1.0,
    "seed": null,
    "stop": 100,
    "aspect_width": 1,
    "aspect_height": 1,
    "aspect_ratio": "1:1",
    "style": null,
    "version": null,
    "personalization": false,
    "quality": 1.0,
    "character_reference": [],
    "character_weight": 100,
    "style_reference": [],
    "style_weight": null,
    "style_version": 2,
    "repeat": null,
    "turbo": false,
    "relax": false,
    "tile": false,
    "negative_prompt": null,
    "extra_params": {}
  },
  {
    "text": "A pastel painting of a sleepy sloth riding a unicorn through a crystal forest",
    "image_prompts": [],
    "stylize": 100,
    "chaos": 25,
    "weird": 0,
    "image_weight": 1.0,
    "seed": null,
    "stop": 100,
    "aspect_width": 1,
    "aspect_height": 1,
    "aspect_ratio": "1:1",
    "style": null,
    "version": null,
    "personalization": false,
    "quality": 1.0,
    "character_reference": [],
    "character_weight": 100,
    "style_reference": [],
    "style_weight": null,
    "style_version": 2,
    "repeat": null,
    "turbo": false,
    "relax": false,
    "tile": false,
    "negative_prompt": null,
    "extra_params": {}
  },
  {
    "text": "A pastel painting of a sleepy sloth riding a unicorn through a salt flat",
    "image_prompts": [],
    "stylize": 100,
    "chaos": 25,
    "weird": 0,
    "image_weight": 1.0,
    "seed": null,
    "stop": 100,
    "aspect_width": 1,
    "aspect_height": 1,
    "aspect_ratio": "1:1",
    "style": null,
    "version": null,
    "personalization": false,
    "quality": 1.0,
    "character_reference": [],
    "character_weight": 100,
    "style_reference": [],
    "style_weight": null,
    "style_version": 2,
    "repeat": null,
    "turbo": false,
    "relax": false,
    "tile": false,
    "negative_prompt": null,
    "extra_params": {}
  },
  {
    "text": "A blacklight painting of a determined sloth riding a unicorn through a crystal forest",
    "image_prompts": [],
    "stylize": 100,
    "chaos": 25,
    "weird": 0,
    "image_weight": 1.0,
    "seed": null,
    "stop": 100,
    "aspect_width": 1,
    "aspect_height": 1,
    "aspect_ratio": "1:1",
    "style": null,
    "version": null,
    "personalization": false,
    "quality": 1.0,
    "character_reference": [],
    "character_weight": 100,
    "style_reference": [],
    "style_weight": null,
    "style_version": 2,
    "repeat": null,
    "turbo": false,
    "relax": false,
    "tile": false,
    "negative_prompt": null,
    "extra_params": {}
  },
  {
    "text": "A blacklight painting of a determined sloth riding a unicorn through a salt flat",
    "image_prompts": [],
    "stylize": 100,
    "chaos": 25,
    "weird": 0,
    "image_weight": 1.0,
    "seed": null,
    "stop": 100,
    "aspect_width": 1,
    "aspect_height": 1,
    "aspect_ratio": "1:1",
    "style": null,
    "version": null,
    "personalization": false,
    "quality": 1.0,
    "character_reference": [],
    "character_weight": 100,
    "style_reference": [],
    "style_weight": null,
    "style_version": 2,
    "repeat": null,
    "turbo": false,
    "relax": false,
    "tile": false,
    "negative_prompt": null,
    "extra_params": {}
  },
  {
    "text": "A blacklight painting of a sleepy sloth riding a unicorn through a crystal forest",
    "image_prompts": [],
    "stylize": 100,
    "chaos": 25,
    "weird": 0,
    "image_weight": 1.0,
    "seed": null,
    "stop": 100,
    "aspect_width": 1,
    "aspect_height": 1,
    "aspect_ratio": "1:1",
    "style": null,
    "version": null,
    "personalization": false,
    "quality": 1.0,
    "character_reference": [],
    "character_weight": 100,
    "style_reference": [],
    "style_weight": null,
    "style_version": 2,
    "repeat": null,
    "turbo": false,
    "relax": false,
    "tile": false,
    "negative_prompt": null,
    "extra_params": {}
  },
  {
    "text": "A blacklight painting of a sleepy sloth riding a unicorn through a salt flat",
    "image_prompts": [],
    "stylize": 100,
    "chaos": 25,
    "weird": 0,
    "image_weight": 1.0,
    "seed": null,
    "stop": 100,
    "aspect_width": 1,
    "aspect_height": 1,
    "aspect_ratio": "1:1",
    "style": null,
    "version": null,
    "personalization": false,
    "quality": 1.0,
    "character_reference": [],
    "character_weight": 100,
    "style_reference": [],
    "style_weight": null,
    "style_version": 2,
    "repeat": null,
    "turbo": false,
    "relax": false,
    "tile": false,
    "negative_prompt": null,
    "extra_params": {}
  }
]======
A {pixel art, acrylic pour} style cat --style random-128 --weird 1000 --no fur, whiskers
{
  "error": "1 validation error for MidjourneyPrompt\nstyle\n  Value error, Invalid style value. Must be one of: {'cute', 'scenic', 'raw', 'expressive', 'original'} [type=value_error, input_value='random-128', input_type=str]\n    For further information visit https://errors.pydantic.dev/2.10/v/value_error"
}======
An impressionistic watercolor of a cat playing chess with a dog --ar 4:3 --s 50 --no board, pieces --style raw
{
  "text": "An impressionistic watercolor of a cat playing chess with a dog",
  "image_prompts": [],
  "stylize": 50,
  "chaos": 0,
  "weird": 0,
  "image_weight": 1.0,
  "seed": null,
  "stop": 100,
  "aspect_width": 4,
  "aspect_height": 3,
  "aspect_ratio": "4:3",
  "style": "raw",
  "version": null,
  "personalization": false,
  "quality": 1.0,
  "character_reference": [],
  "character_weight": 100,
  "style_reference": [],
  "style_weight": null,
  "style_version": 2,
  "repeat": null,
  "turbo": false,
  "relax": false,
  "tile": false,
  "negative_prompt": "board, pieces",
  "extra_params": {}
}======
cheese:: cake:: painting multi-prompt --negative weight fruit::-.5 --version 4 --chaos 60
{
  "text": "cheese:: cake:: painting multi-prompt",
  "image_prompts": [],
  "stylize": 100,
  "chaos": 60,
  "weird": 0,
  "image_weight": 1.0,
  "seed": null,
  "stop": 100,
  "aspect_width": 1,
  "aspect_height": 1,
  "aspect_ratio": "1:1",
  "style": null,
  "version": "v4",
  "personalization": false,
  "quality": 1.0,
  "character_reference": [],
  "character_weight": 100,
  "style_reference": [],
  "style_weight": null,
  "style_version": 2,
  "repeat": null,
  "turbo": false,
  "relax": false,
  "tile": false,
  "negative_prompt": null,
  "extra_params": {
    "negative": "weight fruit::-.5"
  }
}======
Clockwork chicken --weird {750, 1750, 2750} --stylize {200, 600, 900} --ar {2:3, 3:2}
[
  {
    "text": "Clockwork chicken",
    "image_prompts": [],
    "stylize": 200,
    "chaos": 0,
    "weird": 750,
    "image_weight": 1.0,
    "seed": null,
    "stop": 100,
    "aspect_width": 2,
    "aspect_height": 3,
    "aspect_ratio": "2:3",
    "style": null,
    "version": null,
    "personalization": false,
    "quality": 1.0,
    "character_reference": [],
    "character_weight": 100,
    "style_reference": [],
    "style_weight": null,
    "style_version": 2,
    "repeat": null,
    "turbo": false,
    "relax": false,
    "tile": false,
    "negative_prompt": null,
    "extra_params": {}
  },
  {
    "text": "Clockwork chicken",
    "image_prompts": [],
    "stylize": 200,
    "chaos": 0,
    "weird": 750,
    "image_weight": 1.0,
    "seed": null,
    "stop": 100,
    "aspect_width": 3,
    "aspect_height": 2,
    "aspect_ratio": "3:2",
    "style": null,
    "version": null,
    "personalization": false,
    "quality": 1.0,
    "character_reference": [],
    "character_weight": 100,
    "style_reference": [],
    "style_weight": null,
    "style_version": 2,
    "repeat": null,
    "turbo": false,
    "relax": false,
    "tile": false,
    "negative_prompt": null,
    "extra_params": {}
  },
  {
    "text": "Clockwork chicken",
    "image_prompts": [],
    "stylize": 600,
    "chaos": 0,
    "weird": 750,
    "image_weight": 1.0,
    "seed": null,
    "stop": 100,
    "aspect_width": 2,
    "aspect_height": 3,
    "aspect_ratio": "2:3",
    "style": null,
    "version": null,
    "personalization": false,
    "quality": 1.0,
    "character_reference": [],
    "character_weight": 100,
    "style_reference": [],
    "style_weight": null,
    "style_version": 2,
    "repeat": null,
    "turbo": false,
    "relax": false,
    "tile": false,
    "negative_prompt": null,
    "extra_params": {}
  },
  {
    "text": "Clockwork chicken",
    "image_prompts": [],
    "stylize": 600,
    "chaos": 0,
    "weird": 750,
    "image_weight": 1.0,
    "seed": null,
    "stop": 100,
    "aspect_width": 3,
    "aspect_height": 2,
    "aspect_ratio": "3:2",
    "style": null,
    "version": null,
    "personalization": false,
    "quality": 1.0,
    "character_reference": [],
    "character_weight": 100,
    "style_reference": [],
    "style_weight": null,
    "style_version": 2,
    "repeat": null,
    "turbo": false,
    "relax": false,
    "tile": false,
    "negative_prompt": null,
    "extra_params": {}
  },
  {
    "text": "Clockwork chicken",
    "image_prompts": [],
    "stylize": 900,
    "chaos": 0,
    "weird": 750,
    "image_weight": 1.0,
    "seed": null,
    "stop": 100,
    "aspect_width": 2,
    "aspect_height": 3,
    "aspect_ratio": "2:3",
    "style": null,
    "version": null,
    "personalization": false,
    "quality": 1.0,
    "character_reference": [],
    "character_weight": 100,
    "style_reference": [],
    "style_weight": null,
    "style_version": 2,
    "repeat": null,
    "turbo": false,
    "relax": false,
    "tile": false,
    "negative_prompt": null,
    "extra_params": {}
  },
  {
    "text": "Clockwork chicken",
    "image_prompts": [],
    "stylize": 900,
    "chaos": 0,
    "weird": 750,
    "image_weight": 1.0,
    "seed": null,
    "stop": 100,
    "aspect_width": 3,
    "aspect_height": 2,
    "aspect_ratio": "3:2",
    "style": null,
    "version": null,
    "personalization": false,
    "quality": 1.0,
    "character_reference": [],
    "character_weight": 100,
    "style_reference": [],
    "style_weight": null,
    "style_version": 2,
    "repeat": null,
    "turbo": false,
    "relax": false,
    "tile": false,
    "negative_prompt": null,
    "extra_params": {}
  },
  {
    "text": "Clockwork chicken",
    "image_prompts": [],
    "stylize": 200,
    "chaos": 0,
    "weird": 1750,
    "image_weight": 1.0,
    "seed": null,
    "stop": 100,
    "aspect_width": 2,
    "aspect_height": 3,
    "aspect_ratio": "2:3",
    "style": null,
    "version": null,
    "personalization": false,
    "quality": 1.0,
    "character_reference": [],
    "character_weight": 100,
    "style_reference": [],
    "style_weight": null,
    "style_version": 2,
    "repeat": null,
    "turbo": false,
    "relax": false,
    "tile": false,
    "negative_prompt": null,
    "extra_params": {}
  },
  {
    "text": "Clockwork chicken",
    "image_prompts": [],
    "stylize": 200,
    "chaos": 0,
    "weird": 1750,
    "image_weight": 1.0,
    "seed": null,
    "stop": 100,
    "aspect_width": 3,
    "aspect_height": 2,
    "aspect_ratio": "3:2",
    "style": null,
    "version": null,
    "personalization": false,
    "quality": 1.0,
    "character_reference": [],
    "character_weight": 100,
    "style_reference": [],
    "style_weight": null,
    "style_version": 2,
    "repeat": null,
    "turbo": false,
    "relax": false,
    "tile": false,
    "negative_prompt": null,
    "extra_params": {}
  },
  {
    "text": "Clockwork chicken",
    "image_prompts": [],
    "stylize": 600,
    "chaos": 0,
    "weird": 1750,
    "image_weight": 1.0,
    "seed": null,
    "stop": 100,
    "aspect_width": 2,
    "aspect_height": 3,
    "aspect_ratio": "2:3",
    "style": null,
    "version": null,
    "personalization": false,
    "quality": 1.0,
    "character_reference": [],
    "character_weight": 100,
    "style_reference": [],
    "style_weight": null,
    "style_version": 2,
    "repeat": null,
    "turbo": false,
    "relax": false,
    "tile": false,
    "negative_prompt": null,
    "extra_params": {}
  },
  {
    "text": "Clockwork chicken",
    "image_prompts": [],
    "stylize": 600,
    "chaos": 0,
    "weird": 1750,
    "image_weight": 1.0,
    "seed": null,
    "stop": 100,
    "aspect_width": 3,
    "aspect_height": 2,
    "aspect_ratio": "3:2",
    "style": null,
    "version": null,
    "personalization": false,
    "quality": 1.0,
    "character_reference": [],
    "character_weight": 100,
    "style_reference": [],
    "style_weight": null,
    "style_version": 2,
    "repeat": null,
    "turbo": false,
    "relax": false,
    "tile": false,
    "negative_prompt": null,
    "extra_params": {}
  },
  {
    "text": "Clockwork chicken",
    "image_prompts": [],
    "stylize": 900,
    "chaos": 0,
    "weird": 1750,
    "image_weight": 1.0,
    "seed": null,
    "stop": 100,
    "aspect_width": 2,
    "aspect_height": 3,
    "aspect_ratio": "2:3",
    "style": null,
    "version": null,
    "personalization": false,
    "quality": 1.0,
    "character_reference": [],
    "character_weight": 100,
    "style_reference": [],
    "style_weight": null,
    "style_version": 2,
    "repeat": null,
    "turbo": false,
    "relax": false,
    "tile": false,
    "negative_prompt": null,
    "extra_params": {}
  },
  {
    "text": "Clockwork chicken",
    "image_prompts": [],
    "stylize": 900,
    "chaos": 0,
    "weird": 1750,
    "image_weight": 1.0,
    "seed": null,
    "stop": 100,
    "aspect_width": 3,
    "aspect_height": 2,
    "aspect_ratio": "3:2",
    "style": null,
    "version": null,
    "personalization": false,
    "quality": 1.0,
    "character_reference": [],
    "character_weight": 100,
    "style_reference": [],
    "style_weight": null,
    "style_version": 2,
    "repeat": null,
    "turbo": false,
    "relax": false,
    "tile": false,
    "negative_prompt": null,
    "extra_params": {}
  },
  {
    "text": "Clockwork chicken",
    "image_prompts": [],
    "stylize": 200,
    "chaos": 0,
    "weird": 2750,
    "image_weight": 1.0,
    "seed": null,
    "stop": 100,
    "aspect_width": 2,
    "aspect_height": 3,
    "aspect_ratio": "2:3",
    "style": null,
    "version": null,
    "personalization": false,
    "quality": 1.0,
    "character_reference": [],
    "character_weight": 100,
    "style_reference": [],
    "style_weight": null,
    "style_version": 2,
    "repeat": null,
    "turbo": false,
    "relax": false,
    "tile": false,
    "negative_prompt": null,
    "extra_params": {}
  },
  {
    "text": "Clockwork chicken",
    "image_prompts": [],
    "stylize": 200,
    "chaos": 0,
    "weird": 2750,
    "image_weight": 1.0,
    "seed": null,
    "stop": 100,
    "aspect_width": 3,
    "aspect_height": 2,
    "aspect_ratio": "3:2",
    "style": null,
    "version": null,
    "personalization": false,
    "quality": 1.0,
    "character_reference": [],
    "character_weight": 100,
    "style_reference": [],
    "style_weight": null,
    "style_version": 2,
    "repeat": null,
    "turbo": false,
    "relax": false,
    "tile": false,
    "negative_prompt": null,
    "extra_params": {}
  },
  {
    "text": "Clockwork chicken",
    "image_prompts": [],
    "stylize": 600,
    "chaos": 0,
    "weird": 2750,
    "image_weight": 1.0,
    "seed": null,
    "stop": 100,
    "aspect_width": 2,
    "aspect_height": 3,
    "aspect_ratio": "2:3",
    "style": null,
    "version": null,
    "personalization": false,
    "quality": 1.0,
    "character_reference": [],
    "character_weight": 100,
    "style_reference": [],
    "style_weight": null,
    "style_version": 2,
    "repeat": null,
    "turbo": false,
    "relax": false,
    "tile": false,
    "negative_prompt": null,
    "extra_params": {}
  },
  {
    "text": "Clockwork chicken",
    "image_prompts": [],
    "stylize": 600,
    "chaos": 0,
    "weird": 2750,
    "image_weight": 1.0,
    "seed": null,
    "stop": 100,
    "aspect_width": 3,
    "aspect_height": 2,
    "aspect_ratio": "3:2",
    "style": null,
    "version": null,
    "personalization": false,
    "quality": 1.0,
    "character_reference": [],
    "character_weight": 100,
    "style_reference": [],
    "style_weight": null,
    "style_version": 2,
    "repeat": null,
    "turbo": false,
    "relax": false,
    "tile": false,
    "negative_prompt": null,
    "extra_params": {}
  },
  {
    "text": "Clockwork chicken",
    "image_prompts": [],
    "stylize": 900,
    "chaos": 0,
    "weird": 2750,
    "image_weight": 1.0,
    "seed": null,
    "stop": 100,
    "aspect_width": 2,
    "aspect_height": 3,
    "aspect_ratio": "2:3",
    "style": null,
    "version": null,
    "personalization": false,
    "quality": 1.0,
    "character_reference": [],
    "character_weight": 100,
    "style_reference": [],
    "style_weight": null,
    "style_version": 2,
    "repeat": null,
    "turbo": false,
    "relax": false,
    "tile": false,
    "negative_prompt": null,
    "extra_params": {}
  },
  {
    "text": "Clockwork chicken",
    "image_prompts": [],
    "stylize": 900,
    "chaos": 0,
    "weird": 2750,
    "image_weight": 1.0,
    "seed": null,
    "stop": 100,
    "aspect_width": 3,
    "aspect_height": 2,
    "aspect_ratio": "3:2",
    "style": null,
    "version": null,
    "personalization": false,
    "quality": 1.0,
    "character_reference": [],
    "character_weight": 100,
    "style_reference": [],
    "style_weight": null,
    "style_version": 2,
    "repeat": null,
    "turbo": false,
    "relax": false,
    "tile": false,
    "negative_prompt": null,
    "extra_params": {}
  }
]======
Cyanotype cat --weird {250, 1000, 2000} --stylize {100, 500, 1000} --chaos {10, 50, 90}
[
  {
    "text": "Cyanotype cat",
    "image_prompts": [],
    "stylize": 100,
    "chaos": 10,
    "weird": 250,
    "image_weight": 1.0,
    "seed": null,
    "stop": 100,
    "aspect_width": 1,
    "aspect_height": 1,
    "aspect_ratio": "1:1",
    "style": null,
    "version": null,
    "personalization": false,
    "quality": 1.0,
    "character_reference": [],
    "character_weight": 100,
    "style_reference": [],
    "style_weight": null,
    "style_version": 2,
    "repeat": null,
    "turbo": false,
    "relax": false,
    "tile": false,
    "negative_prompt": null,
    "extra_params": {}
  },
  {
    "text": "Cyanotype cat",
    "image_prompts": [],
    "stylize": 100,
    "chaos": 50,
    "weird": 250,
    "image_weight": 1.0,
    "seed": null,
    "stop": 100,
    "aspect_width": 1,
    "aspect_height": 1,
    "aspect_ratio": "1:1",
    "style": null,
    "version": null,
    "personalization": false,
    "quality": 1.0,
    "character_reference": [],
    "character_weight": 100,
    "style_reference": [],
    "style_weight": null,
    "style_version": 2,
    "repeat": null,
    "turbo": false,
    "relax": false,
    "tile": false,
    "negative_prompt": null,
    "extra_params": {}
  },
  {
    "text": "Cyanotype cat",
    "image_prompts": [],
    "stylize": 100,
    "chaos": 90,
    "weird": 250,
    "image_weight": 1.0,
    "seed": null,
    "stop": 100,
    "aspect_width": 1,
    "aspect_height": 1,
    "aspect_ratio": "1:1",
    "style": null,
    "version": null,
    "personalization": false,
    "quality": 1.0,
    "character_reference": [],
    "character_weight": 100,
    "style_reference": [],
    "style_weight": null,
    "style_version": 2,
    "repeat": null,
    "turbo": false,
    "relax": false,
    "tile": false,
    "negative_prompt": null,
    "extra_params": {}
  },
  {
    "text": "Cyanotype cat",
    "image_prompts": [],
    "stylize": 500,
    "chaos": 10,
    "weird": 250,
    "image_weight": 1.0,
    "seed": null,
    "stop": 100,
    "aspect_width": 1,
    "aspect_height": 1,
    "aspect_ratio": "1:1",
    "style": null,
    "version": null,
    "personalization": false,
    "quality": 1.0,
    "character_reference": [],
    "character_weight": 100,
    "style_reference": [],
    "style_weight": null,
    "style_version": 2,
    "repeat": null,
    "turbo": false,
    "relax": false,
    "tile": false,
    "negative_prompt": null,
    "extra_params": {}
  },
  {
    "text": "Cyanotype cat",
    "image_prompts": [],
    "stylize": 500,
    "chaos": 50,
    "weird": 250,
    "image_weight": 1.0,
    "seed": null,
    "stop": 100,
    "aspect_width": 1,
    "aspect_height": 1,
    "aspect_ratio": "1:1",
    "style": null,
    "version": null,
    "personalization": false,
    "quality": 1.0,
    "character_reference": [],
    "character_weight": 100,
    "style_reference": [],
    "style_weight": null,
    "style_version": 2,
    "repeat": null,
    "turbo": false,
    "relax": false,
    "tile": false,
    "negative_prompt": null,
    "extra_params": {}
  },
  {
    "text": "Cyanotype cat",
    "image_prompts": [],
    "stylize": 500,
    "chaos": 90,
    "weird": 250,
    "image_weight": 1.0,
    "seed": null,
    "stop": 100,
    "aspect_width": 1,
    "aspect_height": 1,
    "aspect_ratio": "1:1",
    "style": null,
    "version": null,
    "personalization": false,
    "quality": 1.0,
    "character_reference": [],
    "character_weight": 100,
    "style_reference": [],
    "style_weight": null,
    "style_version": 2,
    "repeat": null,
    "turbo": false,
    "relax": false,
    "tile": false,
    "negative_prompt": null,
    "extra_params": {}
  },
  {
    "text": "Cyanotype cat",
    "image_prompts": [],
    "stylize": 1000,
    "chaos": 10,
    "weird": 250,
    "image_weight": 1.0,
    "seed": null,
    "stop": 100,
    "aspect_width": 1,
    "aspect_height": 1,
    "aspect_ratio": "1:1",
    "style": null,
    "version": null,
    "personalization": false,
    "quality": 1.0,
    "character_reference": [],
    "character_weight": 100,
    "style_reference": [],
    "style_weight": null,
    "style_version": 2,
    "repeat": null,
    "turbo": false,
    "relax": false,
    "tile": false,
    "negative_prompt": null,
    "extra_params": {}
  },
  {
    "text": "Cyanotype cat",
    "image_prompts": [],
    "stylize": 1000,
    "chaos": 50,
    "weird": 250,
    "image_weight": 1.0,
    "seed": null,
    "stop": 100,
    "aspect_width": 1,
    "aspect_height": 1,
    "aspect_ratio": "1:1",
    "style": null,
    "version": null,
    "personalization": false,
    "quality": 1.0,
    "character_reference": [],
    "character_weight": 100,
    "style_reference": [],
    "style_weight": null,
    "style_version": 2,
    "repeat": null,
    "turbo": false,
    "relax": false,
    "tile": false,
    "negative_prompt": null,
    "extra_params": {}
  },
  {
    "text": "Cyanotype cat",
    "image_prompts": [],
    "stylize": 1000,
    "chaos": 90,
    "weird": 250,
    "image_weight": 1.0,
    "seed": null,
    "stop": 100,
    "aspect_width": 1,
    "aspect_height": 1,
    "aspect_ratio": "1:1",
    "style": null,
    "version": null,
    "personalization": false,
    "quality": 1.0,
    "character_reference": [],
    "character_weight": 100,
    "style_reference": [],
    "style_weight": null,
    "style_version": 2,
    "repeat": null,
    "turbo": false,
    "relax": false,
    "tile": false,
    "negative_prompt": null,
    "extra_params": {}
  },
  {
    "text": "Cyanotype cat",
    "image_prompts": [],
    "stylize": 100,
    "chaos": 10,
    "weird": 1000,
    "image_weight": 1.0,
    "seed": null,
    "stop": 100,
    "aspect_width": 1,
    "aspect_height": 1,
    "aspect_ratio": "1:1",
    "style": null,
    "version": null,
    "personalization": false,
    "quality": 1.0,
    "character_reference": [],
    "character_weight": 100,
    "style_reference": [],
    "style_weight": null,
    "style_version": 2,
    "repeat": null,
    "turbo": false,
    "relax": false,
    "tile": false,
    "negative_prompt": null,
    "extra_params": {}
  },
  {
    "text": "Cyanotype cat",
    "image_prompts": [],
    "stylize": 100,
    "chaos": 50,
    "weird": 1000,
    "image_weight": 1.0,
    "seed": null,
    "stop": 100,
    "aspect_width": 1,
    "aspect_height": 1,
    "aspect_ratio": "1:1",
    "style": null,
    "version": null,
    "personalization": false,
    "quality": 1.0,
    "character_reference": [],
    "character_weight": 100,
    "style_reference": [],
    "style_weight": null,
    "style_version": 2,
    "repeat": null,
    "turbo": false,
    "relax": false,
    "tile": false,
    "negative_prompt": null,
    "extra_params": {}
  },
  {
    "text": "Cyanotype cat",
    "image_prompts": [],
    "stylize": 100,
    "chaos": 90,
    "weird": 1000,
    "image_weight": 1.0,
    "seed": null,
    "stop": 100,
    "aspect_width": 1,
    "aspect_height": 1,
    "aspect_ratio": "1:1",
    "style": null,
    "version": null,
    "personalization": false,
    "quality": 1.0,
    "character_reference": [],
    "character_weight": 100,
    "style_reference": [],
    "style_weight": null,
    "style_version": 2,
    "repeat": null,
    "turbo": false,
    "relax": false,
    "tile": false,
    "negative_prompt": null,
    "extra_params": {}
  },
  {
    "text": "Cyanotype cat",
    "image_prompts": [],
    "stylize": 500,
    "chaos": 10,
    "weird": 1000,
    "image_weight": 1.0,
    "seed": null,
    "stop": 100,
    "aspect_width": 1,
    "aspect_height": 1,
    "aspect_ratio": "1:1",
    "style": null,
    "version": null,
    "personalization": false,
    "quality": 1.0,
    "character_reference": [],
    "character_weight": 100,
    "style_reference": [],
    "style_weight": null,
    "style_version": 2,
    "repeat": null,
    "turbo": false,
    "relax": false,
    "tile": false,
    "negative_prompt": null,
    "extra_params": {}
  },
  {
    "text": "Cyanotype cat",
    "image_prompts": [],
    "stylize": 500,
    "chaos": 50,
    "weird": 1000,
    "image_weight": 1.0,
    "seed": null,
    "stop": 100,
    "aspect_width": 1,
    "aspect_height": 1,
    "aspect_ratio": "1:1",
    "style": null,
    "version": null,
    "personalization": false,
    "quality": 1.0,
    "character_reference": [],
    "character_weight": 100,
    "style_reference": [],
    "style_weight": null,
    "style_version": 2,
    "repeat": null,
    "turbo": false,
    "relax": false,
    "tile": false,
    "negative_prompt": null,
    "extra_params": {}
  },
  {
    "text": "Cyanotype cat",
    "image_prompts": [],
    "stylize": 500,
    "chaos": 90,
    "weird": 1000,
    "image_weight": 1.0,
    "seed": null,
    "stop": 100,
    "aspect_width": 1,
    "aspect_height": 1,
    "aspect_ratio": "1:1",
    "style": null,
    "version": null,
    "personalization": false,
    "quality": 1.0,
    "character_reference": [],
    "character_weight": 100,
    "style_reference": [],
    "style_weight": null,
    "style_version": 2,
    "repeat": null,
    "turbo": false,
    "relax": false,
    "tile": false,
    "negative_prompt": null,
    "extra_params": {}
  },
  {
    "text": "Cyanotype cat",
    "image_prompts": [],
    "stylize": 1000,
    "chaos": 10,
    "weird": 1000,
    "image_weight": 1.0,
    "seed": null,
    "stop": 100,
    "aspect_width": 1,
    "aspect_height": 1,
    "aspect_ratio": "1:1",
    "style": null,
    "version": null,
    "personalization": false,
    "quality": 1.0,
    "character_reference": [],
    "character_weight": 100,
    "style_reference": [],
    "style_weight": null,
    "style_version": 2,
    "repeat": null,
    "turbo": false,
    "relax": false,
    "tile": false,
    "negative_prompt": null,
    "extra_params": {}
  },
  {
    "text": "Cyanotype cat",
    "image_prompts": [],
    "stylize": 1000,
    "chaos": 50,
    "weird": 1000,
    "image_weight": 1.0,
    "seed": null,
    "stop": 100,
    "aspect_width": 1,
    "aspect_height": 1,
    "aspect_ratio": "1:1",
    "style": null,
    "version": null,
    "personalization": false,
    "quality": 1.0,
    "character_reference": [],
    "character_weight": 100,
    "style_reference": [],
    "style_weight": null,
    "style_version": 2,
    "repeat": null,
    "turbo": false,
    "relax": false,
    "tile": false,
    "negative_prompt": null,
    "extra_params": {}
  },
  {
    "text": "Cyanotype cat",
    "image_prompts": [],
    "stylize": 1000,
    "chaos": 90,
    "weird": 1000,
    "image_weight": 1.0,
    "seed": null,
    "stop": 100,
    "aspect_width": 1,
    "aspect_height": 1,
    "aspect_ratio": "1:1",
    "style": null,
    "version": null,
    "personalization": false,
    "quality": 1.0,
    "character_reference": [],
    "character_weight": 100,
    "style_reference": [],
    "style_weight": null,
    "style_version": 2,
    "repeat": null,
    "turbo": false,
    "relax": false,
    "tile": false,
    "negative_prompt": null,
    "extra_params": {}
  },
  {
    "text": "Cyanotype cat",
    "image_prompts": [],
    "stylize": 100,
    "chaos": 10,
    "weird": 2000,
    "image_weight": 1.0,
    "seed": null,
    "stop": 100,
    "aspect_width": 1,
    "aspect_height": 1,
    "aspect_ratio": "1:1",
    "style": null,
    "version": null,
    "personalization": false,
    "quality": 1.0,
    "character_reference": [],
    "character_weight": 100,
    "style_reference": [],
    "style_weight": null,
    "style_version": 2,
    "repeat": null,
    "turbo": false,
    "relax": false,
    "tile": false,
    "negative_prompt": null,
    "extra_params": {}
  },
  {
    "text": "Cyanotype cat",
    "image_prompts": [],
    "stylize": 100,
    "chaos": 50,
    "weird": 2000,
    "image_weight": 1.0,
    "seed": null,
    "stop": 100,
    "aspect_width": 1,
    "aspect_height": 1,
    "aspect_ratio": "1:1",
    "style": null,
    "version": null,
    "personalization": false,
    "quality": 1.0,
    "character_reference": [],
    "character_weight": 100,
    "style_reference": [],
    "style_weight": null,
    "style_version": 2,
    "repeat": null,
    "turbo": false,
    "relax": false,
    "tile": false,
    "negative_prompt": null,
    "extra_params": {}
  },
  {
    "text": "Cyanotype cat",
    "image_prompts": [],
    "stylize": 100,
    "chaos": 90,
    "weird": 2000,
    "image_weight": 1.0,
    "seed": null,
    "stop": 100,
    "aspect_width": 1,
    "aspect_height": 1,
    "aspect_ratio": "1:1",
    "style": null,
    "version": null,
    "personalization": false,
    "quality": 1.0,
    "character_reference": [],
    "character_weight": 100,
    "style_reference": [],
    "style_weight": null,
    "style_version": 2,
    "repeat": null,
    "turbo": false,
    "relax": false,
    "tile": false,
    "negative_prompt": null,
    "extra_params": {}
  },
  {
    "text": "Cyanotype cat",
    "image_prompts": [],
    "stylize": 500,
    "chaos": 10,
    "weird": 2000,
    "image_weight": 1.0,
    "seed": null,
    "stop": 100,
    "aspect_width": 1,
    "aspect_height": 1,
    "aspect_ratio": "1:1",
    "style": null,
    "version": null,
    "personalization": false,
    "quality": 1.0,
    "character_reference": [],
    "character_weight": 100,
    "style_reference": [],
    "style_weight": null,
    "style_version": 2,
    "repeat": null,
    "turbo": false,
    "relax": false,
    "tile": false,
    "negative_prompt": null,
    "extra_params": {}
  },
  {
    "text": "Cyanotype cat",
    "image_prompts": [],
    "stylize": 500,
    "chaos": 50,
    "weird": 2000,
    "image_weight": 1.0,
    "seed": null,
    "stop": 100,
    "aspect_width": 1,
    "aspect_height": 1,
    "aspect_ratio": "1:1",
    "style": null,
    "version": null,
    "personalization": false,
    "quality": 1.0,
    "character_reference": [],
    "character_weight": 100,
    "style_reference": [],
    "style_weight": null,
    "style_version": 2,
    "repeat": null,
    "turbo": false,
    "relax": false,
    "tile": false,
    "negative_prompt": null,
    "extra_params": {}
  },
  {
    "text": "Cyanotype cat",
    "image_prompts": [],
    "stylize": 500,
    "chaos": 90,
    "weird": 2000,
    "image_weight": 1.0,
    "seed": null,
    "stop": 100,
    "aspect_width": 1,
    "aspect_height": 1,
    "aspect_ratio": "1:1",
    "style": null,
    "version": null,
    "personalization": false,
    "quality": 1.0,
    "character_reference": [],
    "character_weight": 100,
    "style_reference": [],
    "style_weight": null,
    "style_version": 2,
    "repeat": null,
    "turbo": false,
    "relax": false,
    "tile": false,
    "negative_prompt": null,
    "extra_params": {}
  },
  {
    "text": "Cyanotype cat",
    "image_prompts": [],
    "stylize": 1000,
    "chaos": 10,
    "weird": 2000,
    "image_weight": 1.0,
    "seed": null,
    "stop": 100,
    "aspect_width": 1,
    "aspect_height": 1,
    "aspect_ratio": "1:1",
    "style": null,
    "version": null,
    "personalization": false,
    "quality": 1.0,
    "character_reference": [],
    "character_weight": 100,
    "style_reference": [],
    "style_weight": null,
    "style_version": 2,
    "repeat": null,
    "turbo": false,
    "relax": false,
    "tile": false,
    "negative_prompt": null,
    "extra_params": {}
  },
  {
    "text": "Cyanotype cat",
    "image_prompts": [],
    "stylize": 1000,
    "chaos": 50,
    "weird": 2000,
    "image_weight": 1.0,
    "seed": null,
    "stop": 100,
    "aspect_width": 1,
    "aspect_height": 1,
    "aspect_ratio": "1:1",
    "style": null,
    "version": null,
    "personalization": false,
    "quality": 1.0,
    "character_reference": [],
    "character_weight": 100,
    "style_reference": [],
    "style_weight": null,
    "style_version": 2,
    "repeat": null,
    "turbo": false,
    "relax": false,
    "tile": false,
    "negative_prompt": null,
    "extra_params": {}
  },
  {
    "text": "Cyanotype cat",
    "image_prompts": [],
    "stylize": 1000,
    "chaos": 90,
    "weird": 2000,
    "image_weight": 1.0,
    "seed": null,
    "stop": 100,
    "aspect_width": 1,
    "aspect_height": 1,
    "aspect_ratio": "1:1",
    "style": null,
    "version": null,
    "personalization": false,
    "quality": 1.0,
    "character_reference": [],
    "character_weight": 100,
    "style_reference": [],
    "style_weight": null,
    "style_version": 2,
    "repeat": null,
    "turbo": false,
    "relax": false,
    "tile": false,
    "negative_prompt": null,
    "extra_params": {}
  }
]======
Ice cream icon --niji {5, 6} --style {cute, expressive} --weird {250, 1000} --ar {1:1, 2:3}
[
  {
    "text": "Ice cream icon",
    "image_prompts": [],
    "stylize": 100,
    "chaos": 0,
    "weird": 250,
    "image_weight": 1.0,
    "seed": null,
    "stop": 100,
    "aspect_width": 1,
    "aspect_height": 1,
    "aspect_ratio": "1:1",
    "style": "cute",
    "version": "niji 5",
    "personalization": false,
    "quality": 1.0,
    "character_reference": [],
    "character_weight": 100,
    "style_reference": [],
    "style_weight": null,
    "style_version": 2,
    "repeat": null,
    "turbo": false,
    "relax": false,
    "tile": false,
    "negative_prompt": null,
    "extra_params": {}
  },
  {
    "text": "Ice cream icon",
    "image_prompts": [],
    "stylize": 100,
    "chaos": 0,
    "weird": 250,
    "image_weight": 1.0,
    "seed": null,
    "stop": 100,
    "aspect_width": 2,
    "aspect_height": 3,
    "aspect_ratio": "2:3",
    "style": "cute",
    "version": "niji 5",
    "personalization": false,
    "quality": 1.0,
    "character_reference": [],
    "character_weight": 100,
    "style_reference": [],
    "style_weight": null,
    "style_version": 2,
    "repeat": null,
    "turbo": false,
    "relax": false,
    "tile": false,
    "negative_prompt": null,
    "extra_params": {}
  },
  {
    "text": "Ice cream icon",
    "image_prompts": [],
    "stylize": 100,
    "chaos": 0,
    "weird": 1000,
    "image_weight": 1.0,
    "seed": null,
    "stop": 100,
    "aspect_width": 1,
    "aspect_height": 1,
    "aspect_ratio": "1:1",
    "style": "cute",
    "version": "niji 5",
    "personalization": false,
    "quality": 1.0,
    "character_reference": [],
    "character_weight": 100,
    "style_reference": [],
    "style_weight": null,
    "style_version": 2,
    "repeat": null,
    "turbo": false,
    "relax": false,
    "tile": false,
    "negative_prompt": null,
    "extra_params": {}
  },
  {
    "text": "Ice cream icon",
    "image_prompts": [],
    "stylize": 100,
    "chaos": 0,
    "weird": 1000,
    "image_weight": 1.0,
    "seed": null,
    "stop": 100,
    "aspect_width": 2,
    "aspect_height": 3,
    "aspect_ratio": "2:3",
    "style": "cute",
    "version": "niji 5",
    "personalization": false,
    "quality": 1.0,
    "character_reference": [],
    "character_weight": 100,
    "style_reference": [],
    "style_weight": null,
    "style_version": 2,
    "repeat": null,
    "turbo": false,
    "relax": false,
    "tile": false,
    "negative_prompt": null,
    "extra_params": {}
  },
  {
    "text": "Ice cream icon",
    "image_prompts": [],
    "stylize": 100,
    "chaos": 0,
    "weird": 250,
    "image_weight": 1.0,
    "seed": null,
    "stop": 100,
    "aspect_width": 1,
    "aspect_height": 1,
    "aspect_ratio": "1:1",
    "style": "expressive",
    "version": "niji 5",
    "personalization": false,
    "quality": 1.0,
    "character_reference": [],
    "character_weight": 100,
    "style_reference": [],
    "style_weight": null,
    "style_version": 2,
    "repeat": null,
    "turbo": false,
    "relax": false,
    "tile": false,
    "negative_prompt": null,
    "extra_params": {}
  },
  {
    "text": "Ice cream icon",
    "image_prompts": [],
    "stylize": 100,
    "chaos": 0,
    "weird": 250,
    "image_weight": 1.0,
    "seed": null,
    "stop": 100,
    "aspect_width": 2,
    "aspect_height": 3,
    "aspect_ratio": "2:3",
    "style": "expressive",
    "version": "niji 5",
    "personalization": false,
    "quality": 1.0,
    "character_reference": [],
    "character_weight": 100,
    "style_reference": [],
    "style_weight": null,
    "style_version": 2,
    "repeat": null,
    "turbo": false,
    "relax": false,
    "tile": false,
    "negative_prompt": null,
    "extra_params": {}
  },
  {
    "text": "Ice cream icon",
    "image_prompts": [],
    "stylize": 100,
    "chaos": 0,
    "weird": 1000,
    "image_weight": 1.0,
    "seed": null,
    "stop": 100,
    "aspect_width": 1,
    "aspect_height": 1,
    "aspect_ratio": "1:1",
    "style": "expressive",
    "version": "niji 5",
    "personalization": false,
    "quality": 1.0,
    "character_reference": [],
    "character_weight": 100,
    "style_reference": [],
    "style_weight": null,
    "style_version": 2,
    "repeat": null,
    "turbo": false,
    "relax": false,
    "tile": false,
    "negative_prompt": null,
    "extra_params": {}
  },
  {
    "text": "Ice cream icon",
    "image_prompts": [],
    "stylize": 100,
    "chaos": 0,
    "weird": 1000,
    "image_weight": 1.0,
    "seed": null,
    "stop": 100,
    "aspect_width": 2,
    "aspect_height": 3,
    "aspect_ratio": "2:3",
    "style": "expressive",
    "version": "niji 5",
    "personalization": false,
    "quality": 1.0,
    "character_reference": [],
    "character_weight": 100,
    "style_reference": [],
    "style_weight": null,
    "style_version": 2,
    "repeat": null,
    "turbo": false,
    "relax": false,
    "tile": false,
    "negative_prompt": null,
    "extra_params": {}
  },
  {
    "text": "Ice cream icon",
    "image_prompts": [],
    "stylize": 100,
    "chaos": 0,
    "weird": 250,
    "image_weight": 1.0,
    "seed": null,
    "stop": 100,
    "aspect_width": 1,
    "aspect_height": 1,
    "aspect_ratio": "1:1",
    "style": "cute",
    "version": "niji 6",
    "personalization": false,
    "quality": 1.0,
    "character_reference": [],
    "character_weight": 100,
    "style_reference": [],
    "style_weight": null,
    "style_version": 2,
    "repeat": null,
    "turbo": false,
    "relax": false,
    "tile": false,
    "negative_prompt": null,
    "extra_params": {}
  },
  {
    "text": "Ice cream icon",
    "image_prompts": [],
    "stylize": 100,
    "chaos": 0,
    "weird": 250,
    "image_weight": 1.0,
    "seed": null,
    "stop": 100,
    "aspect_width": 2,
    "aspect_height": 3,
    "aspect_ratio": "2:3",
    "style": "cute",
    "version": "niji 6",
    "personalization": false,
    "quality": 1.0,
    "character_reference": [],
    "character_weight": 100,
    "style_reference": [],
    "style_weight": null,
    "style_version": 2,
    "repeat": null,
    "turbo": false,
    "relax": false,
    "tile": false,
    "negative_prompt": null,
    "extra_params": {}
  },
  {
    "text": "Ice cream icon",
    "image_prompts": [],
    "stylize": 100,
    "chaos": 0,
    "weird": 1000,
    "image_weight": 1.0,
    "seed": null,
    "stop": 100,
    "aspect_width": 1,
    "aspect_height": 1,
    "aspect_ratio": "1:1",
    "style": "cute",
    "version": "niji 6",
    "personalization": false,
    "quality": 1.0,
    "character_reference": [],
    "character_weight": 100,
    "style_reference": [],
    "style_weight": null,
    "style_version": 2,
    "repeat": null,
    "turbo": false,
    "relax": false,
    "tile": false,
    "negative_prompt": null,
    "extra_params": {}
  },
  {
    "text": "Ice cream icon",
    "image_prompts": [],
    "stylize": 100,
    "chaos": 0,
    "weird": 1000,
    "image_weight": 1.0,
    "seed": null,
    "stop": 100,
    "aspect_width": 2,
    "aspect_height": 3,
    "aspect_ratio": "2:3",
    "style": "cute",
    "version": "niji 6",
    "personalization": false,
    "quality": 1.0,
    "character_reference": [],
    "character_weight": 100,
    "style_reference": [],
    "style_weight": null,
    "style_version": 2,
    "repeat": null,
    "turbo": false,
    "relax": false,
    "tile": false,
    "negative_prompt": null,
    "extra_params": {}
  },
  {
    "text": "Ice cream icon",
    "image_prompts": [],
    "stylize": 100,
    "chaos": 0,
    "weird": 250,
    "image_weight": 1.0,
    "seed": null,
    "stop": 100,
    "aspect_width": 1,
    "aspect_height": 1,
    "aspect_ratio": "1:1",
    "style": "expressive",
    "version": "niji 6",
    "personalization": false,
    "quality": 1.0,
    "character_reference": [],
    "character_weight": 100,
    "style_reference": [],
    "style_weight": null,
    "style_version": 2,
    "repeat": null,
    "turbo": false,
    "relax": false,
    "tile": false,
    "negative_prompt": null,
    "extra_params": {}
  },
  {
    "text": "Ice cream icon",
    "image_prompts": [],
    "stylize": 100,
    "chaos": 0,
    "weird": 250,
    "image_weight": 1.0,
    "seed": null,
    "stop": 100,
    "aspect_width": 2,
    "aspect_height": 3,
    "aspect_ratio": "2:3",
    "style": "expressive",
    "version": "niji 6",
    "personalization": false,
    "quality": 1.0,
    "character_reference": [],
    "character_weight": 100,
    "style_reference": [],
    "style_weight": null,
    "style_version": 2,
    "repeat": null,
    "turbo": false,
    "relax": false,
    "tile": false,
    "negative_prompt": null,
    "extra_params": {}
  },
  {
    "text": "Ice cream icon",
    "image_prompts": [],
    "stylize": 100,
    "chaos": 0,
    "weird": 1000,
    "image_weight": 1.0,
    "seed": null,
    "stop": 100,
    "aspect_width": 1,
    "aspect_height": 1,
    "aspect_ratio": "1:1",
    "style": "expressive",
    "version": "niji 6",
    "personalization": false,
    "quality": 1.0,
    "character_reference": [],
    "character_weight": 100,
    "style_reference": [],
    "style_weight": null,
    "style_version": 2,
    "repeat": null,
    "turbo": false,
    "relax": false,
    "tile": false,
    "negative_prompt": null,
    "extra_params": {}
  },
  {
    "text": "Ice cream icon",
    "image_prompts": [],
    "stylize": 100,
    "chaos": 0,
    "weird": 1000,
    "image_weight": 1.0,
    "seed": null,
    "stop": 100,
    "aspect_width": 2,
    "aspect_height": 3,
    "aspect_ratio": "2:3",
    "style": "expressive",
    "version": "niji 6",
    "personalization": false,
    "quality": 1.0,
    "character_reference": [],
    "character_weight": 100,
    "style_reference": [],
    "style_weight": null,
    "style_version": 2,
    "repeat": null,
    "turbo": false,
    "relax": false,
    "tile": false,
    "negative_prompt": null,
    "extra_params": {}
  }
]======
image of a robot holding flowers --remix --prompt "A cyborg holding cybernetic orchids" --zoom 2x
{
  "text": "image of a robot holding flowers",
  "image_prompts": [],
  "stylize": 100,
  "chaos": 0,
  "weird": 0,
  "image_weight": 1.0,
  "seed": null,
  "stop": 100,
  "aspect_width": 1,
  "aspect_height": 1,
  "aspect_ratio": "1:1",
  "style": null,
  "version": null,
  "personalization": false,
  "quality": 1.0,
  "character_reference": [],
  "character_weight": 100,
  "style_reference": [],
  "style_weight": null,
  "style_version": 2,
  "repeat": null,
  "turbo": false,
  "relax": false,
  "tile": false,
  "negative_prompt": null,
  "extra_params": {
    "remix": null,
    "prompt": "A cyborg holding cybernetic orchids",
    "zoom": "2x"
  }
}======
Imagine a {1400s, 1990s} cat --sref <image URL of medieval tapestry> --sv {1, 4} --ar 5:4
[
  {
    "text": "Imagine a 1400s cat",
    "image_prompts": [],
    "stylize": 100,
    "chaos": 0,
    "weird": 0,
    "image_weight": 1.0,
    "seed": null,
    "stop": 100,
    "aspect_width": 5,
    "aspect_height": 4,
    "aspect_ratio": "5:4",
    "style": null,
    "version": null,
    "personalization": false,
    "quality": 1.0,
    "character_reference": [],
    "character_weight": 100,
    "style_reference": [
      "<image URL of medieval tapestry>"
    ],
    "style_weight": null,
    "style_version": 1,
    "repeat": null,
    "turbo": false,
    "relax": false,
    "tile": false,
    "negative_prompt": null,
    "extra_params": {}
  },
  {
    "text": "Imagine a 1400s cat",
    "image_prompts": [],
    "stylize": 100,
    "chaos": 0,
    "weird": 0,
    "image_weight": 1.0,
    "seed": null,
    "stop": 100,
    "aspect_width": 5,
    "aspect_height": 4,
    "aspect_ratio": "5:4",
    "style": null,
    "version": null,
    "personalization": false,
    "quality": 1.0,
    "character_reference": [],
    "character_weight": 100,
    "style_reference": [
      "<image URL of medieval tapestry>"
    ],
    "style_weight": null,
    "style_version": 4,
    "repeat": null,
    "turbo": false,
    "relax": false,
    "tile": false,
    "negative_prompt": null,
    "extra_params": {}
  },
  {
    "text": "Imagine a 1990s cat",
    "image_prompts": [],
    "stylize": 100,
    "chaos": 0,
    "weird": 0,
    "image_weight": 1.0,
    "seed": null,
    "stop": 100,
    "aspect_width": 5,
    "aspect_height": 4,
    "aspect_ratio": "5:4",
    "style": null,
    "version": null,
    "personalization": false,
    "quality": 1.0,
    "character_reference": [],
    "character_weight": 100,
    "style_reference": [
      "<image URL of medieval tapestry>"
    ],
    "style_weight": null,
    "style_version": 1,
    "repeat": null,
    "turbo": false,
    "relax": false,
    "tile": false,
    "negative_prompt": null,
    "extra_params": {}
  },
  {
    "text": "Imagine a 1990s cat",
    "image_prompts": [],
    "stylize": 100,
    "chaos": 0,
    "weird": 0,
    "image_weight": 1.0,
    "seed": null,
    "stop": 100,
    "aspect_width": 5,
    "aspect_height": 4,
    "aspect_ratio": "5:4",
    "style": null,
    "version": null,
    "personalization": false,
    "quality": 1.0,
    "character_reference": [],
    "character_weight": 100,
    "style_reference": [
      "<image URL of medieval tapestry>"
    ],
    "style_weight": null,
    "style_version": 4,
    "repeat": null,
    "turbo": false,
    "relax": false,
    "tile": false,
    "negative_prompt": null,
    "extra_params": {}
  }
]======
Lithograph potato --weird {500, 1500, 2500} --chaos {20, 60, 80} --quality {.5, 1}
[
  {
    "text": "Lithograph potato",
    "image_prompts": [],
    "stylize": 100,
    "chaos": 20,
    "weird": 500,
    "image_weight": 1.0,
    "seed": null,
    "stop": 100,
    "aspect_width": 1,
    "aspect_height": 1,
    "aspect_ratio": "1:1",
    "style": null,
    "version": null,
    "personalization": false,
    "quality": 0.5,
    "character_reference": [],
    "character_weight": 100,
    "style_reference": [],
    "style_weight": null,
    "style_version": 2,
    "repeat": null,
    "turbo": false,
    "relax": false,
    "tile": false,
    "negative_prompt": null,
    "extra_params": {}
  },
  {
    "text": "Lithograph potato",
    "image_prompts": [],
    "stylize": 100,
    "chaos": 20,
    "weird": 500,
    "image_weight": 1.0,
    "seed": null,
    "stop": 100,
    "aspect_width": 1,
    "aspect_height": 1,
    "aspect_ratio": "1:1",
    "style": null,
    "version": null,
    "personalization": false,
    "quality": 1.0,
    "character_reference": [],
    "character_weight": 100,
    "style_reference": [],
    "style_weight": null,
    "style_version": 2,
    "repeat": null,
    "turbo": false,
    "relax": false,
    "tile": false,
    "negative_prompt": null,
    "extra_params": {}
  },
  {
    "text": "Lithograph potato",
    "image_prompts": [],
    "stylize": 100,
    "chaos": 60,
    "weird": 500,
    "image_weight": 1.0,
    "seed": null,
    "stop": 100,
    "aspect_width": 1,
    "aspect_height": 1,
    "aspect_ratio": "1:1",
    "style": null,
    "version": null,
    "personalization": false,
    "quality": 0.5,
    "character_reference": [],
    "character_weight": 100,
    "style_reference": [],
    "style_weight": null,
    "style_version": 2,
    "repeat": null,
    "turbo": false,
    "relax": false,
    "tile": false,
    "negative_prompt": null,
    "extra_params": {}
  },
  {
    "text": "Lithograph potato",
    "image_prompts": [],
    "stylize": 100,
    "chaos": 60,
    "weird": 500,
    "image_weight": 1.0,
    "seed": null,
    "stop": 100,
    "aspect_width": 1,
    "aspect_height": 1,
    "aspect_ratio": "1:1",
    "style": null,
    "version": null,
    "personalization": false,
    "quality": 1.0,
    "character_reference": [],
    "character_weight": 100,
    "style_reference": [],
    "style_weight": null,
    "style_version": 2,
    "repeat": null,
    "turbo": false,
    "relax": false,
    "tile": false,
    "negative_prompt": null,
    "extra_params": {}
  },
  {
    "text": "Lithograph potato",
    "image_prompts": [],
    "stylize": 100,
    "chaos": 80,
    "weird": 500,
    "image_weight": 1.0,
    "seed": null,
    "stop": 100,
    "aspect_width": 1,
    "aspect_height": 1,
    "aspect_ratio": "1:1",
    "style": null,
    "version": null,
    "personalization": false,
    "quality": 0.5,
    "character_reference": [],
    "character_weight": 100,
    "style_reference": [],
    "style_weight": null,
    "style_version": 2,
    "repeat": null,
    "turbo": false,
    "relax": false,
    "tile": false,
    "negative_prompt": null,
    "extra_params": {}
  },
  {
    "text": "Lithograph potato",
    "image_prompts": [],
    "stylize": 100,
    "chaos": 80,
    "weird": 500,
    "image_weight": 1.0,
    "seed": null,
    "stop": 100,
    "aspect_width": 1,
    "aspect_height": 1,
    "aspect_ratio": "1:1",
    "style": null,
    "version": null,
    "personalization": false,
    "quality": 1.0,
    "character_reference": [],
    "character_weight": 100,
    "style_reference": [],
    "style_weight": null,
    "style_version": 2,
    "repeat": null,
    "turbo": false,
    "relax": false,
    "tile": false,
    "negative_prompt": null,
    "extra_params": {}
  },
  {
    "text": "Lithograph potato",
    "image_prompts": [],
    "stylize": 100,
    "chaos": 20,
    "weird": 1500,
    "image_weight": 1.0,
    "seed": null,
    "stop": 100,
    "aspect_width": 1,
    "aspect_height": 1,
    "aspect_ratio": "1:1",
    "style": null,
    "version": null,
    "personalization": false,
    "quality": 0.5,
    "character_reference": [],
    "character_weight": 100,
    "style_reference": [],
    "style_weight": null,
    "style_version": 2,
    "repeat": null,
    "turbo": false,
    "relax": false,
    "tile": false,
    "negative_prompt": null,
    "extra_params": {}
  },
  {
    "text": "Lithograph potato",
    "image_prompts": [],
    "stylize": 100,
    "chaos": 20,
    "weird": 1500,
    "image_weight": 1.0,
    "seed": null,
    "stop": 100,
    "aspect_width": 1,
    "aspect_height": 1,
    "aspect_ratio": "1:1",
    "style": null,
    "version": null,
    "personalization": false,
    "quality": 1.0,
    "character_reference": [],
    "character_weight": 100,
    "style_reference": [],
    "style_weight": null,
    "style_version": 2,
    "repeat": null,
    "turbo": false,
    "relax": false,
    "tile": false,
    "negative_prompt": null,
    "extra_params": {}
  },
  {
    "text": "Lithograph potato",
    "image_prompts": [],
    "stylize": 100,
    "chaos": 60,
    "weird": 1500,
    "image_weight": 1.0,
    "seed": null,
    "stop": 100,
    "aspect_width": 1,
    "aspect_height": 1,
    "aspect_ratio": "1:1",
    "style": null,
    "version": null,
    "personalization": false,
    "quality": 0.5,
    "character_reference": [],
    "character_weight": 100,
    "style_reference": [],
    "style_weight": null,
    "style_version": 2,
    "repeat": null,
    "turbo": false,
    "relax": false,
    "tile": false,
    "negative_prompt": null,
    "extra_params": {}
  },
  {
    "text": "Lithograph potato",
    "image_prompts": [],
    "stylize": 100,
    "chaos": 60,
    "weird": 1500,
    "image_weight": 1.0,
    "seed": null,
    "stop": 100,
    "aspect_width": 1,
    "aspect_height": 1,
    "aspect_ratio": "1:1",
    "style": null,
    "version": null,
    "personalization": false,
    "quality": 1.0,
    "character_reference": [],
    "character_weight": 100,
    "style_reference": [],
    "style_weight": null,
    "style_version": 2,
    "repeat": null,
    "turbo": false,
    "relax": false,
    "tile": false,
    "negative_prompt": null,
    "extra_params": {}
  },
  {
    "text": "Lithograph potato",
    "image_prompts": [],
    "stylize": 100,
    "chaos": 80,
    "weird": 1500,
    "image_weight": 1.0,
    "seed": null,
    "stop": 100,
    "aspect_width": 1,
    "aspect_height": 1,
    "aspect_ratio": "1:1",
    "style": null,
    "version": null,
    "personalization": false,
    "quality": 0.5,
    "character_reference": [],
    "character_weight": 100,
    "style_reference": [],
    "style_weight": null,
    "style_version": 2,
    "repeat": null,
    "turbo": false,
    "relax": false,
    "tile": false,
    "negative_prompt": null,
    "extra_params": {}
  },
  {
    "text": "Lithograph potato",
    "image_prompts": [],
    "stylize": 100,
    "chaos": 80,
    "weird": 1500,
    "image_weight": 1.0,
    "seed": null,
    "stop": 100,
    "aspect_width": 1,
    "aspect_height": 1,
    "aspect_ratio": "1:1",
    "style": null,
    "version": null,
    "personalization": false,
    "quality": 1.0,
    "character_reference": [],
    "character_weight": 100,
    "style_reference": [],
    "style_weight": null,
    "style_version": 2,
    "repeat": null,
    "turbo": false,
    "relax": false,
    "tile": false,
    "negative_prompt": null,
    "extra_params": {}
  },
  {
    "text": "Lithograph potato",
    "image_prompts": [],
    "stylize": 100,
    "chaos": 20,
    "weird": 2500,
    "image_weight": 1.0,
    "seed": null,
    "stop": 100,
    "aspect_width": 1,
    "aspect_height": 1,
    "aspect_ratio": "1:1",
    "style": null,
    "version": null,
    "personalization": false,
    "quality": 0.5,
    "character_reference": [],
    "character_weight": 100,
    "style_reference": [],
    "style_weight": null,
    "style_version": 2,
    "repeat": null,
    "turbo": false,
    "relax": false,
    "tile": false,
    "negative_prompt": null,
    "extra_params": {}
  },
  {
    "text": "Lithograph potato",
    "image_prompts": [],
    "stylize": 100,
    "chaos": 20,
    "weird": 2500,
    "image_weight": 1.0,
    "seed": null,
    "stop": 100,
    "aspect_width": 1,
    "aspect_height": 1,
    "aspect_ratio": "1:1",
    "style": null,
    "version": null,
    "personalization": false,
    "quality": 1.0,
    "character_reference": [],
    "character_weight": 100,
    "style_reference": [],
    "style_weight": null,
    "style_version": 2,
    "repeat": null,
    "turbo": false,
    "relax": false,
    "tile": false,
    "negative_prompt": null,
    "extra_params": {}
  },
  {
    "text": "Lithograph potato",
    "image_prompts": [],
    "stylize": 100,
    "chaos": 60,
    "weird": 2500,
    "image_weight": 1.0,
    "seed": null,
    "stop": 100,
    "aspect_width": 1,
    "aspect_height": 1,
    "aspect_ratio": "1:1",
    "style": null,
    "version": null,
    "personalization": false,
    "quality": 0.5,
    "character_reference": [],
    "character_weight": 100,
    "style_reference": [],
    "style_weight": null,
    "style_version": 2,
    "repeat": null,
    "turbo": false,
    "relax": false,
    "tile": false,
    "negative_prompt": null,
    "extra_params": {}
  },
  {
    "text": "Lithograph potato",
    "image_prompts": [],
    "stylize": 100,
    "chaos": 60,
    "weird": 2500,
    "image_weight": 1.0,
    "seed": null,
    "stop": 100,
    "aspect_width": 1,
    "aspect_height": 1,
    "aspect_ratio": "1:1",
    "style": null,
    "version": null,
    "personalization": false,
    "quality": 1.0,
    "character_reference": [],
    "character_weight": 100,
    "style_reference": [],
    "style_weight": null,
    "style_version": 2,
    "repeat": null,
    "turbo": false,
    "relax": false,
    "tile": false,
    "negative_prompt": null,
    "extra_params": {}
  },
  {
    "text": "Lithograph potato",
    "image_prompts": [],
    "stylize": 100,
    "chaos": 80,
    "weird": 2500,
    "image_weight": 1.0,
    "seed": null,
    "stop": 100,
    "aspect_width": 1,
    "aspect_height": 1,
    "aspect_ratio": "1:1",
    "style": null,
    "version": null,
    "personalization": false,
    "quality": 0.5,
    "character_reference": [],
    "character_weight": 100,
    "style_reference": [],
    "style_weight": null,
    "style_version": 2,
    "repeat": null,
    "turbo": false,
    "relax": false,
    "tile": false,
    "negative_prompt": null,
    "extra_params": {}
  },
  {
    "text": "Lithograph potato",
    "image_prompts": [],
    "stylize": 100,
    "chaos": 80,
    "weird": 2500,
    "image_weight": 1.0,
    "seed": null,
    "stop": 100,
    "aspect_width": 1,
    "aspect_height": 1,
    "aspect_ratio": "1:1",
    "style": null,
    "version": null,
    "personalization": false,
    "quality": 1.0,
    "character_reference": [],
    "character_weight": 100,
    "style_reference": [],
    "style_weight": null,
    "style_version": 2,
    "repeat": null,
    "turbo": false,
    "relax": false,
    "tile": false,
    "negative_prompt": null,
    "extra_params": {}
  }
]======
space:: ship multi-prompt --stylize {250, 750} --weird 500
[
  {
    "text": "space:: ship multi-prompt",
    "image_prompts": [],
    "stylize": 250,
    "chaos": 0,
    "weird": 500,
    "image_weight": 1.0,
    "seed": null,
    "stop": 100,
    "aspect_width": 1,
    "aspect_height": 1,
    "aspect_ratio": "1:1",
    "style": null,
    "version": null,
    "personalization": false,
    "quality": 1.0,
    "character_reference": [],
    "character_weight": 100,
    "style_reference": [],
    "style_weight": null,
    "style_version": 2,
    "repeat": null,
    "turbo": false,
    "relax": false,
    "tile": false,
    "negative_prompt": null,
    "extra_params": {}
  },
  {
    "text": "space:: ship multi-prompt",
    "image_prompts": [],
    "stylize": 750,
    "chaos": 0,
    "weird": 500,
    "image_weight": 1.0,
    "seed": null,
    "stop": 100,
    "aspect_width": 1,
    "aspect_height": 1,
    "aspect_ratio": "1:1",
    "style": null,
    "version": null,
    "personalization": false,
    "quality": 1.0,
    "character_reference": [],
    "character_weight": 100,
    "style_reference": [],
    "style_weight": null,
    "style_version": 2,
    "repeat": null,
    "turbo": false,
    "relax": false,
    "tile": false,
    "negative_prompt": null,
    "extra_params": {}
  }
]======
stream running through a redwood forest --vary region --selection "sky area" --prompt "aurora borealis" --pan up
{
  "text": "stream running through a redwood forest",
  "image_prompts": [],
  "stylize": 100,
  "chaos": 0,
  "weird": 0,
  "image_weight": 1.0,
  "seed": null,
  "stop": 100,
  "aspect_width": 1,
  "aspect_height": 1,
  "aspect_ratio": "1:1",
  "style": null,
  "version": null,
  "personalization": false,
  "quality": 1.0,
  "character_reference": [],
  "character_weight": 100,
  "style_reference": [],
  "style_weight": null,
  "style_version": 2,
  "repeat": null,
  "turbo": false,
  "relax": false,
  "tile": false,
  "negative_prompt": null,
  "extra_params": {
    "vary": "region",
    "selection": "sky area",
    "prompt": "aurora borealis",
    "pan": "up"
  }
}======
Vibrant California poppies --version {5.2, 6, 6.1} --stylize {100, 500} --quality {1, 2}
[
  {
    "text": "Vibrant California poppies",
    "image_prompts": [],
    "stylize": 100,
    "chaos": 0,
    "weird": 0,
    "image_weight": 1.0,
    "seed": null,
    "stop": 100,
    "aspect_width": 1,
    "aspect_height": 1,
    "aspect_ratio": "1:1",
    "style": null,
    "version": "v5.2",
    "personalization": false,
    "quality": 1.0,
    "character_reference": [],
    "character_weight": 100,
    "style_reference": [],
    "style_weight": null,
    "style_version": 2,
    "repeat": null,
    "turbo": false,
    "relax": false,
    "tile": false,
    "negative_prompt": null,
    "extra_params": {}
  },
  {
    "text": "Vibrant California poppies",
    "image_prompts": [],
    "stylize": 100,
    "chaos": 0,
    "weird": 0,
    "image_weight": 1.0,
    "seed": null,
    "stop": 100,
    "aspect_width": 1,
    "aspect_height": 1,
    "aspect_ratio": "1:1",
    "style": null,
    "version": "v5.2",
    "personalization": false,
    "quality": 2.0,
    "character_reference": [],
    "character_weight": 100,
    "style_reference": [],
    "style_weight": null,
    "style_version": 2,
    "repeat": null,
    "turbo": false,
    "relax": false,
    "tile": false,
    "negative_prompt": null,
    "extra_params": {}
  },
  {
    "text": "Vibrant California poppies",
    "image_prompts": [],
    "stylize": 500,
    "chaos": 0,
    "weird": 0,
    "image_weight": 1.0,
    "seed": null,
    "stop": 100,
    "aspect_width": 1,
    "aspect_height": 1,
    "aspect_ratio": "1:1",
    "style": null,
    "version": "v5.2",
    "personalization": false,
    "quality": 1.0,
    "character_reference": [],
    "character_weight": 100,
    "style_reference": [],
    "style_weight": null,
    "style_version": 2,
    "repeat": null,
    "turbo": false,
    "relax": false,
    "tile": false,
    "negative_prompt": null,
    "extra_params": {}
  },
  {
    "text": "Vibrant California poppies",
    "image_prompts": [],
    "stylize": 500,
    "chaos": 0,
    "weird": 0,
    "image_weight": 1.0,
    "seed": null,
    "stop": 100,
    "aspect_width": 1,
    "aspect_height": 1,
    "aspect_ratio": "1:1",
    "style": null,
    "version": "v5.2",
    "personalization": false,
    "quality": 2.0,
    "character_reference": [],
    "character_weight": 100,
    "style_reference": [],
    "style_weight": null,
    "style_version": 2,
    "repeat": null,
    "turbo": false,
    "relax": false,
    "tile": false,
    "negative_prompt": null,
    "extra_params": {}
  },
  {
    "text": "Vibrant California poppies",
    "image_prompts": [],
    "stylize": 100,
    "chaos": 0,
    "weird": 0,
    "image_weight": 1.0,
    "seed": null,
    "stop": 100,
    "aspect_width": 1,
    "aspect_height": 1,
    "aspect_ratio": "1:1",
    "style": null,
    "version": "v6",
    "personalization": false,
    "quality": 1.0,
    "character_reference": [],
    "character_weight": 100,
    "style_reference": [],
    "style_weight": null,
    "style_version": 2,
    "repeat": null,
    "turbo": false,
    "relax": false,
    "tile": false,
    "negative_prompt": null,
    "extra_params": {}
  },
  {
    "text": "Vibrant California poppies",
    "image_prompts": [],
    "stylize": 100,
    "chaos": 0,
    "weird": 0,
    "image_weight": 1.0,
    "seed": null,
    "stop": 100,
    "aspect_width": 1,
    "aspect_height": 1,
    "aspect_ratio": "1:1",
    "style": null,
    "version": "v6",
    "personalization": false,
    "quality": 2.0,
    "character_reference": [],
    "character_weight": 100,
    "style_reference": [],
    "style_weight": null,
    "style_version": 2,
    "repeat": null,
    "turbo": false,
    "relax": false,
    "tile": false,
    "negative_prompt": null,
    "extra_params": {}
  },
  {
    "text": "Vibrant California poppies",
    "image_prompts": [],
    "stylize": 500,
    "chaos": 0,
    "weird": 0,
    "image_weight": 1.0,
    "seed": null,
    "stop": 100,
    "aspect_width": 1,
    "aspect_height": 1,
    "aspect_ratio": "1:1",
    "style": null,
    "version": "v6",
    "personalization": false,
    "quality": 1.0,
    "character_reference": [],
    "character_weight": 100,
    "style_reference": [],
    "style_weight": null,
    "style_version": 2,
    "repeat": null,
    "turbo": false,
    "relax": false,
    "tile": false,
    "negative_prompt": null,
    "extra_params": {}
  },
  {
    "text": "Vibrant California poppies",
    "image_prompts": [],
    "stylize": 500,
    "chaos": 0,
    "weird": 0,
    "image_weight": 1.0,
    "seed": null,
    "stop": 100,
    "aspect_width": 1,
    "aspect_height": 1,
    "aspect_ratio": "1:1",
    "style": null,
    "version": "v6",
    "personalization": false,
    "quality": 2.0,
    "character_reference": [],
    "character_weight": 100,
    "style_reference": [],
    "style_weight": null,
    "style_version": 2,
    "repeat": null,
    "turbo": false,
    "relax": false,
    "tile": false,
    "negative_prompt": null,
    "extra_params": {}
  },
  {
    "text": "Vibrant California poppies",
    "image_prompts": [],
    "stylize": 100,
    "chaos": 0,
    "weird": 0,
    "image_weight": 1.0,
    "seed": null,
    "stop": 100,
    "aspect_width": 1,
    "aspect_height": 1,
    "aspect_ratio": "1:1",
    "style": null,
    "version": "v6.1",
    "personalization": false,
    "quality": 1.0,
    "character_reference": [],
    "character_weight": 100,
    "style_reference": [],
    "style_weight": null,
    "style_version": 2,
    "repeat": null,
    "turbo": false,
    "relax": false,
    "tile": false,
    "negative_prompt": null,
    "extra_params": {}
  },
  {
    "text": "Vibrant California poppies",
    "image_prompts": [],
    "stylize": 100,
    "chaos": 0,
    "weird": 0,
    "image_weight": 1.0,
    "seed": null,
    "stop": 100,
    "aspect_width": 1,
    "aspect_height": 1,
    "aspect_ratio": "1:1",
    "style": null,
    "version": "v6.1",
    "personalization": false,
    "quality": 2.0,
    "character_reference": [],
    "character_weight": 100,
    "style_reference": [],
    "style_weight": null,
    "style_version": 2,
    "repeat": null,
    "turbo": false,
    "relax": false,
    "tile": false,
    "negative_prompt": null,
    "extra_params": {}
  },
  {
    "text": "Vibrant California poppies",
    "image_prompts": [],
    "stylize": 500,
    "chaos": 0,
    "weird": 0,
    "image_weight": 1.0,
    "seed": null,
    "stop": 100,
    "aspect_width": 1,
    "aspect_height": 1,
    "aspect_ratio": "1:1",
    "style": null,
    "version": "v6.1",
    "personalization": false,
    "quality": 1.0,
    "character_reference": [],
    "character_weight": 100,
    "style_reference": [],
    "style_weight": null,
    "style_version": 2,
    "repeat": null,
    "turbo": false,
    "relax": false,
    "tile": false,
    "negative_prompt": null,
    "extra_params": {}
  },
  {
    "text": "Vibrant California poppies",
    "image_prompts": [],
    "stylize": 500,
    "chaos": 0,
    "weird": 0,
    "image_weight": 1.0,
    "seed": null,
    "stop": 100,
    "aspect_width": 1,
    "aspect_height": 1,
    "aspect_ratio": "1:1",
    "style": null,
    "version": "v6.1",
    "personalization": false,
    "quality": 2.0,
    "character_reference": [],
    "character_weight": 100,
    "style_reference": [],
    "style_weight": null,
    "style_version": 2,
    "repeat": null,
    "turbo": false,
    "relax": false,
    "tile": false,
    "negative_prompt": null,
    "extra_params": {}
  }
]======
{A flock, Three} of iridescent hummingbirds drinking nectar from {gigantic, miniature} orchids --q {0.25, 1} --repeat {2, 5}
[
  {
    "text": "A flock of iridescent hummingbirds drinking nectar from gigantic orchids",
    "image_prompts": [],
    "stylize": 100,
    "chaos": 0,
    "weird": 0,
    "image_weight": 1.0,
    "seed": null,
    "stop": 100,
    "aspect_width": 1,
    "aspect_height": 1,
    "aspect_ratio": "1:1",
    "style": null,
    "version": null,
    "personalization": false,
    "quality": 0.25,
    "character_reference": [],
    "character_weight": 100,
    "style_reference": [],
    "style_weight": null,
    "style_version": 2,
    "repeat": 2,
    "turbo": false,
    "relax": false,
    "tile": false,
    "negative_prompt": null,
    "extra_params": {}
  },
  {
    "text": "A flock of iridescent hummingbirds drinking nectar from gigantic orchids",
    "image_prompts": [],
    "stylize": 100,
    "chaos": 0,
    "weird": 0,
    "image_weight": 1.0,
    "seed": null,
    "stop": 100,
    "aspect_width": 1,
    "aspect_height": 1,
    "aspect_ratio": "1:1",
    "style": null,
    "version": null,
    "personalization": false,
    "quality": 0.25,
    "character_reference": [],
    "character_weight": 100,
    "style_reference": [],
    "style_weight": null,
    "style_version": 2,
    "repeat": 5,
    "turbo": false,
    "relax": false,
    "tile": false,
    "negative_prompt": null,
    "extra_params": {}
  },
  {
    "text": "A flock of iridescent hummingbirds drinking nectar from gigantic orchids",
    "image_prompts": [],
    "stylize": 100,
    "chaos": 0,
    "weird": 0,
    "image_weight": 1.0,
    "seed": null,
    "stop": 100,
    "aspect_width": 1,
    "aspect_height": 1,
    "aspect_ratio": "1:1",
    "style": null,
    "version": null,
    "personalization": false,
    "quality": 1.0,
    "character_reference": [],
    "character_weight": 100,
    "style_reference": [],
    "style_weight": null,
    "style_version": 2,
    "repeat": 2,
    "turbo": false,
    "relax": false,
    "tile": false,
    "negative_prompt": null,
    "extra_params": {}
  },
  {
    "text": "A flock of iridescent hummingbirds drinking nectar from gigantic orchids",
    "image_prompts": [],
    "stylize": 100,
    "chaos": 0,
    "weird": 0,
    "image_weight": 1.0,
    "seed": null,
    "stop": 100,
    "aspect_width": 1,
    "aspect_height": 1,
    "aspect_ratio": "1:1",
    "style": null,
    "version": null,
    "personalization": false,
    "quality": 1.0,
    "character_reference": [],
    "character_weight": 100,
    "style_reference": [],
    "style_weight": null,
    "style_version": 2,
    "repeat": 5,
    "turbo": false,
    "relax": false,
    "tile": false,
    "negative_prompt": null,
    "extra_params": {}
  },
  {
    "text": "A flock of iridescent hummingbirds drinking nectar from miniature orchids",
    "image_prompts": [],
    "stylize": 100,
    "chaos": 0,
    "weird": 0,
    "image_weight": 1.0,
    "seed": null,
    "stop": 100,
    "aspect_width": 1,
    "aspect_height": 1,
    "aspect_ratio": "1:1",
    "style": null,
    "version": null,
    "personalization": false,
    "quality": 0.25,
    "character_reference": [],
    "character_weight": 100,
    "style_reference": [],
    "style_weight": null,
    "style_version": 2,
    "repeat": 2,
    "turbo": false,
    "relax": false,
    "tile": false,
    "negative_prompt": null,
    "extra_params": {}
  },
  {
    "text": "A flock of iridescent hummingbirds drinking nectar from miniature orchids",
    "image_prompts": [],
    "stylize": 100,
    "chaos": 0,
    "weird": 0,
    "image_weight": 1.0,
    "seed": null,
    "stop": 100,
    "aspect_width": 1,
    "aspect_height": 1,
    "aspect_ratio": "1:1",
    "style": null,
    "version": null,
    "personalization": false,
    "quality": 0.25,
    "character_reference": [],
    "character_weight": 100,
    "style_reference": [],
    "style_weight": null,
    "style_version": 2,
    "repeat": 5,
    "turbo": false,
    "relax": false,
    "tile": false,
    "negative_prompt": null,
    "extra_params": {}
  },
  {
    "text": "A flock of iridescent hummingbirds drinking nectar from miniature orchids",
    "image_prompts": [],
    "stylize": 100,
    "chaos": 0,
    "weird": 0,
    "image_weight": 1.0,
    "seed": null,
    "stop": 100,
    "aspect_width": 1,
    "aspect_height": 1,
    "aspect_ratio": "1:1",
    "style": null,
    "version": null,
    "personalization": false,
    "quality": 1.0,
    "character_reference": [],
    "character_weight": 100,
    "style_reference": [],
    "style_weight": null,
    "style_version": 2,
    "repeat": 2,
    "turbo": false,
    "relax": false,
    "tile": false,
    "negative_prompt": null,
    "extra_params": {}
  },
  {
    "text": "A flock of iridescent hummingbirds drinking nectar from miniature orchids",
    "image_prompts": [],
    "stylize": 100,
    "chaos": 0,
    "weird": 0,
    "image_weight": 1.0,
    "seed": null,
    "stop": 100,
    "aspect_width": 1,
    "aspect_height": 1,
    "aspect_ratio": "1:1",
    "style": null,
    "version": null,
    "personalization": false,
    "quality": 1.0,
    "character_reference": [],
    "character_weight": 100,
    "style_reference": [],
    "style_weight": null,
    "style_version": 2,
    "repeat": 5,
    "turbo": false,
    "relax": false,
    "tile": false,
    "negative_prompt": null,
    "extra_params": {}
  },
  {
    "text": "Three of iridescent hummingbirds drinking nectar from gigantic orchids",
    "image_prompts": [],
    "stylize": 100,
    "chaos": 0,
    "weird": 0,
    "image_weight": 1.0,
    "seed": null,
    "stop": 100,
    "aspect_width": 1,
    "aspect_height": 1,
    "aspect_ratio": "1:1",
    "style": null,
    "version": null,
    "personalization": false,
    "quality": 0.25,
    "character_reference": [],
    "character_weight": 100,
    "style_reference": [],
    "style_weight": null,
    "style_version": 2,
    "repeat": 2,
    "turbo": false,
    "relax": false,
    "tile": false,
    "negative_prompt": null,
    "extra_params": {}
  },
  {
    "text": "Three of iridescent hummingbirds drinking nectar from gigantic orchids",
    "image_prompts": [],
    "stylize": 100,
    "chaos": 0,
    "weird": 0,
    "image_weight": 1.0,
    "seed": null,
    "stop": 100,
    "aspect_width": 1,
    "aspect_height": 1,
    "aspect_ratio": "1:1",
    "style": null,
    "version": null,
    "personalization": false,
    "quality": 0.25,
    "character_reference": [],
    "character_weight": 100,
    "style_reference": [],
    "style_weight": null,
    "style_version": 2,
    "repeat": 5,
    "turbo": false,
    "relax": false,
    "tile": false,
    "negative_prompt": null,
    "extra_params": {}
  },
  {
    "text": "Three of iridescent hummingbirds drinking nectar from gigantic orchids",
    "image_prompts": [],
    "stylize": 100,
    "chaos": 0,
    "weird": 0,
    "image_weight": 1.0,
    "seed": null,
    "stop": 100,
    "aspect_width": 1,
    "aspect_height": 1,
    "aspect_ratio": "1:1",
    "style": null,
    "version": null,
    "personalization": false,
    "quality": 1.0,
    "character_reference": [],
    "character_weight": 100,
    "style_reference": [],
    "style_weight": null,
    "style_version": 2,
    "repeat": 2,
    "turbo": false,
    "relax": false,
    "tile": false,
    "negative_prompt": null,
    "extra_params": {}
  },
  {
    "text": "Three of iridescent hummingbirds drinking nectar from gigantic orchids",
    "image_prompts": [],
    "stylize": 100,
    "chaos": 0,
    "weird": 0,
    "image_weight": 1.0,
    "seed": null,
    "stop": 100,
    "aspect_width": 1,
    "aspect_height": 1,
    "aspect_ratio": "1:1",
    "style": null,
    "version": null,
    "personalization": false,
    "quality": 1.0,
    "character_reference": [],
    "character_weight": 100,
    "style_reference": [],
    "style_weight": null,
    "style_version": 2,
    "repeat": 5,
    "turbo": false,
    "relax": false,
    "tile": false,
    "negative_prompt": null,
    "extra_params": {}
  },
  {
    "text": "Three of iridescent hummingbirds drinking nectar from miniature orchids",
    "image_prompts": [],
    "stylize": 100,
    "chaos": 0,
    "weird": 0,
    "image_weight": 1.0,
    "seed": null,
    "stop": 100,
    "aspect_width": 1,
    "aspect_height": 1,
    "aspect_ratio": "1:1",
    "style": null,
    "version": null,
    "personalization": false,
    "quality": 0.25,
    "character_reference": [],
    "character_weight": 100,
    "style_reference": [],
    "style_weight": null,
    "style_version": 2,
    "repeat": 2,
    "turbo": false,
    "relax": false,
    "tile": false,
    "negative_prompt": null,
    "extra_params": {}
  },
  {
    "text": "Three of iridescent hummingbirds drinking nectar from miniature orchids",
    "image_prompts": [],
    "stylize": 100,
    "chaos": 0,
    "weird": 0,
    "image_weight": 1.0,
    "seed": null,
    "stop": 100,
    "aspect_width": 1,
    "aspect_height": 1,
    "aspect_ratio": "1:1",
    "style": null,
    "version": null,
    "personalization": false,
    "quality": 0.25,
    "character_reference": [],
    "character_weight": 100,
    "style_reference": [],
    "style_weight": null,
    "style_version": 2,
    "repeat": 5,
    "turbo": false,
    "relax": false,
    "tile": false,
    "negative_prompt": null,
    "extra_params": {}
  },
  {
    "text": "Three of iridescent hummingbirds drinking nectar from miniature orchids",
    "image_prompts": [],
    "stylize": 100,
    "chaos": 0,
    "weird": 0,
    "image_weight": 1.0,
    "seed": null,
    "stop": 100,
    "aspect_width": 1,
    "aspect_height": 1,
    "aspect_ratio": "1:1",
    "style": null,
    "version": null,
    "personalization": false,
    "quality": 1.0,
    "character_reference": [],
    "character_weight": 100,
    "style_reference": [],
    "style_weight": null,
    "style_version": 2,
    "repeat": 2,
    "turbo": false,
    "relax": false,
    "tile": false,
    "negative_prompt": null,
    "extra_params": {}
  },
  {
    "text": "Three of iridescent hummingbirds drinking nectar from miniature orchids",
    "image_prompts": [],
    "stylize": 100,
    "chaos": 0,
    "weird": 0,
    "image_weight": 1.0,
    "seed": null,
    "stop": 100,
    "aspect_width": 1,
    "aspect_height": 1,
    "aspect_ratio": "1:1",
    "style": null,
    "version": null,
    "personalization": false,
    "quality": 1.0,
    "character_reference": [],
    "character_weight": 100,
    "style_reference": [],
    "style_weight": null,
    "style_version": 2,
    "repeat": 5,
    "turbo": false,
    "relax": false,
    "tile": false,
    "negative_prompt": null,
    "extra_params": {}
  }
]
```

## File: test-cases/prompts-out.txt (Size: 13.41 KB)

```
> mj '"Do not enter" sign in Elvish script, overgrown with vines --v 6 --stylize 250 --seed {12345, 67890}'
> fal '"Do not enter" sign in Elvish script, overgrown with vines --v 6 --stylize 250 --seed {12345, 67890}'
> json '"Do not enter" sign in Elvish script, overgrown with vines --v 6 --stylize 250 --seed {12345, 67890}'
> perm '"Do not enter" sign in Elvish script, overgrown with vines --v 6 --stylize 250 --seed {12345, 67890}'
> mj '"Lost in translation" neon sign in a Tokyo alleyway --v 6.1 --stylize 750 --weird 250'
> fal '"Lost in translation" neon sign in a Tokyo alleyway --v 6.1 --stylize 750 --weird 250'
> json '"Lost in translation" neon sign in a Tokyo alleyway --v 6.1 --stylize 750 --weird 250'
> perm '"Lost in translation" neon sign in a Tokyo alleyway --v 6.1 --stylize 750 --weird 250'
> mj '"Made in Midjourney" stamp on a vintage postage stamp --v 6.1 --stylize 1000 --zoom 1.5 --ar 1:2'
> fal '"Made in Midjourney" stamp on a vintage postage stamp --v 6.1 --stylize 1000 --zoom 1.5 --ar 1:2'
> json '"Made in Midjourney" stamp on a vintage postage stamp --v 6.1 --stylize 1000 --zoom 1.5 --ar 1:2'
> perm '"Made in Midjourney" stamp on a vintage postage stamp --v 6.1 --stylize 1000 --zoom 1.5 --ar 1:2'
> mj 'A black and white oak tree icon --style {raw, default} --stylize {0, 1000} --weird {0, 3000}'
> fal 'A black and white oak tree icon --style {raw, default} --stylize {0, 1000} --weird {0, 3000}'
> json 'A black and white oak tree icon --style {raw, default} --stylize {0, 1000} --weird {0, 3000}'
> perm 'A black and white oak tree icon --style {raw, default} --stylize {0, 1000} --weird {0, 3000}'
> mj 'A botanical sketch of fern fronds --video --version {5.2, 6} --ar {1:1, 16:9} --chaos 30'
> fal 'A botanical sketch of fern fronds --video --version {5.2, 6} --ar {1:1, 16:9} --chaos 30'
> json 'A botanical sketch of fern fronds --video --version {5.2, 6} --ar {1:1, 16:9} --chaos 30'
> perm 'A botanical sketch of fern fronds --video --version {5.2, 6} --ar {1:1, 16:9} --chaos 30'
> mj 'A cartoon drawing of a manual with the words "read the docs" in big text on the pages --v 6 --stylize 100 --ar 2:3'
> fal 'A cartoon drawing of a manual with the words "read the docs" in big text on the pages --v 6 --stylize 100 --ar 2:3'
> json 'A cartoon drawing of a manual with the words "read the docs" in big text on the pages --v 6 --stylize 100 --ar 2:3'
> perm 'A cartoon drawing of a manual with the words "read the docs" in big text on the pages --v 6 --stylize 100 --ar 2:3'
> mj 'A cat in a {Tundra, Jungle, City} environment --ar 3:2 --stop 80 --weird 2000'
> fal 'A cat in a {Tundra, Jungle, City} environment --ar 3:2 --stop 80 --weird 2000'
> json 'A cat in a {Tundra, Jungle, City} environment --ar 3:2 --stop 80 --weird 2000'
> perm 'A cat in a {Tundra, Jungle, City} environment --ar 3:2 --stop 80 --weird 2000'
> mj 'A child's crayon drawing of a cat --version {5.2, 6} --style raw --stylize {50, 750} --quality {.25, 1}'
> fal 'A child's crayon drawing of a cat --version {5.2, 6} --style raw --stylize {50, 750} --quality {.25, 1}'
> json 'A child's crayon drawing of a cat --version {5.2, 6} --style raw --stylize {50, 750} --quality {.25, 1}'
> perm 'A child's crayon drawing of a cat --version {5.2, 6} --style raw --stylize {50, 750} --quality {.25, 1}'
> mj 'A cyberpunk cat with a neon sign that says "Midjourney" --v 6 --stylize 500 --ar 1:1'
> fal 'A cyberpunk cat with a neon sign that says "Midjourney" --v 6 --stylize 500 --ar 1:1'
> json 'A cyberpunk cat with a neon sign that says "Midjourney" --v 6 --stylize 500 --ar 1:1'
> perm 'A cyberpunk cat with a neon sign that says "Midjourney" --v 6 --stylize 500 --ar 1:1'
> mj 'A pastel watercolor landscape with "/imagine" written in the clouds --v 6.1 --stylize 250 --ar 16:9'
> fal 'A pastel watercolor landscape with "/imagine" written in the clouds --v 6.1 --stylize 250 --ar 16:9'
> json 'A pastel watercolor landscape with "/imagine" written in the clouds --v 6.1 --stylize 250 --ar 16:9'
> perm 'A pastel watercolor landscape with "/imagine" written in the clouds --v 6.1 --stylize 250 --ar 16:9'
> mj 'A pattern of {pink and blue striped river stones, colorful watercolor fall leaves} --tile --chaos {25, 75}'
> fal 'A pattern of {pink and blue striped river stones, colorful watercolor fall leaves} --tile --chaos {25, 75}'
> json 'A pattern of {pink and blue striped river stones, colorful watercolor fall leaves} --tile --chaos {25, 75}'
> perm 'A pattern of {pink and blue striped river stones, colorful watercolor fall leaves} --tile --chaos {25, 75}'
> mj 'A pencil sketch of a dragon made of constellations --ar 2:3 --style random-64 --no color, shading'
> fal 'A pencil sketch of a dragon made of constellations --ar 2:3 --style random-64 --no color, shading'
> json 'A pencil sketch of a dragon made of constellations --ar 2:3 --style random-64 --no color, shading'
> perm 'A pencil sketch of a dragon made of constellations --ar 2:3 --style random-64 --no color, shading'
> mj 'A portrait of a melancholic robot butler --cref <image URL of classic butler> --cw {0, 50, 100} --sref <image URL of sad painting> --sw {100, 800}'
> fal 'A portrait of a melancholic robot butler --cref <image URL of classic butler> --cw {0, 50, 100} --sref <image URL of sad painting> --sw {100, 800}'
> json 'A portrait of a melancholic robot butler --cref <image URL of classic butler> --cw {0, 50, 100} --sref <image URL of sad painting> --sw {100, 800}'
> perm 'A portrait of a melancholic robot butler --cref <image URL of classic butler> --cw {0, 50, 100} --sref <image URL of sad painting> --sw {100, 800}'
> mj 'A surreal sculpture made of clockwork oranges and melting clocks --weird {500, 1500} --chaos 80 --stop {30, 70}'
> fal 'A surreal sculpture made of clockwork oranges and melting clocks --weird {500, 1500} --chaos 80 --stop {30, 70}'
> json 'A surreal sculpture made of clockwork oranges and melting clocks --weird {500, 1500} --chaos 80 --stop {30, 70}'
> perm 'A surreal sculpture made of clockwork oranges and melting clocks --weird {500, 1500} --chaos 80 --stop {30, 70}'
> mj 'A vibrant California poppies image --aspect {5:4, 7:4} --chaos {10, 50} --quality {.5, 1} --seed {random, 4294967295}'
> fal 'A vibrant California poppies image --aspect {5:4, 7:4} --chaos {10, 50} --quality {.5, 1} --seed {random, 4294967295}'
> json 'A vibrant California poppies image --aspect {5:4, 7:4} --chaos {10, 50} --quality {.5, 1} --seed {random, 4294967295}'
> perm 'A vibrant California poppies image --aspect {5:4, 7:4} --chaos {10, 50} --quality {.5, 1} --seed {random, 4294967295}'
> mj 'A {continuous line, loose gestural} charcoal drawing of a value study of a cyborg geisha --stop 50 --q 0.5'
> fal 'A {continuous line, loose gestural} charcoal drawing of a value study of a cyborg geisha --stop 50 --q 0.5'
> json 'A {continuous line, loose gestural} charcoal drawing of a value study of a cyborg geisha --stop 50 --q 0.5'
> perm 'A {continuous line, loose gestural} charcoal drawing of a value study of a cyborg geisha --stop 50 --q 0.5'
> mj 'A {dreary, vibrant} cyberpunk cityscape --ar {16:9, 1:1} --style {raw, random} --chaos {0, 100}'
> fal 'A {dreary, vibrant} cyberpunk cityscape --ar {16:9, 1:1} --style {raw, random} --chaos {0, 100}'
> json 'A {dreary, vibrant} cyberpunk cityscape --ar {16:9, 1:1} --style {raw, random} --chaos {0, 100}'
> perm 'A {dreary, vibrant} cyberpunk cityscape --ar {16:9, 1:1} --style {raw, random} --chaos {0, 100}'
> mj 'A {Millennial Pink, Acid Green, Ebony} colored cat --s 250 --style random-16 --no monochrome'
> fal 'A {Millennial Pink, Acid Green, Ebony} colored cat --s 250 --style random-16 --no monochrome'
> json 'A {Millennial Pink, Acid Green, Ebony} colored cat --s 250 --style random-16 --no monochrome'
> perm 'A {Millennial Pink, Acid Green, Ebony} colored cat --s 250 --style random-16 --no monochrome'
> mj 'A {pastel, blacklight} painting of a {determined, sleepy} sloth riding a unicorn through a {crystal forest, salt flat} --chaos 25'
> fal 'A {pastel, blacklight} painting of a {determined, sleepy} sloth riding a unicorn through a {crystal forest, salt flat} --chaos 25'
> json 'A {pastel, blacklight} painting of a {determined, sleepy} sloth riding a unicorn through a {crystal forest, salt flat} --chaos 25'
> perm 'A {pastel, blacklight} painting of a {determined, sleepy} sloth riding a unicorn through a {crystal forest, salt flat} --chaos 25'
> mj 'A {pixel art, acrylic pour} style cat --style random-128 --weird 1000 --no fur, whiskers'
> fal 'A {pixel art, acrylic pour} style cat --style random-128 --weird 1000 --no fur, whiskers'
> json 'A {pixel art, acrylic pour} style cat --style random-128 --weird 1000 --no fur, whiskers'
> perm 'A {pixel art, acrylic pour} style cat --style random-128 --weird 1000 --no fur, whiskers'
> mj 'An impressionistic watercolor of a cat playing chess with a dog --ar 4:3 --s 50 --no board, pieces --style raw'
> fal 'An impressionistic watercolor of a cat playing chess with a dog --ar 4:3 --s 50 --no board, pieces --style raw'
> json 'An impressionistic watercolor of a cat playing chess with a dog --ar 4:3 --s 50 --no board, pieces --style raw'
> perm 'An impressionistic watercolor of a cat playing chess with a dog --ar 4:3 --s 50 --no board, pieces --style raw'
> mj 'cheese:: cake:: painting multi-prompt --negative weight fruit::-.5 --version 4 --chaos 60'
> fal 'cheese:: cake:: painting multi-prompt --negative weight fruit::-.5 --version 4 --chaos 60'
> json 'cheese:: cake:: painting multi-prompt --negative weight fruit::-.5 --version 4 --chaos 60'
> perm 'cheese:: cake:: painting multi-prompt --negative weight fruit::-.5 --version 4 --chaos 60'
> mj 'Clockwork chicken --weird {750, 1750, 2750} --stylize {200, 600, 900} --ar {2:3, 3:2}'
> fal 'Clockwork chicken --weird {750, 1750, 2750} --stylize {200, 600, 900} --ar {2:3, 3:2}'
> json 'Clockwork chicken --weird {750, 1750, 2750} --stylize {200, 600, 900} --ar {2:3, 3:2}'
> perm 'Clockwork chicken --weird {750, 1750, 2750} --stylize {200, 600, 900} --ar {2:3, 3:2}'
> mj 'Cyanotype cat --weird {250, 1000, 2000} --stylize {100, 500, 1000} --chaos {10, 50, 90}'
> fal 'Cyanotype cat --weird {250, 1000, 2000} --stylize {100, 500, 1000} --chaos {10, 50, 90}'
> json 'Cyanotype cat --weird {250, 1000, 2000} --stylize {100, 500, 1000} --chaos {10, 50, 90}'
> perm 'Cyanotype cat --weird {250, 1000, 2000} --stylize {100, 500, 1000} --chaos {10, 50, 90}'
> mj 'Ice cream icon --niji {5, 6} --style {cute, expressive} --weird {250, 1000} --ar {1:1, 2:3}'
> fal 'Ice cream icon --niji {5, 6} --style {cute, expressive} --weird {250, 1000} --ar {1:1, 2:3}'
> json 'Ice cream icon --niji {5, 6} --style {cute, expressive} --weird {250, 1000} --ar {1:1, 2:3}'
> perm 'Ice cream icon --niji {5, 6} --style {cute, expressive} --weird {250, 1000} --ar {1:1, 2:3}'
> mj 'image of a robot holding flowers --remix --prompt "A cyborg holding cybernetic orchids" --zoom 2x'
> fal 'image of a robot holding flowers --remix --prompt "A cyborg holding cybernetic orchids" --zoom 2x'
> json 'image of a robot holding flowers --remix --prompt "A cyborg holding cybernetic orchids" --zoom 2x'
> perm 'image of a robot holding flowers --remix --prompt "A cyborg holding cybernetic orchids" --zoom 2x'
> mj 'Imagine a {1400s, 1990s} cat --sref <image URL of medieval tapestry> --sv {1, 4} --ar 5:4'
> fal 'Imagine a {1400s, 1990s} cat --sref <image URL of medieval tapestry> --sv {1, 4} --ar 5:4'
> json 'Imagine a {1400s, 1990s} cat --sref <image URL of medieval tapestry> --sv {1, 4} --ar 5:4'
> perm 'Imagine a {1400s, 1990s} cat --sref <image URL of medieval tapestry> --sv {1, 4} --ar 5:4'
> mj 'Lithograph potato --weird {500, 1500, 2500} --chaos {20, 60, 80} --quality {.5, 1}'
> fal 'Lithograph potato --weird {500, 1500, 2500} --chaos {20, 60, 80} --quality {.5, 1}'
> json 'Lithograph potato --weird {500, 1500, 2500} --chaos {20, 60, 80} --quality {.5, 1}'
> perm 'Lithograph potato --weird {500, 1500, 2500} --chaos {20, 60, 80} --quality {.5, 1}'
> mj 'space:: ship multi-prompt  --stylize {250, 750} --weird 500'
> fal 'space:: ship multi-prompt  --stylize {250, 750} --weird 500'
> json 'space:: ship multi-prompt  --stylize {250, 750} --weird 500'
> perm 'space:: ship multi-prompt  --stylize {250, 750} --weird 500'
> mj 'stream running through a redwood forest --vary region --selection "sky area" --prompt "aurora borealis" --pan up'
> fal 'stream running through a redwood forest --vary region --selection "sky area" --prompt "aurora borealis" --pan up'
> json 'stream running through a redwood forest --vary region --selection "sky area" --prompt "aurora borealis" --pan up'
> perm 'stream running through a redwood forest --vary region --selection "sky area" --prompt "aurora borealis" --pan up'
> mj 'Vibrant California poppies --version {5.2, 6, 6.1} --stylize {100, 500} --quality {1, 2}'
> fal 'Vibrant California poppies --version {5.2, 6, 6.1} --stylize {100, 500} --quality {1, 2}'
> json 'Vibrant California poppies --version {5.2, 6, 6.1} --stylize {100, 500} --quality {1, 2}'
> perm 'Vibrant California poppies --version {5.2, 6, 6.1} --stylize {100, 500} --quality {1, 2}'
> mj '{A flock, Three} of iridescent hummingbirds drinking nectar from {gigantic, miniature} orchids --q {0.25, 1} --repeat {2, 5}'
> fal '{A flock, Three} of iridescent hummingbirds drinking nectar from {gigantic, miniature} orchids --q {0.25, 1} --repeat {2, 5}'
> json '{A flock, Three} of iridescent hummingbirds drinking nectar from {gigantic, miniature} orchids --q {0.25, 1} --repeat {2, 5}'
> perm '{A flock, Three} of iridescent hummingbirds drinking nectar from {gigantic, miniature} orchids --q {0.25, 1} --repeat {2, 5}'
```

## File: test-cases/prompts-perm.txt (Size: 19.07 KB)

```
======
"Do not enter" sign in Elvish script, overgrown with vines --v 6 --stylize 250 --seed {12345, 67890}
[
  "\"Do not enter\" sign in Elvish script, overgrown with vines --v 6 --stylize 250 --seed 12345",
  "\"Do not enter\" sign in Elvish script, overgrown with vines --v 6 --stylize 250 --seed 67890"
]======
"Lost in translation" neon sign in a Tokyo alleyway --v 6.1 --stylize 750 --weird 250
[
  "\"Lost in translation\" neon sign in a Tokyo alleyway --v 6.1 --stylize 750 --weird 250"
]======
"Made in Midjourney" stamp on a vintage postage stamp --v 6.1 --stylize 1000 --zoom 1.5 --ar 1:2
[
  "\"Made in Midjourney\" stamp on a vintage postage stamp --v 6.1 --stylize 1000 --zoom 1.5 --ar 1:2"
]======
A black and white oak tree icon --style {raw, default} --stylize {0, 1000} --weird {0, 3000}
[
  "A black and white oak tree icon --style raw --stylize 0 --weird 0",
  "A black and white oak tree icon --style raw --stylize 0 --weird 3000",
  "A black and white oak tree icon --style raw --stylize 1000 --weird 0",
  "A black and white oak tree icon --style raw --stylize 1000 --weird 3000",
  "A black and white oak tree icon --style default --stylize 0 --weird 0",
  "A black and white oak tree icon --style default --stylize 0 --weird 3000",
  "A black and white oak tree icon --style default --stylize 1000 --weird 0",
  "A black and white oak tree icon --style default --stylize 1000 --weird 3000"
]======
A botanical sketch of fern fronds --video --version {5.2, 6} --ar {1:1, 16:9} --chaos 30
[
  "A botanical sketch of fern fronds --video --version 5.2 --ar 1:1 --chaos 30",
  "A botanical sketch of fern fronds --video --version 5.2 --ar 16:9 --chaos 30",
  "A botanical sketch of fern fronds --video --version 6 --ar 1:1 --chaos 30",
  "A botanical sketch of fern fronds --video --version 6 --ar 16:9 --chaos 30"
]======
A cartoon drawing of a manual with the words "read the docs" in big text on the pages --v 6 --stylize 100 --ar 2:3
[
  "A cartoon drawing of a manual with the words \"read the docs\" in big text on the pages --v 6 --stylize 100 --ar 2:3"
]======
A cat in a {Tundra, Jungle, City} environment --ar 3:2 --stop 80 --weird 2000
[
  "A cat in a Tundra environment --ar 3:2 --stop 80 --weird 2000",
  "A cat in a Jungle environment --ar 3:2 --stop 80 --weird 2000",
  "A cat in a City environment --ar 3:2 --stop 80 --weird 2000"
]======
A child's crayon drawing of a cat --version {5.2, 6} --style raw --stylize {50, 750} --quality {.25, 1}
[
  "A child's crayon drawing of a cat --version 5.2 --style raw --stylize 50 --quality .25",
  "A child's crayon drawing of a cat --version 5.2 --style raw --stylize 50 --quality 1",
  "A child's crayon drawing of a cat --version 5.2 --style raw --stylize 750 --quality .25",
  "A child's crayon drawing of a cat --version 5.2 --style raw --stylize 750 --quality 1",
  "A child's crayon drawing of a cat --version 6 --style raw --stylize 50 --quality .25",
  "A child's crayon drawing of a cat --version 6 --style raw --stylize 50 --quality 1",
  "A child's crayon drawing of a cat --version 6 --style raw --stylize 750 --quality .25",
  "A child's crayon drawing of a cat --version 6 --style raw --stylize 750 --quality 1"
]======
A cyberpunk cat with a neon sign that says "Midjourney" --v 6 --stylize 500 --ar 1:1
[
  "A cyberpunk cat with a neon sign that says \"Midjourney\" --v 6 --stylize 500 --ar 1:1"
]======
A pastel watercolor landscape with "/imagine" written in the clouds --v 6.1 --stylize 250 --ar 16:9
[
  "A pastel watercolor landscape with \"/imagine\" written in the clouds --v 6.1 --stylize 250 --ar 16:9"
]======
A pattern of {pink and blue striped river stones, colorful watercolor fall leaves} --tile --chaos {25, 75}
[
  "A pattern of pink and blue striped river stones --tile --chaos 25",
  "A pattern of pink and blue striped river stones --tile --chaos 75",
  "A pattern of colorful watercolor fall leaves --tile --chaos 25",
  "A pattern of colorful watercolor fall leaves --tile --chaos 75"
]======
A pencil sketch of a dragon made of constellations --ar 2:3 --style random-64 --no color, shading
[
  "A pencil sketch of a dragon made of constellations --ar 2:3 --style random-64 --no color, shading"
]======
A portrait of a melancholic robot butler --cref <image URL of classic butler> --cw {0, 50, 100} --sref <image URL of sad painting> --sw {100, 800}
[
  "A portrait of a melancholic robot butler --cref <image URL of classic butler> --cw 0 --sref <image URL of sad painting> --sw 100",
  "A portrait of a melancholic robot butler --cref <image URL of classic butler> --cw 0 --sref <image URL of sad painting> --sw 800",
  "A portrait of a melancholic robot butler --cref <image URL of classic butler> --cw 50 --sref <image URL of sad painting> --sw 100",
  "A portrait of a melancholic robot butler --cref <image URL of classic butler> --cw 50 --sref <image URL of sad painting> --sw 800",
  "A portrait of a melancholic robot butler --cref <image URL of classic butler> --cw 100 --sref <image URL of sad painting> --sw 100",
  "A portrait of a melancholic robot butler --cref <image URL of classic butler> --cw 100 --sref <image URL of sad painting> --sw 800"
]======
A surreal sculpture made of clockwork oranges and melting clocks --weird {500, 1500} --chaos 80 --stop {30, 70}
[
  "A surreal sculpture made of clockwork oranges and melting clocks --weird 500 --chaos 80 --stop 30",
  "A surreal sculpture made of clockwork oranges and melting clocks --weird 500 --chaos 80 --stop 70",
  "A surreal sculpture made of clockwork oranges and melting clocks --weird 1500 --chaos 80 --stop 30",
  "A surreal sculpture made of clockwork oranges and melting clocks --weird 1500 --chaos 80 --stop 70"
]======
A vibrant California poppies image --aspect {5:4, 7:4} --chaos {10, 50} --quality {.5, 1} --seed {random, 4294967295}
[
  "A vibrant California poppies image --aspect 5:4 --chaos 10 --quality .5 --seed random",
  "A vibrant California poppies image --aspect 5:4 --chaos 10 --quality .5 --seed 4294967295",
  "A vibrant California poppies image --aspect 5:4 --chaos 10 --quality 1 --seed random",
  "A vibrant California poppies image --aspect 5:4 --chaos 10 --quality 1 --seed 4294967295",
  "A vibrant California poppies image --aspect 5:4 --chaos 50 --quality .5 --seed random",
  "A vibrant California poppies image --aspect 5:4 --chaos 50 --quality .5 --seed 4294967295",
  "A vibrant California poppies image --aspect 5:4 --chaos 50 --quality 1 --seed random",
  "A vibrant California poppies image --aspect 5:4 --chaos 50 --quality 1 --seed 4294967295",
  "A vibrant California poppies image --aspect 7:4 --chaos 10 --quality .5 --seed random",
  "A vibrant California poppies image --aspect 7:4 --chaos 10 --quality .5 --seed 4294967295",
  "A vibrant California poppies image --aspect 7:4 --chaos 10 --quality 1 --seed random",
  "A vibrant California poppies image --aspect 7:4 --chaos 10 --quality 1 --seed 4294967295",
  "A vibrant California poppies image --aspect 7:4 --chaos 50 --quality .5 --seed random",
  "A vibrant California poppies image --aspect 7:4 --chaos 50 --quality .5 --seed 4294967295",
  "A vibrant California poppies image --aspect 7:4 --chaos 50 --quality 1 --seed random",
  "A vibrant California poppies image --aspect 7:4 --chaos 50 --quality 1 --seed 4294967295"
]======
A {continuous line, loose gestural} charcoal drawing of a value study of a cyborg geisha --stop 50 --q 0.5
[
  "A continuous line charcoal drawing of a value study of a cyborg geisha --stop 50 --q 0.5",
  "A loose gestural charcoal drawing of a value study of a cyborg geisha --stop 50 --q 0.5"
]======
A {dreary, vibrant} cyberpunk cityscape --ar {16:9, 1:1} --style {raw, random} --chaos {0, 100}
[
  "A dreary cyberpunk cityscape --ar 16:9 --style raw --chaos 0",
  "A dreary cyberpunk cityscape --ar 16:9 --style raw --chaos 100",
  "A dreary cyberpunk cityscape --ar 16:9 --style random --chaos 0",
  "A dreary cyberpunk cityscape --ar 16:9 --style random --chaos 100",
  "A dreary cyberpunk cityscape --ar 1:1 --style raw --chaos 0",
  "A dreary cyberpunk cityscape --ar 1:1 --style raw --chaos 100",
  "A dreary cyberpunk cityscape --ar 1:1 --style random --chaos 0",
  "A dreary cyberpunk cityscape --ar 1:1 --style random --chaos 100",
  "A vibrant cyberpunk cityscape --ar 16:9 --style raw --chaos 0",
  "A vibrant cyberpunk cityscape --ar 16:9 --style raw --chaos 100",
  "A vibrant cyberpunk cityscape --ar 16:9 --style random --chaos 0",
  "A vibrant cyberpunk cityscape --ar 16:9 --style random --chaos 100",
  "A vibrant cyberpunk cityscape --ar 1:1 --style raw --chaos 0",
  "A vibrant cyberpunk cityscape --ar 1:1 --style raw --chaos 100",
  "A vibrant cyberpunk cityscape --ar 1:1 --style random --chaos 0",
  "A vibrant cyberpunk cityscape --ar 1:1 --style random --chaos 100"
]======
A {Millennial Pink, Acid Green, Ebony} colored cat --s 250 --style random-16 --no monochrome
[
  "A Millennial Pink colored cat --s 250 --style random-16 --no monochrome",
  "A Acid Green colored cat --s 250 --style random-16 --no monochrome",
  "A Ebony colored cat --s 250 --style random-16 --no monochrome"
]======
A {pastel, blacklight} painting of a {determined, sleepy} sloth riding a unicorn through a {crystal forest, salt flat} --chaos 25
[
  "A pastel painting of a determined sloth riding a unicorn through a crystal forest --chaos 25",
  "A pastel painting of a determined sloth riding a unicorn through a salt flat --chaos 25",
  "A pastel painting of a sleepy sloth riding a unicorn through a crystal forest --chaos 25",
  "A pastel painting of a sleepy sloth riding a unicorn through a salt flat --chaos 25",
  "A blacklight painting of a determined sloth riding a unicorn through a crystal forest --chaos 25",
  "A blacklight painting of a determined sloth riding a unicorn through a salt flat --chaos 25",
  "A blacklight painting of a sleepy sloth riding a unicorn through a crystal forest --chaos 25",
  "A blacklight painting of a sleepy sloth riding a unicorn through a salt flat --chaos 25"
]======
A {pixel art, acrylic pour} style cat --style random-128 --weird 1000 --no fur, whiskers
[
  "A pixel art style cat --style random-128 --weird 1000 --no fur, whiskers",
  "A acrylic pour style cat --style random-128 --weird 1000 --no fur, whiskers"
]======
An impressionistic watercolor of a cat playing chess with a dog --ar 4:3 --s 50 --no board, pieces --style raw
[
  "An impressionistic watercolor of a cat playing chess with a dog --ar 4:3 --s 50 --no board, pieces --style raw"
]======
cheese:: cake:: painting multi-prompt --negative weight fruit::-.5 --version 4 --chaos 60
[
  "cheese:: cake:: painting multi-prompt --negative weight fruit::-.5 --version 4 --chaos 60"
]======
Clockwork chicken --weird {750, 1750, 2750} --stylize {200, 600, 900} --ar {2:3, 3:2}
[
  "Clockwork chicken --weird 750 --stylize 200 --ar 2:3",
  "Clockwork chicken --weird 750 --stylize 200 --ar 3:2",
  "Clockwork chicken --weird 750 --stylize 600 --ar 2:3",
  "Clockwork chicken --weird 750 --stylize 600 --ar 3:2",
  "Clockwork chicken --weird 750 --stylize 900 --ar 2:3",
  "Clockwork chicken --weird 750 --stylize 900 --ar 3:2",
  "Clockwork chicken --weird 1750 --stylize 200 --ar 2:3",
  "Clockwork chicken --weird 1750 --stylize 200 --ar 3:2",
  "Clockwork chicken --weird 1750 --stylize 600 --ar 2:3",
  "Clockwork chicken --weird 1750 --stylize 600 --ar 3:2",
  "Clockwork chicken --weird 1750 --stylize 900 --ar 2:3",
  "Clockwork chicken --weird 1750 --stylize 900 --ar 3:2",
  "Clockwork chicken --weird 2750 --stylize 200 --ar 2:3",
  "Clockwork chicken --weird 2750 --stylize 200 --ar 3:2",
  "Clockwork chicken --weird 2750 --stylize 600 --ar 2:3",
  "Clockwork chicken --weird 2750 --stylize 600 --ar 3:2",
  "Clockwork chicken --weird 2750 --stylize 900 --ar 2:3",
  "Clockwork chicken --weird 2750 --stylize 900 --ar 3:2"
]======
Cyanotype cat --weird {250, 1000, 2000} --stylize {100, 500, 1000} --chaos {10, 50, 90}
[
  "Cyanotype cat --weird 250 --stylize 100 --chaos 10",
  "Cyanotype cat --weird 250 --stylize 100 --chaos 50",
  "Cyanotype cat --weird 250 --stylize 100 --chaos 90",
  "Cyanotype cat --weird 250 --stylize 500 --chaos 10",
  "Cyanotype cat --weird 250 --stylize 500 --chaos 50",
  "Cyanotype cat --weird 250 --stylize 500 --chaos 90",
  "Cyanotype cat --weird 250 --stylize 1000 --chaos 10",
  "Cyanotype cat --weird 250 --stylize 1000 --chaos 50",
  "Cyanotype cat --weird 250 --stylize 1000 --chaos 90",
  "Cyanotype cat --weird 1000 --stylize 100 --chaos 10",
  "Cyanotype cat --weird 1000 --stylize 100 --chaos 50",
  "Cyanotype cat --weird 1000 --stylize 100 --chaos 90",
  "Cyanotype cat --weird 1000 --stylize 500 --chaos 10",
  "Cyanotype cat --weird 1000 --stylize 500 --chaos 50",
  "Cyanotype cat --weird 1000 --stylize 500 --chaos 90",
  "Cyanotype cat --weird 1000 --stylize 1000 --chaos 10",
  "Cyanotype cat --weird 1000 --stylize 1000 --chaos 50",
  "Cyanotype cat --weird 1000 --stylize 1000 --chaos 90",
  "Cyanotype cat --weird 2000 --stylize 100 --chaos 10",
  "Cyanotype cat --weird 2000 --stylize 100 --chaos 50",
  "Cyanotype cat --weird 2000 --stylize 100 --chaos 90",
  "Cyanotype cat --weird 2000 --stylize 500 --chaos 10",
  "Cyanotype cat --weird 2000 --stylize 500 --chaos 50",
  "Cyanotype cat --weird 2000 --stylize 500 --chaos 90",
  "Cyanotype cat --weird 2000 --stylize 1000 --chaos 10",
  "Cyanotype cat --weird 2000 --stylize 1000 --chaos 50",
  "Cyanotype cat --weird 2000 --stylize 1000 --chaos 90"
]======
Ice cream icon --niji {5, 6} --style {cute, expressive} --weird {250, 1000} --ar {1:1, 2:3}
[
  "Ice cream icon --niji 5 --style cute --weird 250 --ar 1:1",
  "Ice cream icon --niji 5 --style cute --weird 250 --ar 2:3",
  "Ice cream icon --niji 5 --style cute --weird 1000 --ar 1:1",
  "Ice cream icon --niji 5 --style cute --weird 1000 --ar 2:3",
  "Ice cream icon --niji 5 --style expressive --weird 250 --ar 1:1",
  "Ice cream icon --niji 5 --style expressive --weird 250 --ar 2:3",
  "Ice cream icon --niji 5 --style expressive --weird 1000 --ar 1:1",
  "Ice cream icon --niji 5 --style expressive --weird 1000 --ar 2:3",
  "Ice cream icon --niji 6 --style cute --weird 250 --ar 1:1",
  "Ice cream icon --niji 6 --style cute --weird 250 --ar 2:3",
  "Ice cream icon --niji 6 --style cute --weird 1000 --ar 1:1",
  "Ice cream icon --niji 6 --style cute --weird 1000 --ar 2:3",
  "Ice cream icon --niji 6 --style expressive --weird 250 --ar 1:1",
  "Ice cream icon --niji 6 --style expressive --weird 250 --ar 2:3",
  "Ice cream icon --niji 6 --style expressive --weird 1000 --ar 1:1",
  "Ice cream icon --niji 6 --style expressive --weird 1000 --ar 2:3"
]======
image of a robot holding flowers --remix --prompt "A cyborg holding cybernetic orchids" --zoom 2x
[
  "image of a robot holding flowers --remix --prompt \"A cyborg holding cybernetic orchids\" --zoom 2x"
]======
Imagine a {1400s, 1990s} cat --sref <image URL of medieval tapestry> --sv {1, 4} --ar 5:4
[
  "Imagine a 1400s cat --sref <image URL of medieval tapestry> --sv 1 --ar 5:4",
  "Imagine a 1400s cat --sref <image URL of medieval tapestry> --sv 4 --ar 5:4",
  "Imagine a 1990s cat --sref <image URL of medieval tapestry> --sv 1 --ar 5:4",
  "Imagine a 1990s cat --sref <image URL of medieval tapestry> --sv 4 --ar 5:4"
]======
Lithograph potato --weird {500, 1500, 2500} --chaos {20, 60, 80} --quality {.5, 1}
[
  "Lithograph potato --weird 500 --chaos 20 --quality .5",
  "Lithograph potato --weird 500 --chaos 20 --quality 1",
  "Lithograph potato --weird 500 --chaos 60 --quality .5",
  "Lithograph potato --weird 500 --chaos 60 --quality 1",
  "Lithograph potato --weird 500 --chaos 80 --quality .5",
  "Lithograph potato --weird 500 --chaos 80 --quality 1",
  "Lithograph potato --weird 1500 --chaos 20 --quality .5",
  "Lithograph potato --weird 1500 --chaos 20 --quality 1",
  "Lithograph potato --weird 1500 --chaos 60 --quality .5",
  "Lithograph potato --weird 1500 --chaos 60 --quality 1",
  "Lithograph potato --weird 1500 --chaos 80 --quality .5",
  "Lithograph potato --weird 1500 --chaos 80 --quality 1",
  "Lithograph potato --weird 2500 --chaos 20 --quality .5",
  "Lithograph potato --weird 2500 --chaos 20 --quality 1",
  "Lithograph potato --weird 2500 --chaos 60 --quality .5",
  "Lithograph potato --weird 2500 --chaos 60 --quality 1",
  "Lithograph potato --weird 2500 --chaos 80 --quality .5",
  "Lithograph potato --weird 2500 --chaos 80 --quality 1"
]======
space:: ship multi-prompt --stylize {250, 750} --weird 500
[
  "space:: ship multi-prompt  --stylize 250 --weird 500",
  "space:: ship multi-prompt  --stylize 750 --weird 500"
]======
stream running through a redwood forest --vary region --selection "sky area" --prompt "aurora borealis" --pan up
[
  "stream running through a redwood forest --vary region --selection \"sky area\" --prompt \"aurora borealis\" --pan up"
]======
Vibrant California poppies --version {5.2, 6, 6.1} --stylize {100, 500} --quality {1, 2}
[
  "Vibrant California poppies --version 5.2 --stylize 100 --quality 1",
  "Vibrant California poppies --version 5.2 --stylize 100 --quality 2",
  "Vibrant California poppies --version 5.2 --stylize 500 --quality 1",
  "Vibrant California poppies --version 5.2 --stylize 500 --quality 2",
  "Vibrant California poppies --version 6 --stylize 100 --quality 1",
  "Vibrant California poppies --version 6 --stylize 100 --quality 2",
  "Vibrant California poppies --version 6 --stylize 500 --quality 1",
  "Vibrant California poppies --version 6 --stylize 500 --quality 2",
  "Vibrant California poppies --version 6.1 --stylize 100 --quality 1",
  "Vibrant California poppies --version 6.1 --stylize 100 --quality 2",
  "Vibrant California poppies --version 6.1 --stylize 500 --quality 1",
  "Vibrant California poppies --version 6.1 --stylize 500 --quality 2"
]======
{A flock, Three} of iridescent hummingbirds drinking nectar from {gigantic, miniature} orchids --q {0.25, 1} --repeat {2, 5}
[
  "A flock of iridescent hummingbirds drinking nectar from gigantic orchids --q 0.25 --repeat 2",
  "A flock of iridescent hummingbirds drinking nectar from gigantic orchids --q 0.25 --repeat 5",
  "A flock of iridescent hummingbirds drinking nectar from gigantic orchids --q 1 --repeat 2",
  "A flock of iridescent hummingbirds drinking nectar from gigantic orchids --q 1 --repeat 5",
  "A flock of iridescent hummingbirds drinking nectar from miniature orchids --q 0.25 --repeat 2",
  "A flock of iridescent hummingbirds drinking nectar from miniature orchids --q 0.25 --repeat 5",
  "A flock of iridescent hummingbirds drinking nectar from miniature orchids --q 1 --repeat 2",
  "A flock of iridescent hummingbirds drinking nectar from miniature orchids --q 1 --repeat 5",
  "Three of iridescent hummingbirds drinking nectar from gigantic orchids --q 0.25 --repeat 2",
  "Three of iridescent hummingbirds drinking nectar from gigantic orchids --q 0.25 --repeat 5",
  "Three of iridescent hummingbirds drinking nectar from gigantic orchids --q 1 --repeat 2",
  "Three of iridescent hummingbirds drinking nectar from gigantic orchids --q 1 --repeat 5",
  "Three of iridescent hummingbirds drinking nectar from miniature orchids --q 0.25 --repeat 2",
  "Three of iridescent hummingbirds drinking nectar from miniature orchids --q 0.25 --repeat 5",
  "Three of iridescent hummingbirds drinking nectar from miniature orchids --q 1 --repeat 2",
  "Three of iridescent hummingbirds drinking nectar from miniature orchids --q 1 --repeat 5"
]
```

## File: test-cases/prompts.sh (Size: 0.44 KB)

```
#!/bin/env bash
# this_file: test-cases/prompts.sh

# THIS READS PROMPTS FROM prompts-in.txt
# THE ERRORS are in prompts-out.txt
# THE OUTPUT OF THE midjargon commands are in the -mj -fal -json -perm files

cat ./prompts-in.txt | while read p; do
    for o in mj fal json perm; do
        echo "> $o '$p'"
        echo "======" >>prompts-$o.txt
        echo $p >>prompts-$o.txt
        python -m midjargon $o "$p" -j >>prompts-$o.txt
    done

done
```

## File: tests/__init__.py (Size: 0.03 KB)

```
# this_file: tests/__init__.py
```

## File: tests/cli/__init__.py (Size: 0.03 KB)

```
# this_file: tests/cli/__init__.py
```

## File: tests/cli/test_main.py (Size: 10.77 KB)

```
#!/usr/bin/env -S uv run
# /// script
# dependencies = ["pytest", "rich"]
# ///
# this_file: tests/cli/test_main.py

"""Tests for CLI functionality."""

import json
import re
import sys
from io import StringIO
from typing import Any

import pytest
from rich.console import Console

from midjargon.cli.main import MidjargonCLI

# Test constants
ASPECT_WIDTH = 16
ASPECT_HEIGHT = 9
STYLIZE_VALUE = 100
CHAOS_VALUE = 50
IMAGE_PROMPTS_COUNT = 2
PERMUTATION_COUNT_2X2 = 4  # 2 options x 2 options

ANSI_ESCAPE = re.compile(r"\x1B[@-_][0-?]*[ -/]*[@-~]")


def parse_json_output(output_stream: StringIO) -> Any:
    """Parse JSON output from the CLI, removing ANSI escape sequences if any."""
    output_stream.seek(0)
    output = output_stream.getvalue()
    # Remove ANSI escape sequences
    output = ANSI_ESCAPE.sub("", output)
    output = output.strip()
    if not output:
        msg = "No JSON found in output"
        raise ValueError(msg)
    try:
        return json.loads(output)
    except json.JSONDecodeError as e:
        msg = "No JSON found in output"
        raise ValueError(msg) from e


@pytest.fixture
def cli():
    """Fixture to provide CLI instance."""
    return MidjargonCLI()


def test_basic_prompt(cli):
    """Test basic prompt processing."""
    with StringIO() as capture_stdout:
        sys.stdout = capture_stdout
        cli.json(
            f"a beautiful landscape --ar {ASPECT_WIDTH}:{ASPECT_HEIGHT}",
            json_output=True,
        )
        sys.stdout = sys.__stdout__
        data = parse_json_output(capture_stdout)
    assert isinstance(data, dict)
    assert data["text"] == "a beautiful landscape"
    assert data["aspect"] == f"{ASPECT_WIDTH}:{ASPECT_HEIGHT}"


def test_permutations(cli):
    """Test permutation processing."""
    with StringIO() as capture_stdout:
        sys.stdout = capture_stdout
        cli.perm("a {red, blue} bird", json_output=True)
        sys.stdout = sys.__stdout__
        data = parse_json_output(capture_stdout)
    assert isinstance(data, list)
    assert len(data) == 2
    texts = set(data)
    assert texts == {"a red bird", "a blue bird"}


def test_raw_output(cli):
    """Test raw output mode."""
    with StringIO() as capture_stdout:
        sys.stdout = capture_stdout
        cli.json(f"a photo --stylize {STYLIZE_VALUE}", json_output=True)
        sys.stdout = sys.__stdout__
        data = parse_json_output(capture_stdout)
    assert isinstance(data, dict)
    assert data["text"] == "a photo"
    assert data["stylize"] == STYLIZE_VALUE


def test_json_output_formatting(cli):
    """Test JSON output formatting."""
    with StringIO() as capture_stdout:
        sys.stdout = capture_stdout
        cli.json("a photo", json_output=True)
        sys.stdout = sys.__stdout__
        data = parse_json_output(capture_stdout)
    assert isinstance(data, dict)
    assert data["text"] == "a photo"
    assert "images" in data


def test_invalid_input(cli):
    """Test handling of invalid input."""
    with StringIO() as capture_stdout:
        sys.stdout = capture_stdout
        cli.json("", json_output=True)
        sys.stdout = sys.__stdout__
        data = parse_json_output(capture_stdout)
        assert data["text"] == ""


def test_parameter_validation(cli):
    """Test parameter validation."""
    with StringIO() as capture_stdout:
        sys.stdout = capture_stdout
        cli.json(
            f"a photo --stylize {STYLIZE_VALUE * 20}", json_output=True
        )  # Over max
        sys.stdout = sys.__stdout__
        data = parse_json_output(capture_stdout)
        assert data["stylize"] == STYLIZE_VALUE * 20  # Now accepts any value


def test_image_url_handling(cli):
    """Test handling of image URLs."""
    url = "https://example.com/image.jpg"
    with StringIO() as capture_stdout:
        sys.stdout = capture_stdout
        cli.json(f"{url} a fusion", json_output=True)
        sys.stdout = sys.__stdout__
        data = parse_json_output(capture_stdout)
    assert isinstance(data, dict)
    assert data["text"] == "a fusion"
    assert len(data["images"]) == 1
    assert data["images"][0] == url


def test_no_color_output(cli):
    """Test no-color output mode."""
    Console(force_terminal=False)
    with StringIO() as capture_stdout:
        sys.stdout = capture_stdout
        cli.json("a photo", json_output=True, no_color=True)
        sys.stdout = sys.__stdout__
        data = parse_json_output(capture_stdout)
    assert isinstance(data, dict)
    assert data["text"] == "a photo"


def test_complex_prompt(cli):
    """Test complex prompt with multiple features."""
    prompt = (
        "https://example.com/img1.jpg https://example.com/img2.jpg "
        "a {red, blue} bird on a {branch, rock} "
        f"--ar {ASPECT_WIDTH}:{ASPECT_HEIGHT} --stylize {STYLIZE_VALUE} --chaos {CHAOS_VALUE}"
    )
    with StringIO() as capture_stdout:
        sys.stdout = capture_stdout
        cli.json(prompt, json_output=True)
        sys.stdout = sys.__stdout__
        data = parse_json_output(capture_stdout)
    assert isinstance(data, list)
    assert len(data) == PERMUTATION_COUNT_2X2
    for prompt in data:
        assert len(prompt["images"]) == IMAGE_PROMPTS_COUNT
        assert prompt["stylize"] == STYLIZE_VALUE
        assert prompt["chaos"] == CHAOS_VALUE
        assert prompt["aspect"] == f"{ASPECT_WIDTH}:{ASPECT_HEIGHT}"


def test_personalization_parameter(cli):
    """Test personalization parameter handling in different forms."""
    # Test flag form (--p)
    with StringIO() as capture_stdout:
        sys.stdout = capture_stdout
        cli.json("a photo --p", json_output=True)
        sys.stdout = sys.__stdout__
        data = parse_json_output(capture_stdout)
    assert isinstance(data, dict)
    assert data["personalization"] is None  # Flag parameters should be None

    # Test with code (--p CODE1)
    with StringIO() as capture_stdout:
        sys.stdout = capture_stdout
        cli.json("a photo --p CODE1", json_output=True)
        sys.stdout = sys.__stdout__
        data = parse_json_output(capture_stdout)
    assert isinstance(data, dict)
    assert data["personalization"] == ["CODE1"]

    # Test with multiple codes (--p "CODE1 CODE2")
    with StringIO() as capture_stdout:
        sys.stdout = capture_stdout
        cli.json('a photo --p "CODE1 CODE2"', json_output=True)
        sys.stdout = sys.__stdout__
        data = parse_json_output(capture_stdout)
    assert isinstance(data, dict)
    assert data["personalization"] == ["CODE1", "CODE2"]


def test_numeric_range_permutations(cli):
    """Test handling of numeric parameters in permutations."""
    # Test stylize parameter range
    with StringIO() as capture_stdout:
        sys.stdout = capture_stdout
        cli.json("a photo --s {75, 300}", json_output=True)
        sys.stdout = sys.__stdout__
        data = parse_json_output(capture_stdout)
    assert isinstance(data, list)
    assert len(data) == 2
    stylize_values = {prompt["stylize"] for prompt in data}
    assert stylize_values == {75, 300}

    # Test multiple numeric parameters
    with StringIO() as capture_stdout:
        sys.stdout = capture_stdout
        cli.json("a photo --s {75, 300} --c {0, 50}", json_output=True)
        sys.stdout = sys.__stdout__
        data = parse_json_output(capture_stdout)
    assert isinstance(data, list)
    assert len(data) == 4  # 2x2 combinations
    stylize_values = {prompt["stylize"] for prompt in data}
    chaos_values = {prompt["chaos"] for prompt in data}
    assert stylize_values == {75, 300}
    assert chaos_values == {0, 50}


def test_nested_parameter_permutations(cli):
    """Test handling of nested permutations with parameters."""
    # Test personalization with nested options
    with StringIO() as capture_stdout:
        sys.stdout = capture_stdout
        cli.json("smooth edges {, --p {, CODE1}} --s {75, 300}", json_output=True)
        sys.stdout = sys.__stdout__
        data = parse_json_output(capture_stdout)
    assert isinstance(data, list)
    assert len(data) == 6  # 3x2 combinations (no --p, empty --p, --p CODE1) x (75, 300)

    # Verify all combinations
    variants = [
        (None, 75),  # No --p, stylize 75
        (None, 300),  # No --p, stylize 300
        (True, 75),  # Empty --p, stylize 75
        (True, 300),  # Empty --p, stylize 300
        (["CODE1"], 75),  # --p with code, stylize 75
        (["CODE1"], 300),  # --p with code, stylize 300
    ]
    for prompt in data:
        assert prompt["text"] == "smooth edges"
        assert (prompt.get("personalization"), prompt["stylize"]) in variants

    # Test more complex nested permutations
    with StringIO() as capture_stdout:
        sys.stdout = capture_stdout
        cli.json("smooth edges {, --p {, CODE1 CODE2}} --s {75, 300}", json_output=True)
        sys.stdout = sys.__stdout__
        data = parse_json_output(capture_stdout)
    assert isinstance(data, list)
    assert len(data) == 6  # 3x2 combinations

    # Verify all combinations
    variants = [
        (None, 75),  # No --p, stylize 75
        (None, 300),  # No --p, stylize 300
        (True, 75),  # Empty --p, stylize 75
        (True, 300),  # Empty --p, stylize 300
        (["CODE1", "CODE2"], 75),  # --p with codes, stylize 75
        (["CODE1", "CODE2"], 300),  # --p with codes, stylize 300
    ]
    for prompt in data:
        assert prompt["text"] == "smooth edges"
        assert (prompt.get("personalization"), prompt["stylize"]) in variants


def test_mj_command(cli):
    """Test Midjourney prompt conversion."""
    with StringIO() as capture_stdout:
        sys.stdout = capture_stdout
        cli.mj("a serene landscape --ar 16:9 --stylize 100", json_output=True)
        sys.stdout = sys.__stdout__
        data = parse_json_output(capture_stdout)
    assert isinstance(data, dict)  # Changed from list to dict
    assert data["text"] == "a serene landscape"
    assert data["stylize"] == 100
    assert data["aspect_ratio"] == "16:9"


def test_fal_command(cli):
    """Test Fal.ai prompt conversion."""
    with StringIO() as capture_stdout:
        sys.stdout = capture_stdout
        cli.fal("a serene landscape --ar 16:9 --stylize 100", json_output=True)
        sys.stdout = sys.__stdout__
        data = parse_json_output(capture_stdout)
    assert isinstance(data, dict)
    assert data["prompt"] == "a serene landscape"
    assert data["aspect_ratio"] == "16:9"
    assert data["stylize"] == 100


def test_perm_command(cli):
    """Test permutation expansion."""
    with StringIO() as capture_stdout:
        sys.stdout = capture_stdout
        cli.perm("a {red, blue} bird on a {branch, rock}", json_output=True)
        sys.stdout = sys.__stdout__
        data = parse_json_output(capture_stdout)
    assert isinstance(data, list)
    assert len(data) == 4
    expected = [
        "a red bird on a branch",
        "a red bird on a rock",
        "a blue bird on a branch",
        "a blue bird on a rock",
    ]
    assert set(data) == set(expected)
```

## File: tests/conftest.py (Size: 1.04 KB)

```
# this_file: tests/conftest.py
"""Pytest configuration and shared fixtures."""

import pytest


@pytest.fixture
def sample_prompts():
    """Return a dictionary of sample prompts for testing."""
    return {
        "basic": "a serene landscape --ar 16:9 --stylize 100",
        "with_image": "https://example.com/image.jpg mystical forest --chaos 20",
        "permutation": "a {red, blue} bird on a {flower, leaf} --ar 16:9",
        "multi_prompt": "mystical forest ::2 foggy mountains ::1 --chaos 20",
        "with_flags": "landscape photo --tile --no blur,cars",
        "escaped_commas": "a {red\\, blue, green} bird",
        "nested": "a {big {red, blue}, small green} bird",
        "multiple_images": "https://example.com/1.jpg https://example.com/2.jpg forest --iw 2",
    }


@pytest.fixture
def invalid_prompts():
    """Return a dictionary of invalid prompts for testing."""
    return {
        "empty": "",
        "only_params": "--ar 16:9",
        "unclosed_brace": "a {red, blue bird",
        "invalid_weight": "forest ::x mountains",
    }
```

## File: tests/core/__init__.py (Size: 0.04 KB)

```
# this_file: tests/core/__init__.py
```

## File: tests/core/test_input.py (Size: 3.74 KB)

```
# this_file: tests/core/test_input.py
"""Tests for input handling."""

from midjargon.core.input import expand_midjargon_input

# Test constants
PERMUTATION_COUNT_2 = 2  # Single permutation with 2 options
PERMUTATION_COUNT_3 = 3  # Single permutation with 3 options


def test_basic_input():
    """Test basic input without permutations."""
    result = expand_midjargon_input("a simple prompt")
    assert len(result) == 1
    assert result[0] == "a simple prompt"


def test_single_permutation():
    """Test input with a single permutation."""
    result = expand_midjargon_input("a {red, blue} bird")
    assert len(result) == PERMUTATION_COUNT_2
    assert "a red bird" in result
    assert "a blue bird" in result


def test_empty_input():
    """Test empty input handling."""
    result = expand_midjargon_input("")
    assert len(result) == 1
    assert result[0] == ""


def test_multiple_permutations():
    """Test input with multiple permutations."""
    result = expand_midjargon_input("a {red, blue, green} bird")
    assert len(result) == PERMUTATION_COUNT_3
    assert "a red bird" in result
    assert "a blue bird" in result
    assert "a green bird" in result


def test_nested_permutations():
    """Test input with nested permutations."""
    result = expand_midjargon_input("a {red {cat, dog}, blue bird}")
    assert len(result) == PERMUTATION_COUNT_3
    assert "a red cat" in result
    assert "a red dog" in result
    assert "a blue bird" in result


def test_escaped_braces():
    """Test input with escaped braces."""
    result = expand_midjargon_input(r"a \{red, blue\} bird")
    assert len(result) == 1
    assert result[0] == "a {red, blue} bird"


def test_escaped_commas():
    """Test input with escaped commas."""
    result = expand_midjargon_input(r"a {red\, blue, green} bird")
    assert len(result) == PERMUTATION_COUNT_2
    assert "a red, blue bird" in result
    assert "a green bird" in result


def test_unmatched_braces():
    """Test input with unmatched braces."""
    result = expand_midjargon_input("a {red, blue bird")
    assert len(result) == 1
    assert result[0] == "a {red, blue bird"


def test_empty_permutation():
    """Test input with empty permutation options."""
    result = expand_midjargon_input("a {} bird")
    assert len(result) == 1
    assert result[0] == "a bird"


def test_whitespace_handling():
    """Test input with various whitespace patterns."""
    result = expand_midjargon_input("a {  red  ,  blue  } bird")
    assert len(result) == PERMUTATION_COUNT_2
    assert "a red bird" in result
    assert "a blue bird" in result


def test_expand_midjargon_input():
    """Test expand_midjargon_input function to verify prompt expansion."""
    result = expand_midjargon_input("a {red, blue} bird")
    assert len(result) == 2
    assert "a red bird" in result
    assert "a blue bird" in result

    result = expand_midjargon_input("a {red, blue, green} bird")
    assert len(result) == 3
    assert "a red bird" in result
    assert "a blue bird" in result
    assert "a green bird" in result

    result = expand_midjargon_input("a {red {cat, dog}, blue bird}")
    assert len(result) == 3
    assert "a red cat" in result
    assert "a red dog" in result
    assert "a blue bird" in result


def test_handling_escaped_characters():
    """Test handling of escaped characters in expand_midjargon_input."""
    result = expand_midjargon_input(r"a \{red, blue\} bird")
    assert len(result) == 1
    assert result[0] == "a {red, blue} bird"

    result = expand_midjargon_input(r"a {red\, blue, green} bird")
    assert len(result) == 2
    assert "a red, blue bird" in result
    assert "a green bird" in result

    result = expand_midjargon_input(r"a {red, blue\} bird")
    assert len(result) == 1
    assert result[0] == "a {red, blue} bird"
```

## File: tests/core/test_parameters.py (Size: 9.75 KB)

```
# this_file: tests/core/test_parameters.py
"""Tests for parameter parsing functionality."""

import pytest

from midjargon.core.parameters import parse_parameters


def test_basic_parameter_parsing():
    """Test parsing of basic parameters."""
    param_str = "--ar 16:9 --stylize 100"
    params = parse_parameters(param_str)
    assert params["aspect"] == "16:9"
    assert params["stylize"] == "100"


def test_flag_parameters():
    """Test parsing of flag parameters (without values)."""
    param_str = "--tile --turbo --relax"
    params = parse_parameters(param_str)
    assert params["tile"] is None
    assert params["turbo"] is None
    assert params["relax"] is None


def test_parameter_with_multiple_values():
    """Test parsing parameters that accept multiple values."""
    param_str = "--no blur,cars,watermark"
    params = parse_parameters(param_str)
    assert params["no"] == "blur,cars,watermark"


def test_parameter_with_spaces():
    """Test parsing parameters with values containing spaces."""
    param_str = '--style "raw photo" --seed 123456'
    params = parse_parameters(param_str)
    assert params["style"] == "raw photo"
    assert params["seed"] == "123456"


def test_mixed_parameters():
    """Test parsing a mix of different parameter types."""
    param_str = '--ar 16:9 --tile --no blur,cars --style "raw photo"'
    params = parse_parameters(param_str)
    assert params["aspect"] == "16:9"
    assert params["tile"] is None
    assert params["no"] == "blur,cars"
    assert params["style"] == "raw photo"


def test_shorthand_parameters():
    """Test parsing of shorthand parameter names."""
    param_str = "--s 100 --c 50 --w 1000 --iw 2.0 --q 1.0"
    params = parse_parameters(param_str)
    assert params["stylize"] == "100"
    assert params["chaos"] == "50"
    assert params["weird"] == "1000"
    assert params["image_weight"] == "2.0"
    assert params["quality"] == "1.0"


def test_niji_version_parameter():
    """Test parsing of niji version parameter."""
    # Test basic niji
    params = parse_parameters("--niji")
    assert params["version"] == "niji"

    # Test niji with version
    params = parse_parameters("--niji 6")
    assert params["version"] == "niji 6"


def test_version_parameter():
    """Test parsing of version parameter."""
    # Test v parameter
    params = parse_parameters("--v 5.2")
    assert params["version"] == "5.2"


def test_personalization_parameter():
    """Test parsing of personalization parameter."""
    # Test basic p parameter
    params = parse_parameters("--p")
    assert params["personalization"] is None  # Flag without value is None

    # Test p parameter with value
    params = parse_parameters("--p custom")
    assert params["personalization"] == ["custom"]

    # Test p parameter with multiple values
    params = parse_parameters("--p custom1 custom2")
    assert params["personalization"] == ["custom1", "custom2"]

    # Test personalization parameter with value
    params = parse_parameters("--personalization custom")
    assert params["personalization"] == ["custom"]

    # Test personalization parameter with multiple values
    params = parse_parameters("--personalization custom1 custom2")
    assert params["personalization"] == ["custom1", "custom2"]


def test_reference_parameters():
    """Test parsing of reference parameters."""
    param_str = "--cref img1.jpg img2.jpg --sref style1.jpg style2.jpg"
    params = parse_parameters(param_str)
    assert params["character_reference"] == ["img1.jpg", "img2.jpg"]
    assert params["style_reference"] == ["style1.jpg", "style2.jpg"]


def test_parameter_order():
    """Test that parameter order is preserved in output."""
    param_str = "--seed 123 --ar 16:9 --chaos 20 --tile"
    params = parse_parameters(param_str)
    keys = list(params.keys())
    assert keys == ["seed", "aspect", "chaos", "tile"]


def test_invalid_parameters():
    """Test handling of invalid parameter formats."""
    with pytest.raises(ValueError, match="Empty parameter name"):
        parse_parameters("--")  # Empty parameter name

    with pytest.raises(ValueError, match="Missing value for parameter"):
        parse_parameters("--ar")  # Missing required value

    with pytest.raises(ValueError, match="Parameter name cannot start with dash"):
        parse_parameters("ar 16:9")  # Missing -- prefix

    with pytest.raises(ValueError, match="Missing value for parameter"):
        parse_parameters("--v")  # Missing version value


def test_parse_parameters():
    """Test parse_parameters function to verify parameter parsing."""
    param_str = "--ar 16:9 --stylize 100"
    params = parse_parameters(param_str)
    assert params["aspect"] == "16:9"
    assert params["stylize"] == "100"

    param_str = "--tile --turbo --relax"
    params = parse_parameters(param_str)
    assert params["tile"] is None
    assert params["turbo"] is None
    assert params["relax"] is None

    param_str = "--no blur,cars,watermark"
    params = parse_parameters(param_str)
    assert params["no"] == "blur,cars,watermark"

    param_str = '--style "raw photo" --seed 123456'
    params = parse_parameters(param_str)
    assert params["style"] == "raw photo"
    assert params["seed"] == "123456"

    param_str = '--ar 16:9 --tile --no blur,cars --style "raw photo"'
    params = parse_parameters(param_str)
    assert params["aspect"] == "16:9"
    assert params["tile"] is None
    assert params["no"] == "blur,cars"
    assert params["style"] == "raw photo"

    param_str = "--s 100 --c 50 --w 1000 --iw 2.0 --q 1.0"
    params = parse_parameters(param_str)
    assert params["stylize"] == "100"
    assert params["chaos"] == "50"
    assert params["weird"] == "1000"
    assert params["image_weight"] == "2.0"
    assert params["quality"] == "1.0"

    params = parse_parameters("--niji")
    assert params["version"] == "niji"

    params = parse_parameters("--niji 6")
    assert params["version"] == "niji 6"

    params = parse_parameters("--v 5.2")
    assert params["version"] == "5.2"

    params = parse_parameters("--p")
    assert params["personalization"] is None  # Flag without value is None

    params = parse_parameters("--p custom")
    assert params["personalization"] == ["custom"]

    params = parse_parameters("--personalization custom")
    assert params["personalization"] == ["custom"]

    param_str = "--cref img1.jpg img2.jpg --sref style1.jpg style2.jpg"
    params = parse_parameters(param_str)
    assert params["character_reference"] == ["img1.jpg", "img2.jpg"]
    assert params["style_reference"] == ["style1.jpg", "style2.jpg"]

    param_str = "--seed 123 --ar 16:9 --chaos 20 --tile"
    params = parse_parameters(param_str)
    keys = list(params.keys())
    assert keys == ["seed", "aspect", "chaos", "tile"]

    with pytest.raises(ValueError, match="Empty parameter name"):
        parse_parameters("--")  # Empty parameter name

    with pytest.raises(ValueError, match="Missing value for parameter"):
        parse_parameters("--ar")  # Missing required value

    with pytest.raises(ValueError, match="Parameter name cannot start with dash"):
        parse_parameters("ar 16:9")  # Missing -- prefix

    with pytest.raises(ValueError, match="Missing value for parameter"):
        parse_parameters("--v")  # Missing version value


def test_flag_parameters_handling():
    """Test handling of flag parameters in parse_parameters."""
    param_str = "--tile --turbo --relax --video --remix"
    params = parse_parameters(param_str)
    assert params["tile"] is None
    assert params["turbo"] is None
    assert params["relax"] is None
    assert params["video"] is None
    assert params["remix"] is None

    param_str = "--p"
    params = parse_parameters(param_str)
    assert params["personalization"] is None  # Flag without value is None

    param_str = "--p custom"
    params = parse_parameters(param_str)
    assert params["personalization"] == ["custom"]

    param_str = "--personalization custom"
    params = parse_parameters(param_str)
    assert params["personalization"] == ["custom"]


def test_special_seed_values():
    """Test handling of special seed values."""
    # Test random seed
    params = parse_parameters("--seed random")
    assert params["seed"] == "random"

    # Test numeric seed
    params = parse_parameters("--seed 12345")
    assert params["seed"] == "12345"


def test_reference_url_handling():
    """Test handling of URLs in reference parameters."""
    # Test character reference with quoted URL containing spaces
    params = parse_parameters('--cref "https://example.com/image with spaces.jpg"')
    assert params["character_reference"] == [
        "https://example.com/image with spaces.jpg"
    ]

    # Test style reference with quoted URL containing spaces
    params = parse_parameters('--sref "https://example.com/style with spaces.jpg"')
    assert params["style_reference"] == ["https://example.com/style with spaces.jpg"]

    # Test character reference with single URL (no quotes)
    params = parse_parameters("--cref https://example.com/image.jpg")
    assert params["character_reference"] == ["https://example.com/image.jpg"]

    # Test style reference with single URL (no quotes)
    params = parse_parameters("--sref https://example.com/style.jpg")
    assert params["style_reference"] == ["https://example.com/style.jpg"]


def test_niji_version_handling():
    """Test handling of niji version parameter."""
    # Test basic niji flag
    params = parse_parameters("--niji")
    assert params["version"] == "niji"

    # Test niji with version
    params = parse_parameters("--niji 5")
    assert params["version"] == "niji 5"

    # Test niji with version in permutation
    params = parse_parameters("--niji 6")
    assert params["version"] == "niji 6"

    # Ensure no 'v' prefix is added
    version = str(params["version"])  # Convert to string to use startswith
    assert not version.startswith("v")
```

## File: tests/core/test_parser.py (Size: 3.27 KB)

```
# this_file: tests/core/test_parser.py
"""Tests for prompt parsing functionality."""

from midjargon.core.parser import parse_midjargon_prompt_to_dict

# Test constants
ASPECT_RATIO = "16:9"
STYLIZE_VALUE = 100
CHAOS_VALUE = 50
IMAGE_URL = "https://example.com/image.jpg"


def test_basic_prompt_parsing():
    """Test basic prompt parsing."""
    prompt = "a beautiful landscape --ar 16:9 --stylize 100"
    result = parse_midjargon_prompt_to_dict(prompt)
    assert result["text"] == "a beautiful landscape"
    assert result["aspect"] == ASPECT_RATIO
    assert result["stylize"] == STYLIZE_VALUE


def test_prompt_with_image_url():
    """Test prompt parsing with image URL."""
    prompt = f"{IMAGE_URL} a mystical forest --chaos 50"
    result = parse_midjargon_prompt_to_dict(prompt)
    assert result["text"] == "a mystical forest"
    assert result["images"] == [IMAGE_URL]
    assert result["chaos"] == CHAOS_VALUE


def test_prompt_with_multiple_image_urls():
    """Test prompt parsing with multiple image URLs."""
    image_urls = [
        "https://example.com/image1.jpg",
        "https://example.com/image2.jpg",
    ]
    prompt = f"{image_urls[0]} {image_urls[1]} a serene landscape --stylize 100"
    result = parse_midjargon_prompt_to_dict(prompt)
    assert result["text"] == "a serene landscape"
    assert result["images"] == image_urls
    assert result["stylize"] == STYLIZE_VALUE


def test_prompt_with_parameters():
    """Test prompt parsing with various parameters."""
    prompt = "a futuristic city --ar 16:9 --stylize 100 --chaos 50"
    result = parse_midjargon_prompt_to_dict(prompt)
    assert result["text"] == "a futuristic city"
    assert result["aspect"] == ASPECT_RATIO
    assert result["stylize"] == STYLIZE_VALUE
    assert result["chaos"] == CHAOS_VALUE


def test_prompt_with_empty_parameters():
    """Test prompt parsing with empty parameters."""
    prompt = "a landscape photo --tile --no blur,cars"
    result = parse_midjargon_prompt_to_dict(prompt)
    assert result["text"] == "a landscape photo"
    assert result["tile"] is None
    assert result["no"] == "blur,cars"


def test_prompt_with_escaped_characters():
    """Test prompt parsing with escaped characters."""
    prompt = r"a \{red, blue\} bird"
    result = parse_midjargon_prompt_to_dict(prompt)
    assert result["text"] == r"a \{red, blue\} bird"


def test_prompt_with_nested_permutations():
    """Test prompt parsing with nested permutations."""
    prompt = "a {big {red, blue}, small green} bird"
    result = parse_midjargon_prompt_to_dict(prompt)
    assert result["text"] == "a {big {red, blue}, small green} bird"


def test_prompt_with_unmatched_braces():
    """Test prompt parsing with unmatched braces."""
    prompt = "a {red, blue bird"
    result = parse_midjargon_prompt_to_dict(prompt)
    assert result["text"] == "a {red, blue bird"


def test_prompt_with_empty_permutation():
    """Test prompt parsing with empty permutation options."""
    prompt = "a {} bird"
    result = parse_midjargon_prompt_to_dict(prompt)
    assert result["text"] == "a {} bird"


def test_prompt_with_whitespace_handling():
    """Test prompt parsing with various whitespace patterns."""
    prompt = "a {  red  ,  blue  } bird"
    result = parse_midjargon_prompt_to_dict(prompt)
    assert result["text"] == "a { red , blue } bird"
```

## File: tests/engines/__init__.py (Size: 0.04 KB)

```
# this_file: tests/engines/__init__.py
```

## File: tests/engines/midjourney/__init__.py (Size: 0.05 KB)

```
# this_file: tests/engines/midjourney/__init__.py
```

## File: tests/engines/midjourney/test_midjourney_parser.py (Size: 12.91 KB)

```
# this_file: tests/engines/midjourney/test_midjourney_parser.py
"""Tests for Midjourney parser."""

from typing import TYPE_CHECKING

import pytest

from midjargon.engines.midjourney import MidjourneyParser

if TYPE_CHECKING:
    from midjargon.core.type_defs import MidjargonDict

# Test constants
STYLIZE_VALUE = 100
CHAOS_VALUE = 50
WEIRD_VALUE = 1000
SEED_VALUE = 12345
STOP_VALUE = 80
IMAGE_WEIGHT_VALUE = 2.0
VERSION_NUMBER = "5.2"
DEFAULT_STYLIZE = 100
QUALITY_VALUE = 1.5
CHARACTER_WEIGHT_VALUE = 50
STYLE_WEIGHT_VALUE = 500
STYLE_VERSION_VALUE = 3
REPEAT_VALUE = 5


def test_numeric_parameters():
    """Test parsing of numeric parameters."""
    parser = MidjourneyParser()
    prompt = parser.parse_dict(
        {
            "text": "a photo",
            "stylize": str(STYLIZE_VALUE),
            "seed": str(SEED_VALUE),
            "chaos": str(CHAOS_VALUE),
        }
    )

    assert prompt.text == "a photo"
    assert prompt.stylize == STYLIZE_VALUE
    assert prompt.seed == SEED_VALUE
    assert prompt.chaos == CHAOS_VALUE


def test_style_parameters():
    """Test parsing of style parameters."""
    parser = MidjourneyParser()
    prompt = parser.parse_dict({"text": "a photo", "style": "raw", "v": VERSION_NUMBER})

    assert prompt.text == "a photo"
    assert prompt.style == "raw"
    assert prompt.version == f"v{VERSION_NUMBER}"


def test_aspect_ratio():
    """Test parsing of aspect ratio."""
    parser = MidjourneyParser()
    prompt = parser.parse_dict({"text": "a photo", "aspect": "16:9"})

    assert prompt.text == "a photo"
    assert prompt.aspect_width == 16
    assert prompt.aspect_height == 9


def test_image_prompts():
    """Test parsing of image prompts."""
    parser = MidjourneyParser()
    urls = [
        "https://example.com/image1.jpg",
        "https://example.com/image2.jpg",
    ]
    prompt = parser.parse_dict({"text": "a fusion", "images": urls})

    assert prompt.text == "a fusion"
    assert len(prompt.image_prompts) == 2
    assert [p.url for p in prompt.image_prompts] == urls


def test_extra_parameters():
    """Test handling of unknown parameters."""
    parser = MidjourneyParser()
    prompt = parser.parse_dict(
        {
            "text": "a photo",
            "unknown": "value",
            "flag": None,
        }
    )

    assert prompt.text == "a photo"
    assert prompt.extra_params == {"unknown": "value", "flag": None}


def test_parameter_conversion():
    """Test parameter value conversion."""
    parser = MidjourneyParser()
    prompt = parser.parse_dict(
        {
            "text": "a photo",
            "stylize": str(STYLIZE_VALUE),
            "seed": str(SEED_VALUE),
            "iw": str(IMAGE_WEIGHT_VALUE),
        }
    )

    assert prompt.text == "a photo"
    assert prompt.stylize == STYLIZE_VALUE
    assert prompt.seed == SEED_VALUE
    assert prompt.image_weight == IMAGE_WEIGHT_VALUE


def test_invalid_values():
    """Test handling of invalid parameter values."""
    parser = MidjourneyParser()

    # Invalid aspect ratio - now accepts any value
    result = parser.parse_dict({"text": "a photo", "aspect": "999:999"})
    assert result.aspect_width == 999
    assert result.aspect_height == 999

    # Invalid numeric value - raises ValueError
    with pytest.raises(ValueError, match=r"Invalid numeric value for stylize: 1001"):
        parser.parse_dict({"text": "a photo", "stylize": "1001"})

    # Invalid image URL - treated as extra parameter
    result = parser.parse_dict({"text": "a photo", "image": "not_a_url"})
    assert len(result.image_prompts) == 0
    assert result.extra_params.get("image") == "not_a_url"


def test_parameter_ranges():
    """Test parameter value range validation."""
    parser = MidjourneyParser()

    # Test maximum values
    with pytest.raises(ValueError, match=r"Invalid numeric value for stylize: 2000"):
        parser.parse_dict({"text": "a photo", "stylize": "2000"})

    # Test minimum values
    with pytest.raises(ValueError, match=r"Invalid numeric value for chaos: -1"):
        parser.parse_dict({"text": "a photo", "chaos": "-1"})


def test_empty_values():
    """Test handling of empty values."""
    parser = MidjourneyParser()

    # Empty text
    with pytest.raises(ValueError, match="Empty prompt"):
        parser.parse_dict({"text": ""})

    # Empty image list
    prompt = parser.parse_dict({"text": "a photo", "images": []})
    assert prompt.text == "a photo"
    assert not prompt.image_prompts

    # None values
    prompt = parser.parse_dict({"text": "a photo", "stylize": None})
    assert prompt.text == "a photo"
    assert prompt.stylize is None


def test_niji_parameter():
    """Test parsing of niji parameter."""
    parser = MidjourneyParser()
    prompt = parser.parse_dict(
        {
            "text": "a photo",
            "niji": "6",
        }
    )

    assert prompt.text == "a photo"
    assert prompt.version == "niji 6"


def test_multiple_permutations():
    """Test handling of multiple permutations."""
    parser = MidjourneyParser()

    # Test with parameter permutations
    input_dicts = [
        {"text": "smooth edges", "stylize": "75"},
        {"text": "smooth edges", "stylize": "300"},
        {"text": "smooth edges", "stylize": "75", "personalization": None},
        {"text": "smooth edges", "stylize": "300", "personalization": None},
    ]

    results = [parser.parse_dict(d) for d in input_dicts]
    assert len(results) == 4

    # Verify each permutation is handled correctly
    result_tuples = {(r.text.strip(), r.stylize, r.personalization) for r in results}

    expected = {
        ("smooth edges", 75, False),
        ("smooth edges", 300, False),
        ("smooth edges", 75, True),
        ("smooth edges", 300, True),
    }

    assert result_tuples == expected

    # Test with flag permutations
    input_dicts = [
        {"text": "photo"},
        {"text": "photo", "tile": None},
        {"text": "photo", "turbo": None},
        {"text": "photo", "tile": None, "turbo": None},
    ]

    results = [parser.parse_dict(d) for d in input_dicts]
    assert len(results) == 4

    # Verify each permutation is handled correctly
    result_tuples = {(r.text.strip(), r.tile is True, r.turbo is True) for r in results}

    expected = {
        ("photo", False, False),
        ("photo", True, False),
        ("photo", False, True),
        ("photo", True, True),
    }

    assert result_tuples == expected


def test_personalization_parameter():
    """Test parsing of personalization parameter."""
    parser = MidjourneyParser()

    # Test flag without value - should be True
    prompt = parser.parse_dict({"text": "a photo", "p": None})
    assert prompt.personalization is True

    # Test flag with empty string - should be True
    prompt = parser.parse_dict({"text": "a photo", "p": ""})
    assert prompt.personalization is True

    # Test with string value - should be list with one item
    prompt = parser.parse_dict({"text": "a photo", "p": "custom"})
    assert prompt.personalization == ["custom"]

    # Test with list value - should keep list
    prompt = parser.parse_dict({"text": "a photo", "p": ["custom1", "custom2"]})
    assert prompt.personalization == ["custom1", "custom2"]

    # Test with empty list - should be False
    prompt = parser.parse_dict({"text": "a photo", "p": []})
    assert prompt.personalization is False

    # Test without personalization - should be False
    prompt = parser.parse_dict({"text": "a photo"})
    assert prompt.personalization is False


def test_complex_permutations():
    """Test handling of complex parameter permutations."""
    parser = MidjourneyParser()

    # Test with multiple parameter types
    input_dicts: list[MidjargonDict] = [
        {
            "text": "portrait modern",
            "aspect": "1:1",
            "stylize": "100",
            "images": [],
        },
        {
            "text": "portrait modern",
            "aspect": "16:9",
            "stylize": "100",
            "images": [],
        },
        {
            "text": "portrait modern",
            "aspect": "1:1",
            "stylize": "100",
            "personalization": "custom",
            "images": [],
        },
        {
            "text": "portrait modern",
            "aspect": "16:9",
            "stylize": "100",
            "personalization": "custom",
            "images": [],
        },
        {
            "text": "portrait vintage",
            "aspect": "1:1",
            "stylize": "100",
            "images": [],
        },
        {
            "text": "portrait vintage",
            "aspect": "16:9",
            "stylize": "100",
            "images": [],
        },
        {
            "text": "portrait vintage",
            "aspect": "1:1",
            "stylize": "100",
            "personalization": "custom",
            "images": [],
        },
        {
            "text": "portrait vintage",
            "aspect": "16:9",
            "stylize": "100",
            "personalization": "custom",
            "images": [],
        },
    ]

    results = [parser.parse_dict(d) for d in input_dicts]
    assert len(results) == 8

    # Verify each permutation is handled correctly
    result_tuples = {
        (
            r.text.strip(),
            r.personalization[0]
            if isinstance(r.personalization, list)
            else r.personalization,
            f"{r.aspect_width}:{r.aspect_height}",
            r.stylize,
        )
        for r in results
    }

    expected = {
        ("portrait modern", False, "1:1", 100),
        ("portrait modern", False, "16:9", 100),
        ("portrait modern", "custom", "1:1", 100),
        ("portrait modern", "custom", "16:9", 100),
        ("portrait vintage", False, "1:1", 100),
        ("portrait vintage", False, "16:9", 100),
        ("portrait vintage", "custom", "1:1", 100),
        ("portrait vintage", "custom", "16:9", 100),
    }

    assert result_tuples == expected


def test_new_parameters():
    """Test parsing of new parameters."""
    parser = MidjourneyParser()
    prompt = parser.parse_dict(
        {
            "text": "a photo",
            "quality": str(QUALITY_VALUE),
            "character_weight": str(CHARACTER_WEIGHT_VALUE),
            "style_weight": str(STYLE_WEIGHT_VALUE),
            "style_version": str(STYLE_VERSION_VALUE),
            "repeat": str(REPEAT_VALUE),
        }
    )

    assert prompt.text == "a photo"
    assert prompt.quality == QUALITY_VALUE
    assert prompt.character_weight == CHARACTER_WEIGHT_VALUE
    assert prompt.style_weight == STYLE_WEIGHT_VALUE
    assert prompt.style_version == STYLE_VERSION_VALUE
    assert prompt.repeat == REPEAT_VALUE


def test_new_parameter_validation():
    """Test validation of new parameters."""
    parser = MidjourneyParser()

    # Test invalid quality value
    with pytest.raises(ValueError, match=r"Invalid numeric value for quality: 5"):
        parser.parse_dict({"text": "a photo", "quality": "5"})

    # Test invalid character weight value
    with pytest.raises(
        ValueError, match=r"Invalid numeric value for character_weight: 2000"
    ):
        parser.parse_dict({"text": "a photo", "character_weight": "2000"})

    # Test invalid style weight value
    with pytest.raises(
        ValueError, match=r"Invalid numeric value for style_weight: 5000"
    ):
        parser.parse_dict({"text": "a photo", "style_weight": "5000"})

    # Test invalid style version value
    with pytest.raises(
        ValueError, match=r"Invalid numeric value for style_version: 20"
    ):
        parser.parse_dict({"text": "a photo", "style_version": "20"})

    # Test invalid repeat value
    with pytest.raises(ValueError, match=r"Invalid numeric value for repeat: 200"):
        parser.parse_dict({"text": "a photo", "repeat": "200"})


def test_edge_cases():
    """Test handling of edge cases in Midjourney parser."""
    parser = MidjourneyParser()

    # Test empty prompt
    with pytest.raises(ValueError, match="Empty prompt"):
        parser.parse_dict({"text": ""})

    # Test prompt with only spaces
    with pytest.raises(ValueError, match="Empty prompt"):
        parser.parse_dict({"text": "   "})

    # Test prompt with special characters
    prompt = parser.parse_dict({"text": "a photo with special characters !@#$%^&*()"})
    assert prompt.text == "a photo with special characters !@#$%^&*()"

    # Test prompt with long text
    long_text = "a" * 1000
    prompt = parser.parse_dict({"text": long_text})
    assert prompt.text == long_text

    # Test prompt with mixed types in extra parameters - all should be converted to strings
    prompt = parser.parse_dict(
        {
            "text": "a photo",
            "extra1": "123",
            "extra2": "45.67",
            "extra3": "true",
            "extra4": None,
            "extra5": "item1",  # Changed from list to string
        }
    )
    assert prompt.extra_params["extra1"] == "123"
    assert prompt.extra_params["extra2"] == "45.67"
    assert prompt.extra_params["extra3"] == "true"
    assert prompt.extra_params["extra4"] is None
    assert prompt.extra_params["extra5"] == "item1"
```

## File: tests/integration/__init__.py (Size: 0.04 KB)

```
# this_file: tests/integration/__init__.py
```

## File: tests/integration/test_workflow.py (Size: 10.75 KB)

```
# this_file: tests/integration/test_workflow.py
"""Integration tests for complete midjargon workflow."""

import sys
from io import StringIO

import pytest

from midjargon import expand_midjargon_input, parse_midjargon_prompt_to_dict
from midjargon.cli.main import MidjargonCLI
from midjargon.engines.midjourney import MidjourneyPrompt, parse_midjourney_dict
from tests.cli.test_main import parse_json_output  # Added import for JSON parsing

# Test constants
ASPECT_WIDTH = 16
ASPECT_HEIGHT = 9
STYLIZE_VALUE = 100
CHAOS_VALUE = 50
WEIRD_VALUE = 1000
SEED_VALUE = 12345
STOP_VALUE = 80
IMAGE_WEIGHT_VALUE = 2.0
QUALITY_VALUE = 1.0
CHARACTER_WEIGHT_VALUE = 100
STYLE_WEIGHT_VALUE = 200
STYLE_VERSION_VALUE = 2
REPEAT_VALUE = 3
PERMUTATION_COUNT_2X2 = 4  # 2 options x 2 options
PERMUTATION_COUNT_2X2X2 = 8  # 2 options x 2 options x 2 options


def process_prompt(prompt: str) -> list[MidjourneyPrompt]:
    """Process a prompt through the complete workflow."""
    # Step 1: Expand permutations
    expanded = expand_midjargon_input(prompt)

    # Step 2: Parse each expanded prompt to a dictionary
    midjargon_dicts = [parse_midjargon_prompt_to_dict(p) for p in expanded]

    # Step 3: Convert each dictionary to a MidjourneyPrompt
    return [parse_midjourney_dict(d) for d in midjargon_dicts]


def test_basic_workflow():
    """Test basic prompt workflow without permutations."""
    prompt = f"a beautiful landscape --ar {ASPECT_WIDTH}:{ASPECT_HEIGHT} --stylize {STYLIZE_VALUE}"
    results = process_prompt(prompt)

    assert len(results) == 1
    result = results[0]

    assert result.text == "a beautiful landscape"
    assert result.aspect_width == ASPECT_WIDTH
    assert result.aspect_height == ASPECT_HEIGHT
    assert result.stylize == STYLIZE_VALUE


def test_permutation_workflow():
    """Test workflow with permutations."""
    prompt = f"a {{red, blue}} bird on a {{branch, rock}} --stylize {STYLIZE_VALUE}"
    results = process_prompt(prompt)

    assert len(results) == PERMUTATION_COUNT_2X2  # 2x2 permutations
    texts = {r.text for r in results}
    expected = {
        "a red bird on a branch",
        "a red bird on a rock",
        "a blue bird on a branch",
        "a blue bird on a rock",
    }
    assert texts == expected
    assert all(r.stylize == STYLIZE_VALUE for r in results)


def test_image_workflow():
    """Test workflow with image URLs."""
    urls = [
        "https://example.com/image1.jpg",
        "https://example.com/image2.jpg",
    ]
    prompt = f"{' '.join(urls)} abstract fusion --iw {IMAGE_WEIGHT_VALUE}"
    results = process_prompt(prompt)

    assert len(results) == 1
    result = results[0]

    assert result.text == "abstract fusion"
    assert len(result.image_prompts) == 2
    assert [p.url for p in result.image_prompts] == urls
    assert result.image_weight == IMAGE_WEIGHT_VALUE


def test_parameter_workflow():
    """Test workflow with various parameter types."""
    prompt = (
        "cyberpunk city --v 5.2 --style raw "
        f"--chaos {CHAOS_VALUE} --weird {WEIRD_VALUE} "
        f"--seed {SEED_VALUE} --stop {STOP_VALUE} "
        "--turbo --tile"
    )
    results = process_prompt(prompt)

    assert len(results) == 1
    result = results[0]

    assert result.text == "cyberpunk city"
    assert result.version == "v5.2"
    assert result.style == "raw"
    assert result.chaos == CHAOS_VALUE
    assert result.weird == WEIRD_VALUE
    assert result.seed == SEED_VALUE
    assert result.stop == STOP_VALUE
    assert result.turbo is True
    assert result.tile is True


def test_new_parameters_workflow():
    """Test workflow with new parameter types."""
    prompt = (
        "portrait photo "
        f"--quality {QUALITY_VALUE} "
        f"--cw {CHARACTER_WEIGHT_VALUE} "
        f"--sw {STYLE_WEIGHT_VALUE} "
        f"--sv {STYLE_VERSION_VALUE} "
        f"--repeat {REPEAT_VALUE} "
        "--cref ref1.jpg ref2.jpg "
        "--sref style1.jpg style2.jpg "
        "--p custom_profile1 custom_profile2"
    )
    results = process_prompt(prompt)

    assert len(results) == 1
    result = results[0]

    assert result.text == "portrait photo"
    assert result.quality == QUALITY_VALUE
    assert result.character_weight == CHARACTER_WEIGHT_VALUE
    assert result.style_weight == STYLE_WEIGHT_VALUE
    assert result.style_version == STYLE_VERSION_VALUE
    assert result.repeat == REPEAT_VALUE
    assert result.character_reference == ["ref1.jpg", "ref2.jpg"]
    assert result.style_reference == ["style1.jpg", "style2.jpg"]
    assert result.personalization == ["custom_profile1", "custom_profile2"]


def test_weighted_prompts_workflow():
    """Test workflow with weighted prompts."""
    prompt = "cyberpunk city::2 neon lights::1"
    results = process_prompt(prompt)

    assert len(results) == 1
    result = results[0]
    assert result.text == "cyberpunk city::2 neon lights::1"


def test_error_workflow():
    """Test error handling in workflow."""
    # Test empty prompt
    with pytest.raises(ValueError, match="Empty prompt"):
        process_prompt("")

    # Test whitespace-only prompt
    with pytest.raises(ValueError, match="Empty prompt"):
        process_prompt("   ")

    # Test invalid parameter value - raises ValueError
    with pytest.raises(ValueError, match=r"Invalid numeric value for stylize: 2000"):
        process_prompt(f"photo --stylize {STYLIZE_VALUE * 20}")

    # Test invalid image URL - treated as extra parameter
    results = process_prompt("photo --image not_a_url")
    assert len(results) == 1
    assert len(results[0].image_prompts) == 0
    assert results[0].extra_params.get("image") == "not_a_url"


def test_complex_workflow():
    """Test workflow with multiple features combined."""
    prompt = (
        "https://example.com/img1.jpg https://example.com/img2.jpg "
        "a {vintage, modern} {portrait, landscape} "
        "with {warm, cool} tones "
        f"--ar {ASPECT_WIDTH}:{ASPECT_HEIGHT} --stylize {STYLIZE_VALUE} "
        f"--chaos {CHAOS_VALUE} --v 5.2 --style raw "
        f"--quality {QUALITY_VALUE} --cw {CHARACTER_WEIGHT_VALUE} "
        "--turbo"
    )
    results = process_prompt(prompt)

    # 2x2x2 = 8 permutations
    assert len(results) == PERMUTATION_COUNT_2X2X2

    # Check common attributes
    for result in results:
        assert len(result.image_prompts) == 2
        assert result.aspect_width == ASPECT_WIDTH
        assert result.aspect_height == ASPECT_HEIGHT
        assert result.stylize == STYLIZE_VALUE
        assert result.chaos == CHAOS_VALUE
        assert result.version == "v5.2"
        assert result.style == "raw"
        assert result.quality == QUALITY_VALUE
        assert result.character_weight == CHARACTER_WEIGHT_VALUE
        assert result.turbo is True

    # Check text variations
    texts = {r.text for r in results}
    assert len(texts) == PERMUTATION_COUNT_2X2X2  # All combinations are unique


def test_permutations_with_parameters():
    """Test permutations with parameters are handled correctly."""
    prompt = "smooth edges {, --p} --s {75, 300}"
    results = process_prompt(prompt)

    assert len(results) == 4  # Should have 4 permutations

    # Convert results to set of tuples for easier comparison
    result_tuples = {
        (r.text.strip(), bool(r.personalization), r.stylize) for r in results
    }

    # Expected combinations
    expected = {
        ("smooth edges", False, 75),
        ("smooth edges", False, 300),
        ("smooth edges", True, 75),
        ("smooth edges", True, 300),
    }

    assert result_tuples == expected


def test_permutations_with_flag_parameters():
    """Test permutations with flag parameters (no value) are handled correctly."""
    prompt = "photo {, --tile} {, --turbo}"
    results = process_prompt(prompt)

    assert len(results) == 4  # Should have 4 permutations

    # Convert results to set of tuples for easier comparison
    result_tuples = {(r.text.strip(), r.tile is True, r.turbo is True) for r in results}

    # Expected combinations
    expected = {
        ("photo", False, False),
        ("photo", False, True),
        ("photo", True, False),
        ("photo", True, True),
    }

    assert result_tuples == expected


def test_permutations_with_complex_parameters():
    """Test permutations with complex parameter combinations."""
    prompt = "portrait {modern, vintage} {, --p custom} --ar {1:1, 16:9} --s 100"
    results = process_prompt(prompt)

    assert len(results) == 8  # Should have 8 permutations (2 x 2 x 2)

    # Convert results to set of tuples for easier comparison
    result_tuples = {
        (
            r.text.strip(),
            r.personalization[0]
            if isinstance(r.personalization, list)
            else r.personalization,
            f"{r.aspect_width}:{r.aspect_height}",
            r.stylize,
        )
        for r in results
    }

    expected = {
        ("portrait modern", False, "1:1", 100),
        ("portrait modern", False, "16:9", 100),
        ("portrait modern", "custom", "1:1", 100),
        ("portrait modern", "custom", "16:9", 100),
        ("portrait vintage", False, "1:1", 100),
        ("portrait vintage", False, "16:9", 100),
        ("portrait vintage", "custom", "1:1", 100),
        ("portrait vintage", "custom", "16:9", 100),
    }

    assert result_tuples == expected


def test_cli_mj_command():
    """Test Midjourney prompt conversion using CLI."""
    cli = MidjargonCLI()
    prompt = "a serene landscape --ar 16:9 --stylize 100"
    with StringIO() as capture_stdout:
        sys.stdout = capture_stdout
        cli.mj(prompt, json_output=True)
        sys.stdout = sys.__stdout__
        data = parse_json_output(capture_stdout)
    assert isinstance(data, dict)
    assert data["text"] == "a serene landscape"
    assert data["stylize"] == 100
    assert data["aspect_ratio"] == "16:9"


def test_cli_fal_command():
    """Test Fal.ai prompt conversion using CLI."""
    cli = MidjargonCLI()
    prompt = "a serene landscape --ar 16:9 --stylize 100"
    with StringIO() as capture_stdout:
        sys.stdout = capture_stdout
        cli.fal(prompt, json_output=True)
        sys.stdout = sys.__stdout__
        data = parse_json_output(capture_stdout)
    assert isinstance(data, dict)
    assert data["prompt"] == "a serene landscape"
    assert data["stylize"] == 100
    assert data["aspect_ratio"] == "16:9"


def test_cli_perm_command():
    """Test permutation expansion using CLI."""
    cli = MidjargonCLI()
    prompt = "a {red, blue} bird on a {branch, rock}"
    with StringIO() as capture_stdout:
        sys.stdout = capture_stdout
        cli.perm(prompt, json_output=True)
        sys.stdout = sys.__stdout__
        data = parse_json_output(capture_stdout)
    assert isinstance(data, list)
    assert len(data) == 4
    assert "a red bird on a branch" in data
    assert "a red bird on a rock" in data
    assert "a blue bird on a branch" in data
    assert "a blue bird on a rock" in data
```

## File: tests/test_package.py (Size: 0.18 KB)

```
# this_file: tests/test_package.py
"""Test suite for midjargon."""


def test_version():
    """Verify package exposes version."""
    import midjargon

    assert midjargon.__version__
```

