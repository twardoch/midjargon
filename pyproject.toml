[build-system]
build-backend = "hatchling.build"
requires = ["hatchling>=1.21.0", "hatch-vcs>=0.3.0"]

[[project.authors]]
email = "adam+github@twardoch.com"
name = "Adam Twardoch"

[project]
name = "midjargon"
version = "0.1.0"
description = "A package for parsing and manipulating Midjourney-style prompts"
requires-python = ">=3.10"
readme = "README.md"
license = { text = "Apache-2.0" }
dependencies = [
    "pydantic>=2.0.0",
    "rich>=13.0.0",
    "fire>=0.5.0",
    "python-box>=7.3.2",
    "fal-client>=0.5.8",
]

[[project.authors]]
name = "Adam Twardoch"
email = "adam+github@twardoch.com"

[project.optional-dependencies]
test = [
    "pytest>=8.0.0",
    "pytest-cov>=4.1.0",
]

[project.urls]
Documentation = "https://github.com/twardoch/midjargon#readme"
Issues = "https://github.com/twardoch/midjargon/issues"
Source = "https://github.com/twardoch/midjargon"

[project.scripts]
midjargon = "midjargon.__main__:main"

[build-system]
requires = ["hatchling>=1.21.0", "hatch-vcs>=0.3.0"]
build-backend = "hatchling.build"

[tool.rye]
managed = true
dev-dependencies = [
    "pytest>=8.0.0",
    "pytest-cov>=6.0.0",
    "ruff>=0.2.0",
    "mypy>=1.8.0",
]

[tool.hatch.metadata]
allow-direct-references = true

[tool.ruff]
line-length = 88
target-version = "py310"

[tool.ruff.lint]
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "C",  # flake8-comprehensions
    "B",  # flake8-bugbear
    "UP",  # pyupgrade
]
ignore = []

[tool.ruff.lint.isort]
known-first-party = ["midjargon"]

[tool.mypy]
python_version = "3.10"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true

[tool.coverage.paths]
midjargon = ["src/midjargon", "*/src/midjargon"]
tests = ["tests", "*/midjargon/tests"]

[tool.coverage.run]
branch = true
source = ["midjargon"]
parallel = true
source_pkgs = ["midjargon", "tests"]

[tool.coverage.report]
exclude_lines = [
    "no cov",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
]

[tool.hatch.version]
source = "vcs"

[tool.hatch.version.raw-options]
version_scheme = "post-release"

[tool.pytest.ini_options]
testpaths = ["tests"]
filterwarnings = [
    "error",
    "ignore::DeprecationWarning",
    "ignore::UserWarning",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "rounds: Number of rounds",
]

[tool.hatch.build.hooks.vcs]
version-file = "src/midjargon/__version__.py"

[tool.hatch.build.targets.wheel]
packages = ["src/midjargon"]

[[tool.hatch.envs.all.matrix]]
python = ["3.11", "3.12"]

[tool.hatch.envs.default]
dependencies = ["pytest", "pytest-cov", "mypy>=1.0.0", "ruff>=0.1.0"]

[tool.hatch.envs.default.scripts]
lint = ["ruff check src/midjargon tests", "ruff format src/midjargon tests"]
test = "pytest {args:tests}"
test-cov = "pytest --cov-report=term-missing --cov-config=pyproject.toml --cov=src/midjargon --cov=tests {args:tests}"
type-check = "mypy src/midjargon tests"

[tool.hatch.envs.lint]
dependencies = ["mypy>=1.0.0", "ruff>=0.1.0"]
detached = true

[tool.hatch.envs.lint.scripts]
all = ["style", "typing"]
fmt = ["ruff format {args:.}", "ruff check --fix {args:.}"]
style = ["ruff check {args:.}", "ruff format {args:.}"]
typing = "mypy --install-types --non-interactive {args:src/midjargon tests}"

[tool.hatch.envs.test]
dependencies = [
  "pytest>=7.0.0",
  "pytest-cov>=4.0.0",
  "pytest-xdist>=3.0.0",
  "midjargon[test]",
]

[tool.hatch.envs.test.scripts]
test = "pytest --cov=src/midjargon --cov-report=term-missing --cov-branch --no-cov-on-fail {args:tests}"
test-cov = "pytest --cov=src/midjargon --cov-report=term-missing --cov-branch --no-cov-on-fail {args:tests}"

[tool.pytest-benchmark]
min_rounds = 100
min_time = 0.1
histogram = true
storage = "file"
save-data = true
compare = [
    "min",    # Minimum time
    "max",    # Maximum time
    "mean",   # Mean time
    "stddev", # Standard deviation
    "median", # Median time
    "iqr",    # Inter-quartile range
    "ops",    # Operations per second
    "rounds", # Number of rounds
] 


[tool.pyright]
include = ["src", "tests"]
exclude = ["**/node_modules",
    "**/__pycache__",
]
ignore = ["_private"]
defineConstant = { DEBUG = true }

reportMissingImports = "error"
reportMissingTypeStubs = false

pythonVersion = "3.10"
pythonPlatform = "Linux"

