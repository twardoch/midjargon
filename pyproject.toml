[build-system]
requires = ["hatchling>=1.21.0", "hatch-vcs>=0.3.0"]
build-backend = "hatchling.build"

[tool.hatch.build.targets.wheel]
packages = ["src/midjargon"]

[project]
name = "midjargon"
dynamic = ["version"]
description = ""
readme = "README.md"
requires-python = ">=3.10"
license = "MIT"
keywords = []
classifiers = [
    "Development Status :: 4 - Beta",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: Implementation :: CPython",
    "Programming Language :: Python :: Implementation :: PyPy",
]

dependencies = [
    "pydantic>=2.0.0",
    "rich>=13.0.0",
    "fire>=0.5.0",
    "python-box>=7.3.2",
    "fal-client>=0.5.8",
]


[[project.authors]]
name = "Adam Twardoch"
email = "adam+github@twardoch.com"


[project.urls]
Documentation = "https://github.com/twardoch/midjargon#readme"
Issues = "https://github.com/twardoch/midjargon/issues"
Source = "https://github.com/twardoch/midjargon"


[tool.hatch.version]
source = "vcs"

[tool.hatch.version.raw-options]
version_scheme = "post-release"

[tool.hatch.build.hooks.vcs]
version-file = "src/midjargon/__version__.py"


[tool.hatch.envs.default]
dependencies = ["pytest", "pytest-cov", "mypy>=1.0.0", "ruff>=0.1.0"]


[tool.hatch.envs.default.scripts]
test = "pytest {args:tests}"
test-cov = "pytest --cov-report=term-missing --cov-config=pyproject.toml --cov=src/midjargon --cov=tests {args:tests}"
type-check = "mypy src/midjargon tests"
lint = ["ruff check src/midjargon tests", "ruff format src/midjargon tests"]


[[tool.hatch.envs.all.matrix]]
python = ["3.10", "3.11", "3.12"]


[tool.hatch.envs.lint]
detached = true
dependencies = ["mypy>=1.0.0", "ruff>=0.1.0"]


[tool.hatch.envs.lint.scripts]
typing = "mypy --install-types --non-interactive {args:src/midjargon tests}"
style = ["ruff check {args:.}", "ruff format {args:.}"]
fmt = ["ruff format {args:.}", "ruff check --fix {args:.}"]
all = ["style", "typing"]


[tool.ruff]
target-version = "py310"
line-length = 88
lint.extend-select = [
    "A",
    "ARG",
    "B",
    "C",
    "DTZ",
    "E",
    "EM",
    "F",
    "FBT",
    "I",
    "ICN",
    "ISC",
    "N",
    "PLC",
    "PLE",
    "PLR",
    "PLW",
    "Q",
    "RUF",
    "S",
    "T",
    "TID",
    "UP",
    "W",
    "YTT",
]
lint.ignore = [
    "ARG001",  # Unused function argument
    "E501",    # Line too long
    "I001",
    "RUF001",
    "PLR2004",
    "EXE003",
]


[tool.ruff.lint.per-file-ignores]
"tests/*" = ["S101"]


[tool.mypy]
python_version = "3.10"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true


[tool.coverage.run]
source_pkgs = ["midjargon", "tests"]
branch = true
parallel = true
omit = ["src/midjargon/__about__.py"]


[tool.coverage.paths]
midjargon = ["src/midjargon", "*/midjargon/src/midjargon"]
tests = ["tests", "*/midjargon/tests"]


[tool.coverage.report]
exclude_lines = ["no cov", "if __name__ == .__main__.:", "if TYPE_CHECKING:"]

[project.optional-dependencies]
test = ["pytest>=7.0.0", "pytest-cov>=4.0.0"]

dev = ["pre-commit>=3.6.0", "ruff>=0.1.0", "mypy>=1.0.0"]

all = [
    "pre-commit>=3.6.0",
    "ruff>=0.1.0",
    "mypy>=1.0.0",
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
]

[tool.hatch.envs.test]
dependencies = [
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "pytest-xdist>=3.0.0",
    "midjargon[test]"
]

[tool.hatch.envs.test.scripts]
test = "pytest --cov=src/midjargon --cov-report=term-missing --cov-branch --no-cov-on-fail {args:tests}"
test-cov = "pytest --cov=src/midjargon --cov-report=term-missing --cov-branch --no-cov-on-fail {args:tests}"

[tool.pytest.ini_options]
markers = [
    "benchmark: marks tests as benchmarks (select with '-m benchmark')",
    "unit: mark a test as a unit test",
    "integration: mark a test as an integration test",
    "permutation: tests for permutation functionality",
    "parameter: tests for parameter parsing",
    "prompt: tests for prompt parsing"
]
addopts = "-v --durations=10 -p no:briefcase"
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
norecursedirs = [
    ".*",
    "build",
    "dist",
    "venv",
    "__pycache__",
    "*.egg-info"
]
console_output_style = "progress"
log_cli = true
log_cli_level = "INFO"
filterwarnings = ["ignore::DeprecationWarning", "ignore::UserWarning"]
asyncio_mode = "auto"

[project.scripts]
midjargon = "midjargon.__main__:main"
